Search.setIndex({"docnames": ["autoapi/intel_extension_for_transformers/backends/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/compile/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/extractors/extractor/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/extractors/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/extractors/onnx_extractor/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/extractors/tf_extractor/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/graph/graph/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/graph/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/graph_utils/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/loaders/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/loaders/loader/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/logger/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/onnx_utils/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/all/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/assert/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/batch_matmul/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/batch_matmul_v2/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/bias_add/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/cast/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/concat/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/conv/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/empty_ops/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/expand_dims/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/fused_batch_matmul_v2/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/fused_batch_norm_v3/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/fused_gemm/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/fused_matmul/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/gather/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/gather_elements/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/gelu/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/gemm/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/iterator_get_next/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/iterator_v2/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/layer_normalization/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/map_and_batch_dataset/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/matmul/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/mean/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/mkl_layer_norm/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/model_dataset/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/one_hot/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/onnx_input/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/op/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/optimize_dataset/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/pack/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/placeholder/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/quantize_linear/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/quantize_v2/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/quantized_fused_matmul_and_dequantize/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/quantized_matmul_with_bias_and_dequantize/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/reduce_mean/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/reduce_sum/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/reshape/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/scatter_elements/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/softmax/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/split/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/squeeze/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/strided_slice/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/tensor/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/top_k/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/transpose/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/unpack/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/unsqueeze/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/add_cls_token/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/add_embeddings/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/attention_mask_length_adaptive_keep_indices/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/attention_output_layer_norm_length_adaptive_keep_indices/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/attention_reshape/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/collect_quant_info/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/conv_reshape/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/embeddingbag/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/gelu/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/generate_sequence/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/input_data/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/input_file/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/insert_bf16_node/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/insert_quant_node/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/interact_features/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/last_layer_shape/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/layer_norm/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/layer_norm_with_reduce_mean/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias_add/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias_gelu/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias_relu/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias_sigmoid/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias_tanh/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/merged_embeddingbag/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/output_data/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/padding_sequence/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/pattern/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/position_embeddings/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/position_embeddings_v1/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/qkv_merge/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/qkv_reshape/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/quantize_fusion/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/reshape_after_restore_hidden_states/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/reshape_before_and_after_attention_out_layer_norm_gather_elements/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/reshape_before_restore_hidden_states/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/reshape_fusion/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/restore_hidden_states_in_length_adaptive_update_indices/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/start_end_logits/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/subgraph_matcher/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/token_type_embeddings/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/token_type_embeddings_v1/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/transpose_batch_matmul/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/word_embeddings/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/tf_utils/index", "autoapi/intel_extension_for_transformers/backends/neural_engine/index", "autoapi/intel_extension_for_transformers/index", "autoapi/intel_extension_for_transformers/optimization/benchmark/index", "autoapi/intel_extension_for_transformers/optimization/config/index", "autoapi/intel_extension_for_transformers/optimization/distillation/index", "autoapi/intel_extension_for_transformers/optimization/dynamic/drop_and_restore_utils/index", "autoapi/intel_extension_for_transformers/optimization/dynamic/evolution/index", "autoapi/intel_extension_for_transformers/optimization/dynamic/index", "autoapi/intel_extension_for_transformers/optimization/index", "autoapi/intel_extension_for_transformers/optimization/mixture/auto_distillation/index", "autoapi/intel_extension_for_transformers/optimization/mixture/index", "autoapi/intel_extension_for_transformers/optimization/model/index", "autoapi/intel_extension_for_transformers/optimization/optimizer/index", "autoapi/intel_extension_for_transformers/optimization/optimizer_tf/index", "autoapi/intel_extension_for_transformers/optimization/pipeline/index", "autoapi/intel_extension_for_transformers/optimization/pruning/index", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/index", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/patterns/index", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/prune_utils/index", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/pruner/index", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/pruning/index", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/scheduler/index", "autoapi/intel_extension_for_transformers/optimization/quantization/index", "autoapi/intel_extension_for_transformers/optimization/trainer/index", "autoapi/intel_extension_for_transformers/optimization/utils/index", "autoapi/intel_extension_for_transformers/optimization/utils/metrics/index", "autoapi/intel_extension_for_transformers/optimization/utils/models/index", "autoapi/intel_extension_for_transformers/optimization/utils/models/modeling_bert_dynamic/index", "autoapi/intel_extension_for_transformers/optimization/utils/models/modeling_roberta_dynamic/index", "autoapi/intel_extension_for_transformers/optimization/utils/objectives/index", "autoapi/intel_extension_for_transformers/optimization/utils/utility/index", "autoapi/intel_extension_for_transformers/optimization/utils/utility_tf/index", "autoapi/intel_extension_for_transformers/preprocessing/data_augmentation/index", "autoapi/intel_extension_for_transformers/preprocessing/index", "autoapi/intel_extension_for_transformers/preprocessing/utils/index", "autoapi/intel_extension_for_transformers/version/index", "autoapi/test_add_cls_token/index", "autoapi/test_attention_output_layer_norm_length_adaptive_keep_indices/index", "autoapi/test_attention_reshape/index", "autoapi/test_conv_reshape/index", "autoapi/test_embeddingbag/index", "autoapi/test_execution_options/index", "autoapi/test_gelu/index", "autoapi/test_graph_dispatch/index", "autoapi/test_insert_input_output_data/index", "autoapi/test_is_supported_onnx_graph/index", "autoapi/test_last_layer_shape/index", "autoapi/test_layer_norm_with_reduce_mean/index", "autoapi/test_main/index", "autoapi/test_matmul_with_bias_relu/index", "autoapi/test_matmul_with_bias_sigmoid/index", "autoapi/test_matmul_with_bias_tanh/index", "autoapi/test_merged_embeddingbag/index", "autoapi/test_model/index", "autoapi/test_onnx_utils/index", "autoapi/test_ops/index", "autoapi/test_padding_sequence/index", "autoapi/test_pattern_dispatch/index", "autoapi/test_position_embeddings/index", "autoapi/test_qkv_merge/index", "autoapi/test_qkv_reshape/index", "autoapi/test_quant_onnx_execute/index", "autoapi/test_reshape_after_restore_hidden_states/index", "autoapi/test_reshape_before_and_after_attention_out_layer_norm_gather_elements/index", "autoapi/test_reshape_before_restore_hidden_states/index", "autoapi/test_start_end_logits/index", "autoapi/test_tf_utils/index", "autoapi/test_token_type_embeddings/index", "autoapi/test_transpose/index", "autoapi/test_transpose_batch_matmul/index", "docs/AutoDistillation design", "docs/SECURITY", "docs/Welcome", "docs/api_doc/api", "docs/api_doc/optimization/benchmark", "docs/benchmark", "docs/build_docs/source/feature", "docs/build_docs/source/index", "docs/build_docs/source/kernel", "docs/build_docs/source/neural_engine", "docs/build_docs/source/xtransformers", "docs/data_augmentation", "docs/distillation", "docs/examples", "docs/export", "docs/intel_extension_for_transformers/backends/neural_engine/docs/Deploy and Integration", "docs/intel_extension_for_transformers/backends/neural_engine/docs/Installation", "docs/intel_extension_for_transformers/backends/neural_engine/docs/add_customized_pattern", "docs/intel_extension_for_transformers/backends/neural_engine/docs/engine_profiling", "docs/intel_extension_for_transformers/backends/neural_engine/docs/engine_tuning", "docs/intel_extension_for_transformers/backends/neural_engine/docs/graph_fusion", "docs/intel_extension_for_transformers/backends/neural_engine/docs/onnx_compile", "docs/intel_extension_for_transformers/backends/neural_engine/docs/onnx_quantize", "docs/intel_extension_for_transformers/backends/neural_engine/docs/operator_register", "docs/intel_extension_for_transformers/backends/neural_engine/docs/pattern_recognize", "docs/intel_extension_for_transformers/backends/neural_engine/docs/validated_model", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/README", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/3D_inference", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/binaryop_injector", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/eltwise_injector", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/kernel_amx", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/kernel_avx512f", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/kernel_transpose_matmul", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/kernel_vnni", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/profiling", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/validated_data", "docs/intel_extension_for_transformers/backends/neural_engine/test/kernels/benchmark/benchmark", "docs/intel_extension_for_transformers/backends/neural_engine/test/kernels/benchmark/ci/inputs/README", "docs/metrics", "docs/objectives", "docs/pipeline", "docs/pruning", "docs/quantization", "feature", "index", "kernel", "neural_engine", "xtransformers"], "filenames": ["autoapi/intel_extension_for_transformers/backends/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/compile/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/extractors/extractor/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/extractors/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/extractors/onnx_extractor/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/extractors/tf_extractor/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/graph/graph/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/graph/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/graph_utils/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/loaders/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/loaders/loader/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/logger/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/onnx_utils/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/all/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/assert/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/batch_matmul/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/batch_matmul_v2/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/bias_add/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/cast/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/concat/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/conv/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/empty_ops/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/expand_dims/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/fused_batch_matmul_v2/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/fused_batch_norm_v3/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/fused_gemm/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/fused_matmul/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/gather/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/gather_elements/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/gelu/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/gemm/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/iterator_get_next/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/iterator_v2/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/layer_normalization/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/map_and_batch_dataset/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/matmul/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/mean/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/mkl_layer_norm/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/model_dataset/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/one_hot/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/onnx_input/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/op/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/optimize_dataset/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/pack/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/placeholder/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/quantize_linear/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/quantize_v2/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/quantized_fused_matmul_and_dequantize/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/quantized_matmul_with_bias_and_dequantize/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/reduce_mean/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/reduce_sum/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/reshape/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/scatter_elements/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/softmax/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/split/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/squeeze/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/strided_slice/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/tensor/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/top_k/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/transpose/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/unpack/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/ops/unsqueeze/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/add_cls_token/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/add_embeddings/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/attention_mask_length_adaptive_keep_indices/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/attention_output_layer_norm_length_adaptive_keep_indices/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/attention_reshape/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/collect_quant_info/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/conv_reshape/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/embeddingbag/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/gelu/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/generate_sequence/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/input_data/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/input_file/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/insert_bf16_node/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/insert_quant_node/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/interact_features/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/last_layer_shape/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/layer_norm/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/layer_norm_with_reduce_mean/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias_add/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias_gelu/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias_relu/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias_sigmoid/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/matmul_with_bias_tanh/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/merged_embeddingbag/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/output_data/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/padding_sequence/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/pattern/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/position_embeddings/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/position_embeddings_v1/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/qkv_merge/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/qkv_reshape/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/quantize_fusion/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/reshape_after_restore_hidden_states/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/reshape_before_and_after_attention_out_layer_norm_gather_elements/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/reshape_before_restore_hidden_states/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/reshape_fusion/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/restore_hidden_states_in_length_adaptive_update_indices/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/start_end_logits/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/subgraph_matcher/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/token_type_embeddings/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/token_type_embeddings_v1/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/transpose_batch_matmul/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/sub_graph/word_embeddings/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/compile/tf_utils/index.rst", "autoapi/intel_extension_for_transformers/backends/neural_engine/index.rst", "autoapi/intel_extension_for_transformers/index.rst", "autoapi/intel_extension_for_transformers/optimization/benchmark/index.rst", "autoapi/intel_extension_for_transformers/optimization/config/index.rst", "autoapi/intel_extension_for_transformers/optimization/distillation/index.rst", "autoapi/intel_extension_for_transformers/optimization/dynamic/drop_and_restore_utils/index.rst", "autoapi/intel_extension_for_transformers/optimization/dynamic/evolution/index.rst", "autoapi/intel_extension_for_transformers/optimization/dynamic/index.rst", "autoapi/intel_extension_for_transformers/optimization/index.rst", "autoapi/intel_extension_for_transformers/optimization/mixture/auto_distillation/index.rst", "autoapi/intel_extension_for_transformers/optimization/mixture/index.rst", "autoapi/intel_extension_for_transformers/optimization/model/index.rst", "autoapi/intel_extension_for_transformers/optimization/optimizer/index.rst", "autoapi/intel_extension_for_transformers/optimization/optimizer_tf/index.rst", "autoapi/intel_extension_for_transformers/optimization/pipeline/index.rst", "autoapi/intel_extension_for_transformers/optimization/pruning/index.rst", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/index.rst", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/patterns/index.rst", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/prune_utils/index.rst", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/pruner/index.rst", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/pruning/index.rst", "autoapi/intel_extension_for_transformers/optimization/pytorch_pruner/scheduler/index.rst", "autoapi/intel_extension_for_transformers/optimization/quantization/index.rst", "autoapi/intel_extension_for_transformers/optimization/trainer/index.rst", "autoapi/intel_extension_for_transformers/optimization/utils/index.rst", "autoapi/intel_extension_for_transformers/optimization/utils/metrics/index.rst", "autoapi/intel_extension_for_transformers/optimization/utils/models/index.rst", "autoapi/intel_extension_for_transformers/optimization/utils/models/modeling_bert_dynamic/index.rst", "autoapi/intel_extension_for_transformers/optimization/utils/models/modeling_roberta_dynamic/index.rst", "autoapi/intel_extension_for_transformers/optimization/utils/objectives/index.rst", "autoapi/intel_extension_for_transformers/optimization/utils/utility/index.rst", "autoapi/intel_extension_for_transformers/optimization/utils/utility_tf/index.rst", "autoapi/intel_extension_for_transformers/preprocessing/data_augmentation/index.rst", "autoapi/intel_extension_for_transformers/preprocessing/index.rst", "autoapi/intel_extension_for_transformers/preprocessing/utils/index.rst", "autoapi/intel_extension_for_transformers/version/index.rst", "autoapi/test_add_cls_token/index.rst", "autoapi/test_attention_output_layer_norm_length_adaptive_keep_indices/index.rst", "autoapi/test_attention_reshape/index.rst", "autoapi/test_conv_reshape/index.rst", "autoapi/test_embeddingbag/index.rst", "autoapi/test_execution_options/index.rst", "autoapi/test_gelu/index.rst", "autoapi/test_graph_dispatch/index.rst", "autoapi/test_insert_input_output_data/index.rst", "autoapi/test_is_supported_onnx_graph/index.rst", "autoapi/test_last_layer_shape/index.rst", "autoapi/test_layer_norm_with_reduce_mean/index.rst", "autoapi/test_main/index.rst", "autoapi/test_matmul_with_bias_relu/index.rst", "autoapi/test_matmul_with_bias_sigmoid/index.rst", "autoapi/test_matmul_with_bias_tanh/index.rst", "autoapi/test_merged_embeddingbag/index.rst", "autoapi/test_model/index.rst", "autoapi/test_onnx_utils/index.rst", "autoapi/test_ops/index.rst", "autoapi/test_padding_sequence/index.rst", "autoapi/test_pattern_dispatch/index.rst", "autoapi/test_position_embeddings/index.rst", "autoapi/test_qkv_merge/index.rst", "autoapi/test_qkv_reshape/index.rst", "autoapi/test_quant_onnx_execute/index.rst", "autoapi/test_reshape_after_restore_hidden_states/index.rst", "autoapi/test_reshape_before_and_after_attention_out_layer_norm_gather_elements/index.rst", "autoapi/test_reshape_before_restore_hidden_states/index.rst", "autoapi/test_start_end_logits/index.rst", "autoapi/test_tf_utils/index.rst", "autoapi/test_token_type_embeddings/index.rst", "autoapi/test_transpose/index.rst", "autoapi/test_transpose_batch_matmul/index.rst", "docs/AutoDistillation design.md", "docs/SECURITY.md", "docs/Welcome.md", "docs/api_doc/api.rst", "docs/api_doc/optimization/benchmark.rst", "docs/benchmark.md", "docs/build_docs/source/feature.rst", "docs/build_docs/source/index.rst", "docs/build_docs/source/kernel.rst", "docs/build_docs/source/neural_engine.rst", "docs/build_docs/source/xtransformers.rst", "docs/data_augmentation.md", "docs/distillation.md", "docs/examples.md", "docs/export.md", "docs/intel_extension_for_transformers/backends/neural_engine/docs/Deploy and Integration.md", "docs/intel_extension_for_transformers/backends/neural_engine/docs/Installation.md", "docs/intel_extension_for_transformers/backends/neural_engine/docs/add_customized_pattern.md", "docs/intel_extension_for_transformers/backends/neural_engine/docs/engine_profiling.md", "docs/intel_extension_for_transformers/backends/neural_engine/docs/engine_tuning.md", "docs/intel_extension_for_transformers/backends/neural_engine/docs/graph_fusion.md", "docs/intel_extension_for_transformers/backends/neural_engine/docs/onnx_compile.md", "docs/intel_extension_for_transformers/backends/neural_engine/docs/onnx_quantize.md", "docs/intel_extension_for_transformers/backends/neural_engine/docs/operator_register.md", "docs/intel_extension_for_transformers/backends/neural_engine/docs/pattern_recognize.md", "docs/intel_extension_for_transformers/backends/neural_engine/docs/validated_model.md", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/README.md", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/3D_inference.md", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/binaryop_injector.md", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/eltwise_injector.md", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/kernel_amx.md", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/kernel_avx512f.md", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/kernel_transpose_matmul.md", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/kernel_desc/kernel_vnni.md", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/profiling.md", "docs/intel_extension_for_transformers/backends/neural_engine/kernels/docs/validated_data.md", "docs/intel_extension_for_transformers/backends/neural_engine/test/kernels/benchmark/benchmark.md", "docs/intel_extension_for_transformers/backends/neural_engine/test/kernels/benchmark/ci/inputs/README.md", "docs/metrics.md", "docs/objectives.md", "docs/pipeline.md", "docs/pruning.md", "docs/quantization.md", "feature.rst", "index.rst", "kernel.rst", "neural_engine.rst", "xtransformers.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.compile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.extractors.extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.extractors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.extractors.onnx_extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.extractors.tf_extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.graph_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.loaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.loaders.loader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.all</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.assert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.cast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_matmul_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.mean</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.mkl_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.pack</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_fused_matmul_and_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_cls_token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_mask_length_adaptive_keep_indices</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_output_layer_norm_length_adaptive_keep_indices</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.collect_quant_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.conv_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.embeddingbag</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.generate_sequence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_file</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_bf16_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_quant_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.interact_features</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.last_layer_shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm_with_reduce_mean</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_sigmoid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_tanh</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.merged_embeddingbag</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.output_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.padding_sequence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings_v1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.quantize_fusion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_after_restore_hidden_states</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_and_after_attention_out_layer_norm_gather_elements</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_restore_hidden_states</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_fusion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.restore_hidden_states_in_length_adaptive_update_indices</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.start_end_logits</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.subgraph_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings_v1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.transpose_batch_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.word_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine.compile.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.backends.neural_engine</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.dynamic.drop_and_restore_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.dynamic.evolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.dynamic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.mixture.auto_distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.mixture</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.optimizer_tf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.trainer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.utils.metrics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.utils.models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.utils.objectives</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.optimization.utils.utility_tf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.preprocessing.data_augmentation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.preprocessing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.preprocessing.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intel_extension_for_transformers.version</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_add_cls_token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_attention_output_layer_norm_length_adaptive_keep_indices</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_attention_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_conv_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_embeddingbag</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_execution_options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_graph_dispatch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_insert_input_output_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_is_supported_onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_last_layer_shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_layer_norm_with_reduce_mean</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_main</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_matmul_with_bias_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_matmul_with_bias_sigmoid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_matmul_with_bias_tanh</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_merged_embeddingbag</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_padding_sequence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_pattern_dispatch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_position_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_qkv_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_qkv_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_quant_onnx_execute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_reshape_after_restore_hidden_states</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_reshape_before_and_after_attention_out_layer_norm_gather_elements</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_reshape_before_restore_hidden_states</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_start_end_logits</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_token_type_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_transpose_batch_matmul</span></code>", "AutoDistillation Design", "Security Policy", "Intel\u00ae Extension for Transformers: Accelerating Transformer-based Models on Intel Platforms", "APIs", "Optimization", "Benchmark", "Features", "Welcome to Intel\u00ae Extension for Transformers\u2019 documentation!", "Transformers-accelerated Libraries", "Neural Engine", "Intel\u00ae Extension for Transformers", "Data Augmentation", "Distillation", "Examples", "Export to ONNX", "Deploy and Integration", "Installation", "Add Customized Pattern", "Profiling", "Engine Tuning", "Graph Fusion", "Compile an ONNX model to Engine IR", "Quantize a ONNX model to engine low precision/int8 IR", "Customized Operators Register", "Pattern Recognize", "platform configuration", "Transformers-accelerated Libraries", "Memory Layout in SPMM_VNNI", "Introduction", "Introduction", "Design of AMX Kernel", "Design of AVX512F Kernel", "Introduction", "Design of the VNNI Kernel", "Performance and Profiling", "Validation Performance Data", "Benchmark for Kernels", "Inputs format", "Metrics", "Objective", "Pipeline", "Pruning", "Quantization", "Features", "Welcome to Intel\u00ae Extension for Transformers\u2019 documentation!", "Transformers-accelerated Libraries", "Neural Engine", "Intel\u00ae Extension for Transformers"], "terms": {"The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 115, 116, 118, 119, 121, 123, 133, 135, 137, 138, 139, 141, 145, 180, 182, 183, 185, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 216, 218, 220, 221, 222], "neural": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 74, 104, 109, 118, 121, 123, 145, 180, 187, 192, 197, 198, 199, 200, 201, 211, 219, 222, 224], "engin": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 74, 104, 109, 118, 119, 133, 145, 180, 187, 197, 198, 200, 203, 208, 224], "start_pipelin": 1, "model": [1, 4, 5, 6, 7, 8, 9, 10, 11, 13, 32, 42, 43, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 116, 118, 119, 122, 123, 124, 128, 133, 141, 180, 185, 191, 192, 193, 196, 197, 199, 200, 204, 205, 208, 212, 215, 218, 219, 221, 222, 226, 227], "config": [1, 6, 7, 8, 9, 32, 43, 59, 115, 118, 119, 122, 123, 124, 125, 127, 128, 129, 131, 133, 137, 138, 182, 185, 191, 192, 193, 195, 198, 200, 203, 208, 216, 220, 221], "none": [1, 6, 7, 9, 13, 59, 113, 115, 116, 118, 119, 122, 123, 124, 125, 133, 135, 137, 138, 139, 140, 141, 180, 191, 192, 193, 194, 198, 218, 219, 221, 222], "pipelin": [1, 118, 119, 182], "interfac": [1, 9, 137, 138, 182, 194, 196, 206], "firstli": [1, 9], "us": [1, 8, 9, 13, 32, 43, 74, 92, 109, 113, 115, 118, 119, 121, 122, 123, 133, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 191, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222], "loader": [1, 9, 110, 199, 201, 204], "get": [1, 6, 7, 8, 9, 12, 13, 32, 43, 59, 109, 113, 115, 116, 118, 122, 123, 127, 129, 131, 139, 141, 194, 197, 199, 200, 201, 203, 204, 208, 212, 213, 217, 220], "comput": [1, 8, 9, 133, 137, 138, 182, 204, 206, 207, 208, 209, 212, 220, 222], "graph": [1, 2, 3, 4, 5, 8, 9, 10, 13, 32, 43, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 192, 197, 201, 204, 211, 212, 213], "correspond": [1, 8, 9, 180, 197, 200, 204, 206, 213, 222], "framework": [1, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 113, 118, 119, 124, 133, 140, 141, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 192, 193, 195, 197, 201, 206, 220, 221, 222], "contain": [1, 8, 9, 13, 109, 133, 137, 138, 180, 182, 191, 192, 195, 197, 199, 200, 204, 206, 208, 216, 217, 221, 222], "node": [1, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 109, 141, 194, 204, 205, 215], "edg": [1, 9], "i": [1, 4, 5, 8, 9, 13, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 118, 119, 123, 133, 137, 138, 141, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222], "op": [1, 4, 5, 8, 9, 13, 109, 110, 198, 203, 204, 208, 209, 216, 217, 222], "tensor": [1, 4, 5, 6, 7, 8, 9, 13, 32, 43, 109, 110, 133, 137, 138, 195, 197, 198, 200, 201, 203, 212, 216, 221, 222], "Then": [1, 8, 9, 192, 200, 201, 213, 216, 221, 222], "extract": [1, 2, 3, 9, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 197, 199, 201], "pack": [1, 9, 32, 110, 213], "them": [1, 8, 9, 195, 197, 200, 208, 210, 213, 222], "our": [1, 9, 185, 191, 194, 204, 208, 210, 212, 213, 220], "form": [1, 8, 9, 133, 192, 198, 204, 207, 211, 216], "next": [1, 6, 7, 9, 118, 119, 137, 138, 180, 200, 201, 208, 211, 212, 213], "exploit": [1, 9, 204], "abov": [1, 8, 9, 137, 138, 196, 197, 199, 200, 204, 210, 212], "consist": [1, 9], "sub": [1, 8, 9, 22, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 197, 199, 200, 208, 212], "which": [1, 4, 5, 8, 9, 115, 118, 119, 121, 133, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 191, 192, 195, 196, 197, 199, 200, 204, 207, 208, 209, 210, 211, 213, 218, 221, 222], "can": [1, 8, 9, 118, 121, 133, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 191, 192, 194, 195, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 216, 219, 220, 221, 222], "see": [1, 8, 9, 137, 138, 181, 197, 198, 199, 200, 201, 204, 205, 207, 211, 214, 215, 216], "new": [1, 4, 5, 8, 9, 13, 109, 114, 118, 133, 144, 204, 208, 209, 217], "big": [1, 9, 199, 200], "like": [1, 4, 5, 8, 9, 109, 182, 191, 192, 195, 197, 198, 199, 200, 201, 204, 208, 209, 210, 214, 218, 219, 221, 222], "layernorm": [1, 8, 9, 22, 35, 81, 197, 200, 204, 216], "There": [1, 9, 192, 195, 197, 198, 214, 216, 219, 221], "mai": [1, 8, 9, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 199, 204, 210, 211, 212, 213, 216, 222], "have": [1, 8, 9, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 195, 197, 198, 199, 200, 201, 204, 209, 212, 216, 218, 219, 220, 221, 222], "differ": [1, 6, 7, 9, 10, 11, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 115, 180, 182, 191, 192, 195, 197, 199, 200, 201, 204, 206, 207, 213, 218, 219, 221, 222], "flow": [1, 8, 9, 197, 200], "one": [1, 8, 9, 137, 180, 182, 192, 196, 197, 198, 199, 200, 204, 208, 210, 216, 220], "subgraph": [1, 8, 9, 104, 199, 201], "final": [1, 9, 199, 200, 201, 203, 204, 218], "convert": [1, 8, 9, 13, 118, 119, 194, 202, 216, 222], "yaml": [1, 6, 7, 8, 9, 133, 198, 199, 201], "file": [1, 2, 4, 5, 6, 7, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 92, 104, 116, 118, 119, 121, 133, 145, 191, 195, 197, 198, 199, 201, 203, 208, 209, 216, 217], "bin": [1, 6, 7, 9, 195, 198, 199, 201, 214], "configur": [1, 9, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 113, 115, 118, 121, 125, 133, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 191, 193, 194, 199, 207, 208, 211], "infer": [1, 6, 7, 9, 10, 11, 112, 118, 123, 133, 138, 182, 185, 193, 196, 197, 198, 199, 200, 201, 210, 219, 222], "base": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 116, 118, 119, 121, 124, 125, 129, 132, 133, 135, 137, 138, 139, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 191, 194, 201, 202, 203, 205, 211, 212, 214, 215, 220, 227], "object": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 32, 43, 59, 74, 92, 104, 109, 113, 116, 118, 119, 122, 123, 133, 134, 135, 141, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 185, 192, 197, 203, 221], "A": [2, 3, 8, 115, 124, 133, 137, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 195, 197, 204, 205, 207, 210, 213, 215, 216], "super": [2, 3, 197, 199], "an": [2, 3, 13, 109, 119, 133, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 185, 191, 193, 194, 195, 197, 198, 199, 200, 203, 204, 206, 207, 208, 209, 213, 217, 218, 220, 226], "oper": [2, 3, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 109, 182, 193, 195, 196, 197, 199, 201, 206, 208, 209, 211, 212, 213, 216, 222], "do": [2, 3, 116, 118, 122, 123, 133, 194, 195, 197, 199, 200, 204, 208, 221, 222], "addit": [2, 3, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 193, 198, 217], "attribut": [2, 3, 4, 5, 8, 43, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 198, 200, 203, 209], "without": [2, 3, 122, 133, 192, 195, 197, 213, 214, 216], "modifi": [2, 3, 6, 7, 8, 138, 195, 198, 201], "topologi": [2, 3], "modul": [3, 7, 9, 10, 32, 74, 180, 201, 202], "onnx_extractor": [3, 9, 110], "tf_extractor": [3, 9, 110], "onnx": [4, 13, 133, 182, 185, 197, 198, 199, 212, 220, 226], "onnxextractor": 4, "decor": [4, 5, 13, 32, 43, 74, 92, 109], "graph_def": [4, 5, 109], "ha": [4, 5, 8, 180, 191, 197, 199, 200, 202, 203, 204, 207, 209, 216, 222], "input_tensor": [4, 5, 8, 13, 32, 43, 109, 138, 197, 200], "output_tensor": [4, 5, 8, 13, 32, 43, 109, 197, 200], "record": [4, 5, 180, 198, 199], "sourc": [4, 5, 8, 13, 109, 195, 208, 212, 216], "dest": [4, 5, 8, 13, 109], "name": [4, 5, 6, 7, 8, 13, 32, 43, 59, 74, 92, 109, 113, 118, 121, 123, 125, 127, 129, 131, 135, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 191, 192, 193, 195, 197, 198, 199, 200, 202, 204, 205, 209, 215, 218, 219, 220, 221, 222], "all": [4, 5, 6, 7, 8, 9, 32, 43, 74, 92, 110, 119, 133, 137, 138, 141, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 192, 195, 196, 197, 198, 200, 204, 205, 208, 209, 210, 215, 218, 221, 222], "list": [4, 5, 6, 7, 8, 13, 109, 113, 118, 122, 125, 133, 137, 138, 192, 195, 196, 197, 200, 208, 209, 217, 222], "compos": [4, 5, 118, 119, 133, 180, 197, 201], "return": [4, 5, 8, 13, 32, 43, 74, 92, 109, 115, 118, 119, 121, 123, 124, 133, 137, 138, 180, 191, 197, 200, 204, 208, 209, 218], "paramet": [4, 5, 8, 13, 32, 43, 74, 92, 109, 115, 118, 119, 121, 123, 125, 133, 137, 138, 141, 180, 192, 198, 204, 218, 221], "onnxmodel": [4, 13], "type": [4, 5, 8, 13, 32, 43, 74, 92, 109, 115, 118, 121, 123, 124, 133, 137, 141, 180, 185, 191, 192, 193, 194, 195, 198, 199, 201, 204, 208, 209, 216, 218, 219, 222], "tensorflow": [5, 14, 15, 16, 17, 18, 19, 23, 25, 30, 33, 34, 36, 37, 38, 40, 41, 44, 45, 46, 48, 50, 51, 53, 57, 58, 62, 109, 113, 118, 119, 123, 141, 182, 195, 204, 222], "tensorflowextractor": 5, "tensorflowmodel": [5, 109], "defint": [6, 7], "properti": [6, 7, 32, 43, 59, 113, 118, 119, 122, 123, 133], "execution_opt": [6, 7, 199], "option": [6, 7, 8, 118, 121, 133, 137, 138, 180, 198, 204, 208, 213, 216], "execut": [6, 7, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 199, 203, 206, 208, 209, 214, 216, 222], "weight_data": [6, 7], "weight_byt": [6, 7], "net_config": [6, 7], "network": [6, 7, 129, 180, 192, 195, 197, 198, 200, 211, 221, 222], "dict": [6, 7, 8, 13, 59, 109, 113, 118, 119, 124, 125, 133, 137, 138, 191, 195, 197, 221], "insert_nod": [6, 7], "index": [6, 7, 137, 138, 141, 200, 203, 204], "insert": [6, 7, 8, 201, 203, 204, 208, 209, 222], "ir": [6, 7, 195, 197, 198, 199, 214, 226], "remove_nod": [6, 7], "node_nam": [6, 7, 8, 13, 109, 197, 200], "remov": [6, 7, 138, 209, 221], "from": [6, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 109, 114, 116, 118, 119, 121, 133, 137, 138, 144, 180, 185, 191, 192, 193, 195, 197, 198, 199, 200, 201, 203, 204, 208, 209, 211, 212, 213, 218, 219, 220, 221, 222], "get_node_id": [6, 7, 197], "id": [6, 7, 8, 118, 121, 138, 141, 209], "accord": [6, 7, 197, 199, 213], "get_node_by_nam": [6, 7], "rename_nod": [6, 7], "old_nam": [6, 7], "new_nam": [6, 7], "change_node_input_tensor": [6, 7], "mode": [6, 7, 118, 125, 132, 180, 198, 202, 216, 217, 222], "input": [6, 7, 8, 13, 22, 109, 113, 118, 123, 133, 137, 138, 180, 182, 185, 191, 192, 194, 195, 198, 199, 200, 203, 211, 212, 213, 216, 220], "change_node_output_tensor": [6, 7], "output": [6, 7, 8, 13, 22, 32, 43, 109, 113, 118, 123, 133, 137, 138, 180, 191, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 211, 212, 213, 216, 220], "get_pre_node_nam": [6, 7], "previou": [6, 7, 118, 119, 133, 195], "get_next_node_nam": [6, 7], "get_tensor_idx": [6, 7], "tensor_nam": [6, 7, 13, 109], "from_output": [6, 7], "true": [6, 7, 113, 118, 133, 135, 137, 138, 139, 180, 182, 185, 194, 196, 197, 198, 199, 208, 209, 212, 214, 216, 218, 219, 222], "modify_node_connect": [6, 7], "order": [6, 7, 8, 118, 119, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 191, 197, 198, 204, 207, 213], "dump_tensor": [6, 7], "tensor_list": [6, 7], "dump": [6, 7, 118, 119, 222], "engine_init": [6, 7], "net_info": [6, 7], "b": [6, 7, 8, 13, 137, 197, 204, 207, 210, 211, 213, 216], "pybind": [6, 7], "executor": [6, 7, 112, 185, 195, 197, 198], "input_data": [6, 7, 8, 9, 74, 110, 195], "api": [6, 7, 182, 185, 195, 199, 200, 201, 203, 204, 208, 209, 220, 224], "graph_init": [6, 7, 195, 199], "initi": [6, 7, 8, 13, 32, 43, 113, 118, 133, 137, 138, 180, 208, 209, 220, 221], "exampl": [6, 7, 8, 137, 138, 182, 191, 192, 195, 197, 199, 200, 202, 203, 204, 206, 208, 218, 221, 222, 224], "import": [6, 7, 8, 124, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 185, 191, 192, 195, 197, 199, 201, 204, 208, 209, 218, 219, 220, 221, 222], "newgraph": [6, 7], "conf": [6, 7, 113, 118, 125, 195, 198, 199, 203], "out": [6, 7, 8, 133, 195, 197, 200, 206, 212, 222], "input_0": [6, 7, 195, 199], "input_1": [6, 7, 195, 199], "input_2": [6, 7, 195, 199], "save": [6, 7, 116, 133, 191, 195, 197, 198, 201, 210, 212, 213, 222], "output_dir": [6, 7, 113, 118, 122, 133, 180, 191, 201, 202], "ymal": [6, 7], "graph_dispatch": [6, 7, 199], "tune": [6, 7, 133, 182, 191, 192, 218, 219, 221], "inputs_shap": [6, 7, 199], "dispatch": [6, 7], "get_sparse_nodes_nam": [6, 7], "threshold": [6, 7], "0": [6, 7, 8, 109, 113, 116, 118, 119, 125, 135, 137, 138, 140, 141, 180, 182, 185, 191, 192, 195, 197, 198, 199, 200, 202, 203, 204, 205, 209, 210, 211, 213, 214, 215, 216, 218, 220, 221, 222], "7": [6, 7, 8, 180, 182, 193, 196, 197, 200, 202, 204, 205, 210, 215, 216, 218, 222], "sparsiti": [6, 7, 113, 118, 182, 205, 215, 216, 221], "spars": [6, 7, 182, 199, 206, 207, 210, 213, 216], "transpose_mode_int8": [6, 7], "node_name_list": [6, 7], "transpos": [6, 7, 9, 32, 110, 138, 198, 199, 207, 210, 212, 213, 216], "innerproduct": [6, 7, 22, 198, 199], "reorder": [6, 7, 22], "util": [8, 13, 109, 113, 115, 118, 191, 197, 204, 207, 213, 216], "names_from_input": 8, "static": [8, 139, 185, 198, 201, 208, 210, 220], "method": [8, 116, 118, 125, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 191, 193, 208, 210, 214, 221, 222], "valid": [8, 118, 123, 133, 191, 192, 204, 225], "string": [8, 13, 109, 116, 141, 191, 192, 197, 199, 200, 203, 209, 218, 219, 221, 222], "defin": [8, 114, 118, 144, 180, 192, 195, 197, 203, 204, 213, 217, 218, 221, 222], "field": [8, 191, 208, 209, 222], "": [8, 13, 109, 133, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 192, 195, 197, 198, 200, 201, 203, 205, 215, 217, 220, 222], "tupl": [8, 115, 124, 137, 138], "In": [8, 118, 119, 133, 137, 180, 195, 197, 198, 199, 200, 201, 204, 207, 208, 209, 210, 211, 212, 213, 218, 219, 222], "nodedef": [8, 109], "end": [8, 137, 138, 198, 201, 203, 204, 209, 214], "If": [8, 115, 133, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 192, 194, 195, 197, 198, 199, 200, 201, 204, 208, 216, 218, 221, 222], "also": [8, 195, 197, 198, 200, 201, 203, 204, 207, 208, 209, 213, 214, 219, 222], "get_data_dtyp": 8, "data": [8, 59, 119, 180, 193, 195, 197, 199, 201, 202, 203, 207, 208, 209, 213, 216, 222, 225], "const": [8, 13, 109, 182, 203, 206, 208, 209, 210], "dtype": [8, 13, 59, 109, 133, 194, 195, 198, 199, 203], "numpi": [8, 13, 195], "valu": [8, 13, 109, 119, 122, 133, 137, 138, 191, 192, 195, 197, 198, 199, 200, 208, 209, 210, 212, 216, 218, 219, 221, 222], "dtypes_dict": 8, "quant_info_init": 8, "quant": [8, 222], "info": [8, 12, 13, 109, 180, 195, 197, 214], "insert_quant_info": 8, "kei": [8, 13, 109, 133, 137, 138, 182, 198, 199, 200, 208, 209, 210], "get_quant_info": 8, "search_straight_pattern": [8, 204], "input_pattern": [8, 204], "search": [8, 113, 116, 118, 119, 133, 180, 182, 193, 200], "user": [8, 137, 138, 180, 185, 194, 197, 198, 200, 202, 212, 214, 216, 219, 220], "specifi": [8, 115, 118, 123, 125, 132, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 200, 201, 209, 212, 216, 221, 222], "pattern": [8, 9, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 182, 201, 207, 221], "intern": [8, 200], "grpah": [8, 13, 109], "structur": [8, 193, 195, 197, 199, 211, 221], "attent": [8, 137, 138, 180, 198, 204, 212], "chain": [8, 208, 209], "call": [8, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 194, 197, 199, 200, 207, 208, 209, 213, 222], "must": [8, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 200, 204, 207, 208, 213], "straight": 8, "sequenc": [8, 115, 137, 138, 182, 197, 200, 204, 211], "It": [8, 118, 119, 121, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 192, 197, 198, 199, 200, 203, 204, 211, 212, 216], "mean": [8, 9, 32, 110, 137, 138, 191, 195, 197, 198, 199, 200, 204, 207, 208, 213, 216, 218, 221, 222], "ani": [8, 118, 121, 133, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 204, 220], "otherwis": [8, 197, 199, 216], "thi": [8, 114, 118, 133, 137, 138, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 191, 192, 194, 195, 197, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 216, 218, 220, 222], "op_typ": [8, 13, 32, 43, 109, 197, 199, 200, 209], "element": [8, 133, 197, 204, 209, 211, 212, 213, 216], "could": [8, 195, 197, 198, 200, 201, 204, 210, 221, 222], "mandatori": 8, "ar": [8, 115, 116, 119, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 192, 195, 196, 197, 198, 199, 200, 201, 204, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 221, 222], "while": [8, 195, 200, 204, 216, 222], "stand": [8, 197], "For": [8, 13, 180, 181, 185, 197, 199, 200, 204, 205, 206, 208, 210, 212, 213, 214, 215, 220], "mybe": 8, "mul": [8, 22, 197, 200, 204, 208], "add": [8, 22, 116, 192, 195, 198, 199, 200, 204, 208, 209, 216, 217], "addv2": [8, 22, 204], "equal": [8, 22, 133, 200, 207, 208], "below": [8, 180, 191, 192, 195, 197, 199, 201, 204, 207, 211, 212, 213, 219], "gener": [8, 114, 118, 138, 144, 182, 185, 192, 197, 200, 204, 208, 209, 211, 214, 216, 218, 219, 222], "extractor": [8, 9, 110, 199, 201, 204], "length": [8, 113, 115, 118, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 200, 204, 208, 222], "match": [8, 180, 192, 199, 200, 204, 211, 212], "result": [8, 118, 119, 123, 133, 180, 182, 185, 193, 197, 199, 200, 205, 208, 209, 212, 213, 215, 221, 222], "24": [8, 180, 204, 205, 210, 215], "layer": [8, 115, 128, 137, 138, 180, 198, 204, 208, 211, 212, 221], "each": [8, 118, 119, 133, 137, 138, 180, 191, 198, 199, 200, 207, 211, 212, 213, 216, 217, 221], "still": [8, 204, 222], "last": [8, 133, 137, 138, 200, 204, 207, 211, 212, 222], "former": [8, 204], "mayb": [8, 199, 213], "search_pattern": [8, 204], "pattern_list": 8, "complet": [8, 197, 205, 215], "represent": [8, 182, 197, 200, 201], "its": [8, 118, 119, 133, 180, 192, 197, 200, 201, 204, 211, 213, 216], "op_idx": 8, "howev": [8, 199, 200, 204, 207, 210, 213], "due": [8, 137, 200, 204, 207, 222], "few": [8, 211], "complic": [8, 197, 204], "thei": [8, 118, 121, 192, 196, 204, 207, 208, 209, 210, 212, 216], "therefor": [8, 182, 194, 207, 211, 212, 213, 222], "fist": 8, "repres": [8, 198, 200, 204, 206, 207, 209, 222], "main": [8, 119, 133, 138, 200, 206, 216], "top": [8, 182, 191, 211], "down": 8, "head": [8, 137, 138, 204, 209, 212], "tail": [8, 204, 214], "left": [8, 137, 138, 210, 212, 213], "e": [8, 118, 119, 133, 180, 192, 193, 199, 208, 209, 212, 216], "g": [8, 118, 119, 133, 180, 192, 208, 209], "bert_large_squad": 8, "pb": [8, 182], "1": [8, 113, 118, 125, 137, 138, 140, 180, 182, 185, 191, 192, 193, 194, 196, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 218, 220, 221, 222], "squareddiffer": [8, 22, 204], "2": [8, 113, 115, 118, 137, 180, 182, 185, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 204, 205, 210, 211, 213, 214, 215, 216, 218, 220], "3": [8, 180, 182, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 213, 215, 216, 217, 218], "4": [8, 113, 118, 125, 137, 138, 180, 182, 191, 192, 193, 197, 198, 199, 200, 203, 204, 205, 210, 211, 213, 214, 221], "rsqrt": [8, 22, 204], "5": [8, 113, 118, 180, 191, 192, 197, 198, 200, 203, 204, 205, 210, 215, 216], "8": [8, 180, 182, 193, 194, 197, 198, 200, 202, 204, 205, 209, 210, 213, 214, 215, 216, 222], "9": [8, 180, 182, 191, 197, 204, 205, 210, 215, 216, 221], "6": [8, 180, 192, 193, 196, 197, 200, 204, 205, 209, 210, 214, 215, 222], "same": [8, 138, 192, 194, 195, 197, 198, 200, 201, 204, 207, 213, 216, 217], "func": [8, 180, 199], "follow": [8, 137, 138, 182, 183, 191, 192, 197, 198, 199, 200, 201, 203, 208, 209, 210, 211, 212, 213, 214, 216, 217, 222], "origin": [8, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 185, 191, 192, 197, 201, 212, 222], "frozen": [8, 195, 201], "you": [8, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 191, 192, 194, 195, 197, 199, 200, 201, 204, 208, 209, 210, 214, 216, 218, 220, 221, 222], "had": [8, 197], "better": [8, 118, 119, 123, 133, 180, 197, 198, 199, 207, 212, 218, 219, 222], "identifi": [8, 118, 121], "your": [8, 133, 182, 191, 195, 197, 198, 199, 200, 208, 209, 216, 220], "own": [8, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 200, 201, 208, 219], "casual": 8, "tf": [8, 118, 123, 137, 180], "control": [8, 180, 197], "start": [8, 137, 138, 198, 204, 217], "mostli": [8, 204], "longest": [8, 204], "path": [8, 113, 118, 119, 121, 133, 141, 182, 191, 195, 198, 199, 201, 214, 216], "sometim": [8, 200, 222], "connect": [8, 129, 221], "But": [8, 195, 207, 220], "don": [8, 137, 138, 203, 208], "t": [8, 137, 138, 180, 182, 191, 192, 203, 206, 207, 208, 212, 213, 216, 221], "need": [8, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 191, 192, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 212, 213, 216, 221, 222], "least": 8, "doesn": [8, 180, 208, 213, 216], "exist": [8, 118, 121, 180, 182, 197, 220], "relationship": 8, "sever": [8, 191, 197, 201, 204, 207, 216, 222], "should": [8, 118, 121, 133, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 195, 197, 199, 200, 203, 204, 207, 208, 209, 216, 217, 218, 219, 222], "split": [8, 9, 32, 110, 182, 191, 199, 207, 210], "representtaion": 8, "two": [8, 192, 197, 199, 200, 202, 203, 208, 209, 210, 212, 213, 219, 220, 221, 222], "idx": [8, 119, 209], "some": [8, 138, 182, 195, 197, 198, 199, 200, 203, 204, 208, 209, 213, 222], "outsid": [8, 137, 138, 200, 204], "give": [8, 197, 200, 207], "just": [8, 138, 195, 197, 198, 199, 200, 201, 204, 209, 213, 218], "empti": [8, 22, 200, 204, 209, 217], "algorithm": [8, 32, 43, 74, 92, 113, 118, 119, 180, 182, 191, 199, 200, 203, 204, 206, 207, 208, 216, 221, 222], "support": [8, 13, 92, 112, 116, 118, 124, 125, 132, 182, 195, 196, 197, 198, 199, 203, 204, 209, 214, 216, 220, 221], "kind": [8, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 203, 206, 216], "beaus": 8, "make": [8, 32, 43, 195, 196, 197, 206, 207, 208, 209, 211, 212, 214, 216], "sure": [8, 197, 216], "whole": [8, 118, 119, 180, 193, 198, 199, 202, 211, 214], "so": [8, 118, 121, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 192, 196, 197, 199, 200, 203, 204, 206, 208, 210, 211, 213, 214, 218, 219, 221, 222], "check": [8, 13, 133, 185, 197, 199, 200, 204, 209], "symmetr": [8, 204, 222], "consecut": [8, 210, 213], "y": [8, 209], "o": [8, 180, 182, 191, 205, 209, 215], "shape": [8, 22, 59, 137, 138, 180, 195, 198, 199, 203, 207, 212, 216], "df": [8, 204], "duplic": 8, "would": [8, 197, 200, 201, 204, 214], "perform": [8, 113, 118, 119, 133, 137, 138, 139, 180, 182, 185, 192, 194, 195, 198, 199, 202, 205, 207, 210, 211, 212, 213, 216, 218, 219, 221, 222, 225], "befor": [8, 133, 137, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 192, 194, 195, 197, 199, 200, 201, 204, 208, 209, 210, 216, 222], "splice": 8, "de": 8, "total": [8, 115, 137, 180, 191, 200, 204, 213, 214], "c": [8, 195, 196, 197, 199, 204, 205, 211, 215, 216], "d": [8, 180, 191, 192, 207, 212], "f": [8, 192, 203, 214, 222], "c1": 8, "d1": [8, 216], "c2": 8, "d2": 8, "c3": [8, 214], "d3": [8, 214], "step": [8, 133, 196, 197, 198, 200, 201, 202, 203, 204, 208, 212, 216], "now": [8, 185, 195, 196, 197, 199, 200, 201, 208, 209, 216, 220], "set": [8, 32, 43, 115, 133, 137, 138, 141, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 191, 195, 199, 200, 201, 203, 204, 207, 208, 209, 211, 216], "part": [8, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 200, 203, 204, 213], "As": [8, 192, 197, 198, 200, 201, 210, 212, 213], "appli": [8, 182, 193, 208, 209, 212, 213, 221, 222], "everi": [8, 197, 207, 216], "right": [8, 137, 138, 185, 210, 212, 213, 220], "construct_nod": 8, "attr": [8, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 195, 197, 208, 209], "ordereddict": [8, 32, 43, 197], "construct": [8, 32, 43, 137, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 208, 209], "new_nod": 8, "insert_pattern": 8, "target_node_nam": 8, "replac": [8, 138, 182, 192, 197, 200, 221, 222], "specif": [8, 118, 119, 121, 180, 182, 192, 197, 199, 200, 206, 207, 211, 216, 218, 219, 220, 222], "ccontain": 8, "insid": [8, 200, 203, 211], "been": [8, 137, 138, 182, 192, 209, 220], "pattern_map": [8, 197, 200], "pattern_nam": 8, "mapping_dict": 8, "map": [8, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 180, 192, 207, 222], "custom": [8, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 118, 123, 133, 180, 182, 198, 200], "mapping_config": 8, "first": [8, 133, 191, 196, 197, 199, 200, 202, 204, 209, 210, 211, 212, 213, 214, 217, 222], "second": [8, 137, 138, 196, 200, 202, 203, 204, 210, 211, 212, 213, 214, 216, 222], "third": [8, 200, 211, 213], "requir": [8, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 200, 202, 204, 205, 207, 210, 216, 222], "old": 8, "reshap": [8, 9, 32, 110, 195, 197, 198, 203], "paddingsequ": [8, 22, 91, 195], "search_mod": [8, 197, 200], "embed": [8, 137, 138, 195, 200, 204, 208], "m": [8, 192, 193, 198, 199, 205, 207, 210, 211, 213, 215, 216], "after": [8, 137, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 194, 196, 198, 199, 200, 201, 203, 204, 206, 207, 209, 213, 217, 222], "fusion": [8, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 203, 204, 208, 209], "more": [8, 181, 182, 185, 192, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 215, 216], "detail": [8, 180, 182, 185, 192, 193, 196, 197, 198, 199, 200, 203, 204, 205, 206, 210, 214, 215, 216, 221, 222], "about": [8, 197, 200, 203, 205, 209, 213, 215], "in_pattern": 8, "input_id": [8, 137, 138, 182, 195], "segment_id": [8, 182, 195], "input_mask": [8, 182, 195], "out_pattern": 8, "int": [8, 113, 118, 125, 197, 208, 209], "th": [8, 200], "berfor": 8, "n": [8, 116, 137, 138, 191, 192, 199, 200, 202, 205, 207, 210, 211, 213, 215, 216], "match_result": 8, "_n": 8, "reshape_0": [8, 200], "where": [8, 22, 137, 138, 180, 192, 200, 206, 207, 209, 211, 212, 213, 216, 217], "go": [8, 185], "happen": [8, 198, 213], "sepcial": 8, "biasadd": [8, 18, 200, 204], "bia": [8, 13, 198], "unfix": 8, "locat": [8, 59, 195, 197, 200, 204, 213, 216], "onli": [8, 113, 118, 137, 138, 185, 195, 199, 200, 201, 203, 206, 208, 209, 212, 213, 216, 218, 220], "other": [8, 118, 121, 182, 191, 195, 197, 198, 199, 200, 204, 205, 213, 215, 216, 222], "write": [8, 191, 197, 204], "note": [8, 182, 193, 195, 197, 198, 199, 200, 202, 203, 204, 208, 209, 212, 213, 216, 222], "That": [8, 213], "too": [8, 197, 207, 208], "decompos": [8, 197], "list2str": [8, 197], "src_perm": 8, "str": [8, 32, 43, 74, 92, 113, 118, 121, 122, 124, 125, 133, 135, 137, 138, 139, 191], "emit": [8, 200], "ret": [8, 204, 214], "str2list": 8, "src_str": 8, "pattern_mapping_conf_valid": 8, "conf_dict": 8, "lazyimport": 8, "module_nam": 8, "lazi": 8, "python": [8, 137, 138, 182, 191, 195, 196, 197, 199, 201, 202], "till": 8, "later": [8, 197, 204], "get_model_fwk_nam": 8, "detect": 8, "belong": [8, 197, 222], "avail": [8, 183, 211], "fwk": 8, "na": [8, 191], "assert": [9, 32, 110, 137, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180], "batch_matmul": [9, 32, 110], "batch_matmul_v2": [9, 32, 110], "bias_add": [9, 13, 32, 110], "cast": [9, 32, 110], "concat": [9, 32, 110, 197], "conv": [9, 32, 110, 198, 199, 209], "empty_op": [9, 32, 110, 197], "expand_dim": [9, 32, 110], "fused_batch_matmul_v2": [9, 32, 110], "fused_batch_norm_v3": [9, 32, 110], "fused_gemm": [9, 32, 110], "fused_matmul": [9, 32, 110], "gather": [9, 32, 110, 133, 138, 197, 208], "gather_el": [9, 32, 110, 197], "gelu": [9, 32, 74, 110, 197, 203, 209, 216], "gemm": [9, 32, 110, 182, 194, 206, 207, 213, 216], "iterator_get_next": [9, 32, 110], "iterator_v2": [9, 32, 110, 197], "layer_norm": [9, 32, 74, 110, 197], "map_and_batch_dataset": [9, 32, 110, 197], "matmul": [9, 13, 22, 32, 110, 194, 198, 200, 201, 204, 206, 212, 216], "mkl_layer_norm": [9, 32, 110], "model_dataset": [9, 32, 110], "one_hot": [9, 32, 110], "onnx_input": [9, 32, 110], "optimize_dataset": [9, 32, 110, 197], "placehold": [9, 32, 110], "quantize_linear": [9, 32, 110, 197], "quantize_v2": [9, 32, 110], "quantized_fused_matmul_and_dequant": [9, 32, 110], "quantized_matmul_with_bias_and_dequant": [9, 32, 110], "reduce_mean": [9, 32, 110, 197], "reduce_sum": [9, 32, 110], "scatter_el": [9, 32, 110], "softmax": [9, 32, 110, 137, 180, 192, 212], "squeez": [9, 32, 110], "strided_slic": [9, 32, 110], "top_k": [9, 32, 110], "unpack": [9, 32, 110, 133, 197], "unsqueez": [9, 32, 110, 197], "sub_graph": [9, 110, 197, 199], "add_cls_token": [9, 74, 110], "add_embed": [9, 74, 110], "attention_mask_length_adaptive_keep_indic": [9, 74, 110], "attention_output_layer_norm_length_adaptive_keep_indic": [9, 74, 110], "attention_reshap": [9, 74, 110], "collect_quant_info": [9, 74, 110], "conv_reshap": [9, 74, 110], "embeddingbag": [9, 22, 74, 110], "generate_sequ": [9, 74, 110], "input_fil": [9, 74, 110], "insert_bf16_nod": [9, 74, 110], "insert_quant_nod": [9, 74, 110], "interact_featur": [9, 74, 110], "last_layer_shap": [9, 74, 110], "layer_norm_with_reduce_mean": [9, 74, 110, 197], "matmul_with_bia": [9, 74, 110], "matmul_with_bias_add": [9, 74, 110], "matmul_with_bias_gelu": [9, 74, 110], "matmul_with_bias_relu": [9, 74, 110], "matmul_with_bias_sigmoid": [9, 74, 110], "matmul_with_bias_tanh": [9, 74, 110], "merged_embeddingbag": [9, 74, 110], "output_data": [9, 74, 110, 195], "padding_sequ": [9, 74, 110, 195], "position_embed": [9, 74, 110], "position_embeddings_v1": [9, 74, 110], "qkv_merg": [9, 74, 110], "qkv_reshap": [9, 74, 110], "quantize_fus": [9, 74, 110], "reshape_after_restore_hidden_st": [9, 74, 110], "reshape_before_and_after_attention_out_layer_norm_gather_el": [9, 74, 110], "reshape_before_restore_hidden_st": [9, 74, 110], "reshape_fus": [9, 74, 110], "restore_hidden_states_in_length_adaptive_update_indic": [9, 74, 110], "start_end_logit": [9, 74, 110], "subgraph_match": [9, 74, 110, 199], "token_type_embed": [9, 74, 110, 197], "token_type_embeddings_v1": [9, 74, 110, 197], "transpose_batch_matmul": [9, 74, 110, 197], "word_embed": [9, 74, 110, 195], "graph_util": [9, 110, 197, 200, 204], "logger": [9, 110, 214], "onnx_util": [9, 110], "tf_util": [9, 110], "load": [10, 11, 116, 118, 119, 123, 124, 133, 137, 138, 195, 197, 198, 199, 201, 207, 209, 210, 211, 213], "frontend": [10, 11, 211], "get_logg": 12, "log": [12, 195, 203], "level": [12, 138, 195, 199, 209, 211], "msg": 12, "arg": [12, 118, 121, 123, 133, 180, 198, 203], "kwarg": [12, 118, 121, 133, 137, 138], "format": [12, 180, 198, 212, 222], "debug": 12, "error": [12, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 195, 203, 214], "fatal": 12, "warn": 12, "get_children": 13, "input_name_to_nod": 13, "get_node_children_nam": 13, "nodeproto": 13, "get_initializer_children_nam": 13, "graph_node_names_detail": [13, 109], "pars": [13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 109, 195, 203], "graph_nodes_dict": [13, 109], "Be": [13, 109], "class": [13, 109, 127, 131, 185, 191, 192, 197, 203, 206, 208, 209], "cerat": [13, 109], "output_nam": [13, 113, 118, 123], "ouput": 13, "param": [13, 109, 133, 208, 209], "node_names_detail": [13, 109], "is_supported_onnx_graph": [13, 155], "is_supported_onnx_nod": 13, "change_num_nam": 13, "number": [13, 113, 115, 116, 118, 138, 191, 199, 200, 204, 207, 213, 217, 222], "bias_to_int32": 13, "bias_nod": 13, "a_scal": 13, "b_scale": 13, "int8": [13, 124, 133, 182, 185, 193, 198, 199, 201, 209, 212, 216, 222], "int32": [13, 195], "matric": [13, 212], "scale": [13, 208, 222], "arrai": [13, 119, 195], "fp32_bia": 13, "int8_bia": 13, "int8_bias_zero_point": 13, "int8_bias_scal": 13, "int32_bia": 13, "onnx_extract_oper": 13, "nodes_dict": [13, 32, 42, 43, 109], "tf_dtype": [13, 109], "set_attr": [14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 197], "batchmatmul": 16, "batchmatmulv2": 17, "onnxruntim": [20, 21, 27, 29, 47, 52, 54, 56, 60, 61, 63, 182, 194, 197, 202], "regist": [22, 32, 43, 74, 92, 127, 129, 131, 207, 208, 209, 211, 212, 213], "binaryadd": [22, 208], "constantofshap": 22, "dequantizelinear": [22, 201], "div": [22, 197, 200], "erf": [22, 203], "expand": [22, 138], "fill": [22, 200, 212], "flatmapdataset": 22, "ident": [22, 192], "lessequ": 22, "makeiter": 22, "matmulwithbiasadd": [22, 84], "matmulwithbiasgelu": [22, 85], "matmulwithbiastanh": [22, 88], "matmulwithbia": [22, 83], "nonzero": [22, 210], "pow": [22, 197, 200], "qlinearmatmul": [22, 201], "qlinearadd": 22, "qlinearmul": 22, "realdiv": 22, "slice": 22, "sqrt": [22, 197, 200, 212], "squar": [22, 137, 138], "stopgradi": 22, "tanh": [22, 203, 209, 216], "tensorslicedataset": 22, "transposebatchmatmul": [22, 107, 197], "rang": [22, 113, 118, 180, 197, 199, 216, 221, 222], "relu": [22, 209, 216], "matmulwithbiasrelu": [22, 86], "quantiz": [22, 113, 118, 121, 122, 123, 133, 194, 208, 209, 216, 218, 223], "Not": [22, 191, 211], "cumsum": 22, "onehot": [22, 41], "tokentypeid": 22, "positionid": 22, "loop": [22, 133, 180, 197, 208, 212], "sigmoid": 22, "matmulwithbiassigmoid": [22, 87], "flatten": 22, "mergedembeddingbag": [22, 89], "convolut": [22, 192, 199], "expandindic": 22, "tile": [22, 207, 210, 212, 213, 216], "expanddim": 23, "fusedbatchnormv3": 25, "fusedgemm": 26, "fusedmatmul": 27, "gatherv2": [28, 197], "gatherel": [29, 197], "operator_registri": [32, 43, 197], "operator_typ": [32, 43, 197], "subclass": [32, 43, 74, 92, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "cl": [32, 43, 74, 92, 180], "registr": [32, 43, 74, 92, 197], "iteratorgetnext": 33, "iteratorv2": [34, 197], "mapandbatchdataset": [36, 197], "modeldataset": 40, "onnxinput": 42, "optimizedataset": [44, 197], "quantizelinear": [47, 197, 201], "quantizev2": 48, "quantizedmatmulwithbiasanddequant": 50, "reducemean": [51, 197, 200], "reducesum": 52, "scatterel": 54, "stridedslic": 58, "source_op": 59, "dest_op": 59, "definit": [59, 209], "topk": 60, "addclstoken": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108], "fuse": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 201, 208, 209], "acceler": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 187, 193, 194, 201, 208, 209, 212, 222, 224, 227], "strategi": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 113, 118, 123], "addembed": 65, "attentionmasklengthadaptiveexpandindic": 66, "attentionoutputlayernormlengthadaptiveexpandindic": 67, "attentionreshap": 68, "collectquantinfo": 69, "convreshap": 70, "generatesequ": 73, "bass": [74, 92], "pattern_registri": [74, 92, 197], "pattern_typ": [74, 92, 197], "subgraphmatch": [74, 104, 199], "inputdata": [75, 197], "inputfil": 76, "insertbf16nod": 77, "insertquantnod": 78, "interactfeatur": 79, "lastlayershap": 80, "layernormwithreducemean": [82, 197], "outputdata": [90, 197], "positionembed": 93, "positionembeddingsv1": 94, "qkvmerg": 95, "qkvreshap": 96, "qunatizefus": 97, "reshapeafterrestorehiddenst": 98, "reshapebeforeandafterattentionoutlayernormgatherel": 99, "reshapebeforerestorehiddenst": 100, "reshapefus": 101, "restorehiddenstatesinlengthadapt": 102, "startendlogit": 103, "matcher": [104, 180, 201], "tokentypeembed": [105, 197], "tokentypeembeddingsv1": [106, 197], "wordembed": 108, "create_tf_nod": 109, "creat": [109, 118, 119, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 202, 203, 211, 216, 218], "tendorflow": 109, "get_tensor_dest_op": 109, "someth": 109, "store": [109, 116, 118, 119, 121, 180, 197, 200, 201, 204, 207, 208, 209, 210, 212, 213], "dest_op_nam": 109, "tf_extract_oper": 109, "compil": [110, 182, 195, 196, 197, 199, 200, 202, 204, 226], "version": [111, 118, 121, 182, 199, 205, 215], "provid": [112, 113, 116, 118, 121, 122, 123, 133, 137, 138, 180, 182, 193, 194, 197, 206, 209, 218, 222], "pytorchbenchmark": 112, "executorbenchmark": 112, "run": [112, 122, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 191, 216, 217, 222], "self": [112, 137, 138, 180, 182, 191, 197, 198], "print": [112, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 204], "tabl": [112, 199, 209, 213], "header": 112, "pytorch": [112, 113, 116, 118, 119, 121, 122, 133, 137, 138, 140, 182, 185, 191, 194, 220, 221, 222], "transform": [112, 113, 118, 123, 124, 133, 137, 138, 180, 185, 191, 192, 196, 197, 208, 209, 212, 213, 219, 220, 221, 222], "overwrit": 112, "_prepare_inference_func": 112, "process": [113, 118, 119, 133, 180, 182, 193, 195, 197, 199, 200, 204, 207, 208, 213, 221, 222], "enum": [113, 114, 118, 125, 132, 144, 208, 209], "function": [113, 118, 121, 122, 123, 133, 180, 192, 197, 199, 200, 203, 204, 208, 209, 216, 218, 221, 222], "inc": [113, 118, 121, 122, 123, 133, 202], "nncf": [113, 118], "dynamiclengthconfig": [113, 118, 133, 182], "max_length": [113, 118, 133], "length_config": [113, 118, 137, 138, 182], "const_rat": [113, 118], "float": [113, 118, 123, 125, 133, 135, 139, 191, 192, 194, 197, 202, 208, 209, 218, 219, 221, 222], "num_sandwich": [113, 118], "length_drop_ratio_bound": [113, 115, 118], "layer_dropout_prob": [113, 115, 118], "layer_dropout_bound": [113, 115, 118], "dynamic_train": [113, 118], "bool": [113, 118, 121, 133, 135, 137, 138, 139, 192, 197, 208, 209, 218, 219], "fals": [113, 116, 118, 121, 133, 137, 138, 180, 185, 192, 197, 199, 208, 209, 218], "load_store_fil": [113, 118], "evo_it": [113, 118], "30": [113, 118, 210], "population_s": [113, 118], "20": [113, 118, 182, 195, 202, 205, 210, 214, 215], "mutation_s": [113, 118], "mutation_prob": [113, 116, 118], "crossover_s": [113, 118], "num_cpu": [113, 118], "48": [113, 118, 205, 215], "distributed_world_s": [113, 118], "latency_constraint": [113, 118], "evo_eval_metr": [113, 118], "eval_f1": [113, 116, 118, 182, 218, 222], "dynam": [113, 118, 133, 203, 208, 211], "adapt": [113, 118], "quantizationconfig": [113, 118, 122, 123, 133, 182], "approach": [113, 118, 182, 191, 192, 193, 209], "posttrainingstat": [113, 118, 182, 193, 194, 222], "timeout": [113, 118, 222], "max_trial": [113, 118, 180, 222], "100": [113, 118, 133, 137, 138, 216, 222], "metric": [113, 118, 119, 123, 133, 134, 180, 182], "config_fil": [113, 118], "sampling_s": [113, 118], "use_bf16": [113, 118], "input_nam": [113, 118, 123], "op_wis": [113, 118], "maximum": [113, 118, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 205, 215, 222], "trial": [113, 118, 133], "performance_onli": [113, 118], "boolean": [113, 118], "whether": [113, 118, 121, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 198, 204], "random_se": [113, 118], "random": [113, 118, 119, 137, 180], "seed": [113, 118, 119, 180], "tensorboard": [113, 118], "directori": [113, 118, 121, 201, 206], "resume_path": [113, 118], "resum": [113, 118, 121, 133], "sampl": [113, 115, 118, 180, 191, 205, 212, 222], "size": [113, 118, 137, 138, 180, 182, 185, 195, 199, 207, 211, 212, 222], "pruningconfig": [113, 118, 182], "epoch": [113, 118, 221], "epoch_rang": [113, 118, 125], "initial_sparsity_ratio": [113, 118, 125], "target_sparsity_ratio": [113, 118, 125, 182, 221], "97": [113, 118, 125, 215, 221], "pruner_config": [113, 118, 182, 221], "neural_compressor": [113, 118, 122, 125, 133], "pruner": [113, 118, 125, 133, 192, 221], "prune": [113, 118, 122, 123, 128, 129, 133, 138, 223], "target": [113, 118, 128, 133, 180, 198, 213, 221], "ratio": [113, 115, 116, 118, 192, 216, 218, 219, 221], "init_prune_config": [113, 118], "init": [113, 118, 119, 122, 123, 140, 141, 180, 182, 191, 195, 196, 209], "distillationconfig": [113, 118, 133, 182], "criterion": [113, 118, 123, 135, 182, 218, 222], "distil": [113, 118, 119, 122, 123, 133, 191, 202], "inc_config": [113, 118], "tfdistillationconfig": [113, 118, 180], "loss_typ": [113, 118, 180, 192], "loss_weight": [113, 118, 180], "train_step": [113, 118, 180], "temperatur": [113, 118, 180, 191, 192], "flashdistillationconfig": [113, 118], "block_nam": [113, 118, 180], "layer_mappings_for_knowledge_transf": [113, 118, 180], "add_origin_loss": [113, 118, 180, 192], "flash": [113, 118, 119, 133], "autodistillationconfig": [113, 118, 180], "search_spac": [113, 118, 119, 180], "search_algorithm": [113, 118, 180], "bo": [113, 118, 180], "knowledge_transf": [113, 118, 180], "regular_distil": [113, 118, 180], "auto": [113, 118, 119, 123, 191, 198, 203, 209], "disil": [113, 118], "knowledg": [113, 118, 133, 180, 191], "transfer": [113, 118, 119, 133, 141, 192], "regular": [113, 118, 119, 221], "space": [113, 118, 119, 133, 180, 199, 207], "max": [113, 115, 118, 133, 205, 208, 211, 213, 215, 222], "distillationcriterionmod": [114, 118], "enumer": [114, 118, 144], "deriv": [114, 118, 144, 206, 212], "drop": [115, 128, 193, 213, 218], "restor": [115, 193], "sample_length_configur": 115, "max_seq_length": [115, 116], "num_hidden_lay": 115, "layer_config": [115, 137, 138], "length_drop_prob": 115, "length_drop_ratio": 115, "min_length": 115, "hidden": [115, 137, 138, 180], "probabl": [115, 180], "truncat": 115, "less": [115, 192, 199, 213, 221], "than": [115, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 198, 199, 200, 208, 212, 216, 222], "min": [115, 222], "sample_layer_configur": 115, "layer_dropout": 115, "depend": [115, 119, 182, 196], "paramat": [115, 118, 119], "dropout": 115, "how": [115, 133, 181, 195, 197, 198, 201, 202, 204, 209, 210, 216, 218, 221], "mani": [115, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 198, 200, 208, 210, 216], "bound": 115, "kept": 115, "evolust": 116, "evolustionari": 116, "approx_ratio": 116, "x": [116, 138, 199, 209, 211, 212, 216, 222], "12": [116, 182, 191, 196, 198, 205, 210, 212, 214, 215, 216], "l": [116, 180, 192], "384": [116, 180, 199, 205, 215], "approxim": 116, "invers": 116, "store2str": 116, "gene": 116, "mac": 116, "score": [116, 137, 138, 220], "parent": 116, "parmat": 116, "devic": [116, 191, 192, 195, 199, 220], "evalu": [116, 118, 119, 122, 123, 133, 180, 192, 198, 212, 218, 219, 221, 222], "lower_constraint": 116, "upper_constraint": 116, "eval_metr": 116, "evolutionari": [116, 133], "load_stor": 116, "store_fil": 116, "save_stor": 116, "get_stor": 116, "set_lower_constraint": 116, "constraint": [116, 222], "setter": [116, 138], "lower": [116, 213, 219, 222], "set_upper_constraint": 116, "upper": [116, 209], "save_popul": 116, "population_fil": 116, "popul": 116, "convex_hul": 116, "calcul": [116, 180, 198, 204, 207, 209, 213, 216, 222], "pareto_fronti": 116, "add_gen": 116, "mutat": 116, "rai": 116, "crossov": 116, "packag": [117, 120, 191], "drop_and_restore_util": [117, 118], "evolut": [117, 118, 193], "mixtur": 118, "auto_distil": [118, 120, 180], "utility_tf": [118, 134], "benchmark": [118, 182, 199, 205, 206, 215, 217], "optimizer_tf": 118, "trainer": [118, 122, 182, 193, 194], "autodistil": [118, 119, 123, 133], "model_build": [118, 119, 123, 133, 180], "conf_fname_or_obj": [118, 119], "design": [118, 119, 133, 197, 206, 208, 209], "handl": [118, 119, 133, 137, 138, 180, 181, 203, 210, 211], "three": [118, 119, 125, 132, 133, 180, 197, 200, 204, 212, 221, 222], "major": [118, 119, 133, 180, 207, 213, 222], "stage": [118, 119, 133, 180], "explor": [118, 119, 133, 180, 182], "compress": [118, 119, 133, 180, 182, 192, 207, 210, 213, 222], "architectur": [118, 119, 133, 137, 138, 180, 182, 207], "iter": [118, 119, 133, 180, 195, 199, 203, 208, 211, 212, 216, 217], "train": [118, 119, 122, 123, 133, 180, 182, 185, 191, 192, 221], "discov": [118, 119, 133, 180], "potenti": [118, 119, 133, 180], "measur": [118, 119, 133, 180, 192, 206, 218, 219, 221, 222], "predict": [118, 119, 133, 137, 138, 180, 191, 192], "accuraci": [118, 119, 133, 180, 182, 192, 193, 216, 218, 219, 221], "hardwar": [118, 119, 133, 180, 192, 214], "etc": [118, 119, 133, 180, 192, 198], "select": [118, 119, 133, 137, 138, 180, 209], "best": [118, 119, 133, 180, 193], "teacher_model": [118, 119, 122, 123, 133, 180, 182, 192], "getter": [118, 119, 133, 138], "teacher": [118, 119, 122, 123, 180, 192, 193], "student_model": [118, 119], "student": [118, 119, 180, 192], "advisor": [118, 119, 180], "train_func": [118, 119, 122, 123, 133, 180], "eval_func": [118, 119, 122, 123, 133, 180], "model_arch_proposit": [118, 119], "propos": [118, 119, 180, 192, 207], "descript": [118, 119, 133, 191, 192, 198, 213, 218, 219, 221, 222], "res_save_path": [118, 119], "model_cl": [118, 119, 123, 133, 180], "found": [118, 119, 196, 197, 213], "estim": [118, 119, 198, 213], "load_search_result": [118, 119], "dump_search_result": [118, 119], "current": [118, 119, 125, 132, 198, 208, 209, 211, 212, 216], "params_vec2params_dict": [118, 119], "paras_vec": [118, 119], "vector": [118, 119, 182, 203, 206, 208, 209, 211, 212, 213], "hold": [118, 119], "find_best_model_arch": [118, 119], "find": [118, 119, 180, 197, 199, 203, 204, 211, 221], "metrics_convers": [118, 119], "init_by_cfg": [118, 119], "instanc": [118, 119, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 195, 198, 205, 215, 217, 218, 219, 220], "init_search_cfg": [118, 119], "create_distil": [118, 119], "optimizedmodel": [118, 121], "from_pretrain": [118, 121, 137, 138, 185, 220], "classmethod": [118, 121, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "model_name_or_path": [118, 121, 182, 191], "instanti": [118, 121, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "given": [118, 121, 137, 138, 191, 204, 209, 211, 212, 213, 221], "intel": [118, 121, 181, 185, 191, 195, 196, 197, 205, 207, 214, 215, 219, 220, 221, 222], "compressor": [118, 121, 123, 182, 219, 222], "repositori": [118, 121], "hug": [118, 121, 182, 201], "face": [118, 121, 182, 201], "hub": [118, 121, 220], "local": [118, 121, 133, 197, 207], "host": [118, 121], "cache_dir": [118, 121], "download": [118, 121, 137, 138], "cach": [118, 121, 203, 212], "standard": [118, 121], "force_download": [118, 121], "default": [118, 121, 133, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 191, 192, 197, 199, 205, 209, 213, 214, 215, 216, 218, 219, 221, 222], "forc": [118, 121], "re": [118, 121, 210], "overrid": [118, 121, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 203], "resume_download": [118, 121], "delet": [118, 121, 221], "incomplet": [118, 121], "receiv": [118, 121, 200, 204], "attempt": [118, 121], "revis": [118, 121], "branch": [118, 121, 216], "tag": [118, 121], "commit": [118, 121, 217], "sinc": [118, 121, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 192], "we": [118, 121, 138, 191, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 222], "git": [118, 121, 182, 191, 195, 196], "system": [118, 121, 196], "artifact": [118, 121], "huggingfac": [118, 121, 182, 218, 220], "co": [118, 121, 182], "allow": [118, 121], "q_model": [118, 121], "tfoptim": [118, 123, 180, 192], "pretrainedmodel": [118, 123, 133, 137, 138, 180], "training_args_tf": [118, 123], "tftrainingargu": [118, 123], "train_dataset": [118, 123, 180], "eval_dataset": [118, 123, 180], "compute_metr": [118, 123, 180], "callabl": [118, 122, 123, 133, 180], "task_typ": [118, 123, 141], "task_id": [118, 123, 141], "entri": [118, 119, 123, 133, 138], "techniqu": [118, 123, 182, 193, 222], "dataset": [118, 123, 133, 141, 182, 191, 193, 218, 222], "builtin_eval_func": [118, 123, 133], "saved_model": [118, 123], "quantized_model_path": [118, 123], "larger": [118, 123, 133], "init_quant": [118, 122, 123, 133, 208], "quant_config": [118, 122, 123, 133, 182, 222], "prepar": [118, 122, 123, 138, 191, 198, 200, 203, 208, 209, 213, 222], "invok": [118, 122, 123], "init_prun": [118, 122, 123, 133], "pruning_config": [118, 122, 123, 133, 182, 221], "init_distil": [118, 122, 123, 133], "distillation_config": [118, 122, 123, 133, 182, 192], "model_builder_builtin": [118, 123, 133, 180], "arch_para": [118, 123, 133], "built": [118, 123, 180, 219], "builder": [118, 123, 180], "autodistillation_config": [118, 123, 133, 180], "build_train_func": [118, 123], "build": [118, 123, 133, 180, 196, 207, 214, 219], "prunerconfig": [118, 125, 182], "update_frequ": [118, 125], "prune_typ": [118, 125, 182, 221], "basicmagnitud": [118, 125, 182, 193, 221], "per_tensor": [118, 125], "pruningmod": [118, 125], "quantizationmod": [118, 132], "both": [119, 133, 137, 138, 182, 191, 212, 216, 217, 218, 222], "create_search_space_pool": 119, "pool": 119, "searcher": 119, "basic": [119, 138, 141, 203], "abstract": [119, 137, 138], "suggest": [119, 194, 208], "point": [119, 133, 138, 180, 200, 208, 209, 222], "feedback": 119, "para_vec": 119, "gridsearch": 119, "implement": [119, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 197, 199, 200, 204, 206, 207, 208, 211, 212, 214, 216], "grid": 119, "randomsearch": 119, "42": [119, 180, 205, 215], "bayesianoptimizationsearch": 119, "bayesian": [119, 180], "append": [119, 216, 217], "param_indic": 119, "known": [119, 206], "indices2params_vec": 119, "indic": [119, 137, 138, 204, 208, 209, 212, 213, 218], "pramat": 119, "find_pareto_front": 119, "pareto": 119, "front": [119, 208], "assum": [119, 197, 204], "higher": [119, 199, 212, 213, 216, 222], "n_point": 119, "n_metric": 119, "n_pareto_point": 119, "integ": [119, 191, 194, 199, 200, 213, 216, 221, 222], "orchestr": [122, 133, 182], "orchestrate_optim": [122, 133], "compon": [122, 133, 208], "experiment": [122, 133, 209], "aggreg": 122, "fit": 122, "schedul": [122, 133, 180, 182, 206], "notraineroptim": [122, 192, 221, 222], "saved_result": 122, "calib_func": 122, "calib": 122, "calib_dataload": [122, 133], "calibr": [122, 133, 222], "dataload": [122, 133, 141], "_inc_quant": 122, "infer_framework_load_model": 124, "autoconfig": [124, 185, 220], "model_class": 124, "task": [124, 138, 141, 180, 191, 192, 193, 202, 209, 212, 214, 220], "model_kwarg": [124, 138, 220], "register_pattern": 127, "registri": [127, 129, 131], "get_pattern": 127, "parse_to_prun": 128, "keep": [128, 200], "parse_not_to_prun": 128, "non": [128, 138, 211, 212, 213, 217], "register_prun": 129, "get_prun": 129, "snipprun": 129, "pleas": [129, 180, 181, 182, 185, 191, 192, 193, 197, 200, 203, 206, 207, 208, 209, 216, 221, 222], "refer": [129, 180, 182, 191, 192, 200, 203, 210, 216, 221, 222], "snip": 129, "singl": [129, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 212], "shot": 129, "sensit": 129, "http": [129, 137, 182, 191, 195, 196, 203], "arxiv": [129, 137], "org": [129, 137], "ab": [129, 137, 222], "1810": 129, "02340": 129, "register_schedul": 131, "get_schedul": 131, "easili": [133, 207, 208], "finetun": [133, 185, 193, 220], "basetrain": 133, "resuming_checkpoint": 133, "checkpoint": [133, 137], "builtin_train_func": 133, "goal": [133, 221], "relat": [133, 192, 197, 200, 204, 210, 221, 222], "automativ": 133, "recip": [133, 191, 199, 219], "low": [133, 182, 207, 219, 222], "precis": [133, 194, 201, 219, 222], "achiev": [133, 219], "automat": [133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 191, 198, 199, 200, 208, 216], "pruningconf": 133, "torch": [133, 137, 138, 220], "nn": [133, 137, 138, 211], "smaller": [133, 192, 221], "config_list": 133, "optimizt": 133, "combin": [133, 180, 199, 204, 208, 209, 222], "create_optimizer_builtin": 133, "resume_from_checkpoint": 133, "optuna": 133, "ignore_keys_for_ev": 133, "tor": 133, "present": [133, 137], "state": [133, 137, 138, 205, 215], "here": [133, 196, 197, 199, 200, 201, 203, 204, 209, 213, 222], "hyperparamet": [133, 180], "dictionari": 133, "ignor": [133, 137, 138, 197], "when": [133, 137, 141, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 193, 197, 199, 200, 203, 204, 207, 209, 211, 213, 216, 218, 219, 222], "dure": [133, 195, 213, 217, 219, 221, 222], "keyword": 133, "argument": [133, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 192, 198, 217, 218, 219, 221, 222], "hide": [133, 137, 138], "deprec": [133, 137, 138], "training_step": 133, "batch": [133, 185, 195, 211, 212, 217], "inject": [133, 209], "behavior": [133, 192, 207, 208, 221, 222], "union": 133, "being": 133, "fed": 133, "most": [133, 200, 204, 208, 209, 212, 220], "expect": [133, 137, 138, 185, 213, 219], "under": [133, 195, 197, 198, 201, 216], "label": [133, 137, 138, 191, 217, 220], "document": [133, 191, 192, 212, 213, 221, 222], "accept": [133, 220], "loss": [133, 137, 138, 180, 191, 192, 222], "training_step_length_adapt": 133, "compute_loss": 133, "return_output": 133, "By": [133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 195], "baseic": 133, "callabel": 133, "auto_distil_evaluation_loop": 133, "prediction_loss_onli": 133, "ignore_kei": 133, "metric_key_prefix": 133, "eval": [133, 180, 218], "trainer_util": 133, "evalloopoutput": 133, "share": 133, "work": [133, 181, 209, 220], "doe": [133, 197, 208, 209, 210, 211, 212], "avoid": [133, 137, 138, 204, 207, 209, 212, 216], "memori": [133, 185, 203, 208, 209, 210, 211, 212, 213, 219, 222], "huge": 133, "export_to_onnx": [133, 185, 194], "tranfer": 133, "export_to_fp32_onnx": 133, "save_path": [133, 194], "opset_vers": [133, 194], "14": [133, 194, 205, 210, 214, 215], "do_constant_fold": [133, 194], "verbos": [133, 194], "fp32": [133, 185, 193, 195, 198, 199, 201, 203, 208, 209, 210, 211, 216, 220, 222], "export_to_bf16_onnx": 133, "bf16": [133, 193, 201, 209, 210, 216], "export_to_int8_onnx": 133, "quant_format": [133, 194], "qdq": [133, 194, 201], "s8s8": [133, 194], "sample_s": 133, "calibrate_method": 133, "minmax": 133, "scale_map": 133, "export_to_jit": 133, "jit": [133, 182, 206, 208, 209, 211], "set_dynamic_config": [133, 182], "dynamic_config": [133, 182], "run_evolutionary_search": 133, "nlptrainer": [133, 182, 192, 221, 222], "nlp": [133, 182, 191, 193, 195, 202, 221, 222], "nlpseq2seqtrain": 133, "seq2seqtrain": 133, "seq2seq": [133, 137, 138], "lenght": 133, "num_beam": 133, "numbert": 133, "beam": 133, "greater_is_bett": [135, 139, 180, 218, 219, 222], "is_rel": [135, 182, 218, 222], "01": [135, 182, 185, 215, 218, 222], "weight_ratio": [135, 139, 218, 219, 222], "modeling_bert_dynam": 136, "modeling_roberta_dynam": 136, "bert": [137, 180, 192, 193, 195, 198, 199, 202, 204, 205, 208, 212], "load_tf_weights_in_bert": 137, "tf_checkpoint_path": 137, "bertembed": [137, 138], "word": [137, 138, 193, 213], "posit": [137, 138, 199, 204, 216, 220], "token_typ": 137, "bertpretrainedmodel": 137, "modeling_util": [137, 138], "weight": [137, 138, 180, 192, 194, 198, 199, 201, 207, 210, 211, 213, 216, 218, 219, 221, 222], "simpl": [137, 138, 195, 208, 220], "pretrain": [137, 138, 197], "bertforpretrainingoutput": 137, "modeloutput": 137, "bertforpretrain": 137, "floattensor": [137, 138], "sum": [137, 192, 198, 213, 216], "mask": [137, 138, 193, 208, 209, 210], "languag": [137, 138, 182, 191, 193, 220], "classif": [137, 138, 180, 192, 193, 220], "prediction_logit": [137, 138], "batch_siz": [137, 138, 141, 185, 195, 198, 202, 212, 216], "sequence_length": [137, 138, 185], "vocab_s": [137, 138], "vocabulari": 137, "token": [137, 138, 191, 193, 201, 220], "seq_relationship_logit": 137, "continu": [137, 207, 212], "hidden_st": [137, 138], "output_hidden_st": [137, 138], "hidden_s": [137, 138, 180], "plu": 137, "output_attent": [137, 138], "num_head": [137, 138], "averag": [137, 198], "bertmodel": 137, "add_pooling_lay": [137, 138], "behav": [137, 138], "encod": [137, 138, 180, 198, 204], "well": [137, 138, 194, 222], "decod": [137, 138, 214], "case": [137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 192, 193, 198, 199, 207, 209, 210, 216, 217], "cross": [137, 138], "ad": [137, 138, 197, 200, 204, 208, 213, 216, 220], "between": [137, 138, 180, 192, 213, 216, 222], "describ": [137, 138, 191, 211, 212, 216, 218, 219], "1706": [137, 205, 215], "03762": 137, "ashish": [137, 138], "vaswani": [137, 138], "noam": [137, 138], "shazeer": [137, 138], "niki": [137, 138], "parmar": [137, 138], "jakob": [137, 138], "uszkoreit": [137, 138], "llion": [137, 138], "jone": [137, 138], "aidan": [137, 138], "gomez": [137, 138], "lukasz": [137, 138], "kaiser": [137, 138], "illia": [137, 138], "polosukhin": [137, 138], "To": [137, 138, 180, 197, 212, 213, 216, 217], "is_decod": [137, 138], "add_cross_attent": [137, 138], "encoder_hidden_st": [137, 138], "forward": [137, 138, 180, 198, 203, 222], "pass": [137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 208, 209, 220, 222], "attention_mask": [137, 138], "token_type_id": [137, 138], "position_id": [137, 138], "head_mask": [137, 138], "inputs_emb": [137, 138], "encoder_attention_mask": [137, 138], "past_key_valu": [137, 138], "use_cach": [137, 138], "return_dict": [137, 138], "always_keep_cls_token": [137, 138], "modeling_output": [137, 138], "basemodeloutputwithpoolingandcrossattent": [137, 138], "pad": [137, 138, 198, 213], "n_layer": [137, 138], "embed_size_per_head": [137, 138], "precomput": [137, 138], "block": [137, 138, 193, 207, 210, 211, 213, 221], "speed": [137, 138, 185, 197, 200], "up": [137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 198, 200, 209, 216], "decoder_input_id": [137, 138], "those": [137, 138, 212, 221, 222], "past": [137, 138], "instead": [137, 138], "next_sentence_label": 137, "longtensor": [137, 138], "docstr": [137, 138], "pair": [137, 195, 209, 213], "legaci": [137, 138], "berttoken": 137, "uncas": [137, 180, 185, 193, 201, 220], "hello": [137, 138], "my": [137, 138], "dog": [137, 138], "cute": [137, 138], "return_tensor": [137, 138], "pt": [137, 138, 220], "bertlmheadmodel": 137, "causallmoutputwithcrossattent": [137, 138], "bertformaskedlm": 137, "maskedlmoutput": [137, 138], "bertfornextsentencepredict": 137, "nextsentencepredictoroutput": 137, "prompt": 137, "itali": 137, "pizza": 137, "serv": 137, "formal": 137, "restaur": 137, "unslic": 137, "next_sent": 137, "sky": 137, "blue": 137, "shorter": 137, "wavelength": 137, "light": 137, "logit": [137, 138, 180, 192, 195], "sentenc": [137, 138, 182, 191], "wa": 137, "bertforsequenceclassif": 137, "sequenceclassifieroutput": [137, 138], "regress": [137, 138, 191], "num_label": [137, 138], "entropi": [137, 138, 180], "bertformultiplechoic": 137, "multiplechoicemodeloutput": [137, 138], "multipl": [137, 138, 193, 197, 198, 209, 211, 212, 213, 216, 218, 219], "choic": [137, 138, 193], "num_choic": [137, 138], "dimens": [137, 138, 180, 192, 199, 211, 212, 213, 216], "bertfortokenclassif": 137, "tokenclassifieroutput": [137, 138], "bertforquestionansw": 137, "start_posit": [137, 138], "end_posit": [137, 138], "questionansweringmodeloutput": [137, 138], "span": [137, 138], "clamp": [137, 138], "taken": [137, 138], "account": [137, 138], "roberta": [138, 193], "robertaembed": 138, "tini": [138, 193], "tweak": 138, "past_key_values_length": 138, "create_position_ids_from_inputs_emb": 138, "directli": [138, 208, 210], "cannot": [138, 207, 213, 217], "sequenti": [138, 200, 208, 209, 211], "robertaselfattent": 138, "position_embedding_typ": 138, "transpose_for_scor": 138, "robertaselfoutput": 138, "robertaattent": 138, "attenion": 138, "prune_head": 138, "robertaintermedi": 138, "intermidi": 138, "robertaoutput": 138, "robertalay": 138, "output_length": 138, "feed_forward_chunk": 138, "attention_output": 138, "feed": [138, 192, 195], "robertaencod": 138, "roberata": 138, "basemodeloutputwithpastandcrossattent": 138, "robertapool": 138, "pooler": 138, "robertapretrainedmodel": 138, "update_keys_to_ignor": 138, "del_keys_to_ignor": 138, "robertamodel": 138, "_": [138, 180, 185, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 212, 216, 218, 219, 220, 221, 222], "get_input_embed": 138, "set_input_embed": 138, "set_length_config": 138, "set_output_attent": 138, "robertaforcausallm": 138, "causal": [138, 191], "get_output_embed": 138, "set_output_embed": 138, "new_embed": 138, "robertatoken": 138, "robertaconfig": 138, "prepare_inputs_for_gener": 138, "robertaformaskedlm": 138, "robertalmhead": 138, "featur": [138, 180, 182, 190, 192, 201, 204, 207, 214, 220, 227], "robertaforsequenceclassif": 138, "robertaformultiplechoic": 138, "robertafortokenclassif": 138, "robertaclassificationhead": 138, "robertaforquestionansw": 138, "quanstion": 138, "answer": [138, 193], "create_position_ids_from_input_id": 138, "padding_idx": 138, "symbol": 138, "begin": [138, 180, 208, 209], "fairseq": 138, "make_posit": 138, "expand_gath": 138, "dim": [138, 195, 203, 207, 213, 216], "models": [139, 193, 219], "distributed_init": [140, 141], "backend": [140, 182, 185, 193, 196, 197, 199, 201, 204, 206, 216, 222], "gloo": 140, "world_siz": 140, "rank": 140, "init_method": 140, "master_addr": 140, "127": [140, 198, 214, 215, 222], "master_port": 140, "12345": 140, "distibut": 140, "environ": [140, 141, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 216], "tfdataload": 141, "worker_address": 141, "worker": 141, "distribut": [141, 180, 192, 222], "address": [141, 182, 208], "treat": [141, 197], "chief": 141, "get_filepath": 141, "base_dirpath": 141, "folder": [141, 195, 196, 197, 198, 199, 201], "keras2savedmodel": 141, "kera": 141, "save_model": 141, "augmentertyp": 144, "testaddclstoken": 146, "methodnam": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "runtest": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "unittest": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "testcas": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "whose": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 204], "test": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 193, 205, 215, 216, 217], "code": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 197, 199, 209, 210, 211, 214, 216], "itself": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 214], "place": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 209, 221], "fixtur": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "constructor": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 203], "author": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "deconstruct": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "setup": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 191, 197], "teardown": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "respect": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 200, 201], "necessari": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 203, 213], "__init__": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197], "alwai": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 204, 217], "chang": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 207, 208, 213], "signatur": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "failureexcept": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "determin": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 199, 206, 214], "except": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 199, 208], "rais": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "fail": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "deem": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "rather": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 200, 208], "longmessag": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "long": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 204], "messag": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "includ": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 193, 195, 198, 199, 206, 209, 213, 216, 222], "repr": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "failur": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "explicit": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 203, 209], "maxdiff": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "diff": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "difflib": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "look": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 198, 209], "individu": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "setupclass": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "hook": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "teardownclass": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "testattentionreshap": [147, 148, 170, 173], "testconvreshap": 149, "testembeddingbag": 150, "testexecutionopt": 151, "testgelu": 152, "testgraphdispatch": 153, "testinsertinputouputdata": 154, "testissupportedonnxgraph": 155, "testlastlayershap": 156, "testlayernormwithreducemean": [157, 172, 174], "testmain": 158, "testmatmulwithbiasrelu": 159, "testmatmulwithbiassigmoid": 160, "testmatmulwithbiastanh": 161, "testmergedembeddingbag": 162, "testonnxutil": 164, "testop": 165, "testpaddingsequ": 166, "testpatterndispatch": 167, "testpositionembed": 168, "testqkvmerg": 169, "testquantonnxexecut": 171, "teststartendlogit": 175, "testtfutil": 176, "testtokentypeembed": 177, "testtranspos": 178, "testtransposebatchmatmul": 179, "within": [180, 211], "arch": 180, "proposit": 180, "promis": [180, 211], "assess": 180, "64": [180, 182, 185, 198, 205, 212, 214, 215, 216], "128": [180, 185, 198, 202, 205, 215, 216, 222], "num": [180, 191, 198, 207, 209, 212], "optim": [180, 182, 183, 185, 192, 193, 194, 195, 200, 201, 202, 208, 209, 211, 218, 219, 220, 221, 222], "ever": 180, "leverag": [180, 182, 192], "minim": [180, 192, 213], "done": [180, 192, 199, 216, 222], "kd": [180, 192, 206], "z": [180, 192], "distanc": [180, 192], "euclidean": [180, 192], "kullback": [180, 192], "leibler": [180, 192], "diverg": [180, 192], "term": [180, 192, 211, 212, 213, 218, 219, 222], "assign": 180, "cal": 180, "sloss": 180, "intermedi": [180, 197, 201, 204, 213, 222], "deal": [180, 198], "issu": [180, 181, 222], "mismatch": 180, "512": [180, 198, 211, 213, 215], "linear": [180, 192, 209, 211, 212], "desir": [180, 198], "unmatch": 180, "def": [180, 197], "agent": 180, "train_func_builtin": 180, "flash_distil": 180, "eval_func_builtin": 180, "els": [180, 197, 203], "search_loop": 180, "model_arch_para": 180, "oob": 180, "246": 180, "intra_bottleneck_s": 180, "96": [180, 205, 215], "160": [180, 205, 214], "num_attention_head": 180, "intermediate_s": 180, "640": 180, "num_feedforward_network": 180, "mobilebert": [180, 192, 193], "kl": 180, "mse": 180, "best_model_arch": 180, "automodelforpretrain": 180, "advanc": [180, 206, 214], "latenc": [180, 193, 198, 205, 215, 222], "higher_is_bett": 180, "10": [180, 182, 191, 198, 205, 210, 215, 216], "500": 180, "25000": 180, "mobilebert_distil": 180, "sgd": 180, "learning_r": 180, "001": 180, "mobilebert_na": 180, "5000": 180, "partial": 180, "pylint": 180, "disabl": [180, 205, 215], "e1101": 180, "makedir": 180, "exist_ok": 180, "120": [180, 214], "240": 180, "256": [180, 198, 215], "eval_loss": 180, "ce": [180, 192], "tfautomodelforsequenceclassif": 180, "distilbert": [180, 182, 185, 193, 201, 220], "center": 181, "inform": [181, 183, 192, 195, 198, 205, 209, 211, 215, 216, 221, 222], "resolv": 181, "guidelin": 181, "innov": 182, "toolkit": [182, 193, 195], "help": [182, 185, 191, 204, 208], "develop": [182, 203], "improv": [182, 185, 198, 208, 211, 213, 222], "product": [182, 205, 212, 215, 219, 222], "through": [182, 197, 208, 210, 211, 214], "eas": 182, "extend": 182, "infrastructur": 182, "rich": 182, "demonstr": [182, 193, 212, 213], "extrem": 182, "significantli": 182, "effici": 182, "publish": 182, "neurip": 182, "2021": 182, "2022": [182, 205, 215], "deploy": [182, 191, 199], "natur": [182, 191, 193], "domain": [182, 206], "With": [182, 222], "greatli": [182, 210], "10004": [182, 193, 194], "stai": 182, "star": [182, 193], "overview": 182, "kernel": [182, 195, 198, 203, 205, 207, 208, 209, 212, 214, 215], "export": [182, 185, 195, 198, 201, 220], "profil": [182, 225], "tutori": [182, 195], "AND": 182, "pip": [182, 191, 202], "clone": [182, 191, 196, 197], "github": [182, 191, 195, 196, 203], "com": [182, 191, 195, 196, 205, 215], "intel_extension_for_transform": [182, 185, 192, 195, 197, 199, 201, 204, 206, 216, 218, 219, 220, 221, 222], "cd": [182, 191, 196, 197, 202, 206, 214, 216], "r": [182, 202, 205, 215, 222], "txt": [182, 191, 195, 199, 202, 214], "submodul": [182, 191, 195, 196], "updat": [182, 191, 195, 196, 221], "recurs": [182, 191, 195, 196, 204], "py": [182, 191, 197, 198, 202], "recommend": [182, 197, 199, 202, 204, 214], "protobuf": [182, 202], "11": [182, 193, 202, 210, 215], "q_config": [182, 222], "eval_accuraci": [182, 192, 221], "p_conf": [182, 221], "d_conf": [182, 192], "facil": 182, "synthes": 182, "further": [182, 199, 211], "text": [182, 193, 209, 214, 220], "popular": 182, "fine": [182, 191, 221, 222], "gpt": [182, 191, 193], "gpt2": [182, 191], "synthesi": 182, "nlpaug": [182, 191], "preprocess": [182, 191], "data_augment": [182, 191], "dataaugment": [182, 191], "aug": [182, 191], "augmenter_typ": [182, 191], "textgenerationaug": [182, 191], "input_dataset": [182, 191], "original_dataset": 182, "csv": [182, 191], "glue": [182, 191], "viewer": 182, "sst2": [182, 191, 193, 198, 202], "column_nam": 182, "output_path": [182, 191], "join": [182, 191], "result_path": [182, 191], "test2": 182, "cv": [182, 191], "augmenter_argu": [182, 191], "medium": [182, 191, 217], "data_aug": [182, 191], "raw_dataset": [182, 191], "load_dataset": [182, 191], "data_fil": [182, 191], "delimit": [182, 191, 216], "aim": [182, 197, 198, 200], "opportun": 182, "hw": 182, "sw": 182, "neural_engin": [182, 195, 196, 197, 198, 199, 201, 204, 206, 216], "reduct": [182, 185, 211, 212], "bit": [182, 194, 207, 208, 213, 222], "enhanc": [182, 211], "enabl": [182, 194, 205, 207, 214, 215], "accommod": 182, "budget": 182, "tradeoff": [182, 210], "dynamic_length_config": 182, "paper": 182, "quala": [182, 193], "minilm": [182, 193], "fast": 182, "cpu": [182, 191, 195, 203, 205, 207, 209, 214, 215, 220], "high": [182, 195, 206, 213], "assembli": [182, 206, 211, 213, 214], "proxi": [182, 206], "hpp": [182, 199, 206, 216], "operator_desc": [182, 206], "op_desc": [182, 206, 209], "ker_kind": [182, 206, 209], "ker_prop": [182, 206, 209], "eng_kind": [182, 206, 209], "ts_desc": [182, 206, 209], "op_attr": [182, 206, 208, 209, 212], "sparse_matmul_desc": [182, 206], "spmm_desc": [182, 206], "sparse_matmul": [182, 214], "spmm_kern": [182, 206], "std": [182, 206, 208, 209], "void": [182, 203, 206, 208, 209], "rt_data": [182, 206], "data0": [182, 206], "data1": [182, 206], "data2": [182, 206], "data3": [182, 206], "data4": [182, 206], "compat": 182, "processor": [182, 193, 205, 215], "xeon": [182, 193, 207, 215, 222], "scalabl": [182, 193, 208], "formerli": [182, 206], "cascad": 182, "lake": 182, "icelak": 182, "futur": [182, 201, 208, 209, 214], "sapphir": 182, "rapid": 182, "cento": 182, "ubuntu": [182, 205, 215], "04": [182, 193, 205, 215], "ipex": [182, 222], "13": [182, 205, 210, 215], "window": [182, 196], "blog": 182, "mleffici": 182, "dec": 182, "nov": 182, "coher": 182, "novemb": 182, "alibaba": 182, "deep": [182, 191, 201, 209, 219, 222], "learn": [182, 191, 201, 209, 219, 222], "purif": 182, "onc": [182, 198], "pre": [182, 200], "inherit": [185, 192, 197, 203, 220, 221, 222], "compar": [185, 193, 207, 216, 222], "pytorchbenchmarkargu": 185, "executorbenchmarkargu": 185, "model_id_fp32": 185, "sst": [185, 191, 193, 220], "english": [185, 193, 220], "model_id_int8": 185, "benchmark_arg": 185, "32": [185, 194, 195, 205, 210, 211, 212, 213, 214, 215, 216], "multi_process": 185, "only_pretrain_model": 185, "seq": [185, 195, 212], "time": [185, 198, 207, 208, 210, 211, 212, 213, 216, 217, 222], "finetu": 185, "017": 185, "021": [185, 205], "029": 185, "013": [185, 205], "mb": [185, 193], "255": [185, 205, 222], "45": [185, 205, 215], "engl": 185, "65": [185, 215], "026": 185, "md": [185, 198, 201], "model_nam": [185, 220], "008": 185, "012": 185, "023": 185, "003": 185, "004": 185, "466": 185, "132": [185, 215], "53": [185, 214, 215], "librari": [187, 208, 209, 224], "extens": [191, 196, 197, 219, 220, 221], "tool": [191, 193, 198, 206, 216], "machin": [191, 216], "project": 191, "integr": 191, "lab": 191, "dev": 191, "test1": 191, "asserttru": 191, "len": [191, 195, 197, 204, 212], "json": 191, "column": [191, 207, 211, 213, 221], "conduct": 191, "cuda": 191, "keyboardaug": 191, "ocraug": 191, "spellingaug": 191, "contextualwordembsforsentenceaug": 191, "condit": [191, 199, 200], "xl": 191, "xlnet": [191, 193], "ctrl": [191, 193], "enough": [191, 222], "rescu": 191, "effect": [191, 197, 216], "eo": 191, "open": [191, 195, 201], "w": [191, 198, 199, 207], "fw": 191, "clm": [191, 193], "train_fil": 191, "validation_fil": 191, "model_dir": 191, "python3": [191, 196], "run_clm": 191, "do_train": 191, "do_ev": 191, "overwrite_output_dir": 191, "secondli": 191, "training_set": 191, "scenario": 191, "line": [191, 197, 199, 207, 212, 213, 217], "stop": [191, 222], "k": [191, 199, 206, 208, 210, 211, 212, 213, 215, 216], "p": 191, "repetit": 191, "penalti": 191, "wide": [192, 209, 222], "larg": [192, 193, 204, 205, 207, 212], "signific": 192, "expens": 192, "deploi": 192, "power": [192, 193], "mobil": 192, "shown": [192, 199, 211, 213], "workflow": [192, 199, 201, 212], "take": [192, 198, 200, 203, 208, 213], "produc": [192, 213], "instruct": [192, 200, 208, 210, 213, 214, 216, 222], "besid": [192, 209], "often": 192, "guid": [192, 197, 209, 210], "patient": 192, "compact": 192, "agnost": 192, "resourc": 192, "limit": [192, 211], "summar": [192, 193], "usual": [192, 200, 207, 213, 222], "1x1": [192, 199], "tune_metr": [192, 221], "metric_": 192, "knowledgeloss": 192, "layer_map": 192, "classifi": 192, "loss_weight_ratio": 192, "distillation_conf": 192, "distilled_model": 192, "phase": [192, 221], "intermediatelayersloss": 192, "knowledgedistillationloss": 192, "meanwhil": [193, 207], "posttrainingdynam": [193, 194, 222], "mlm": 193, "wikitext": 193, "plm": 193, "eleutherai": 193, "neo": 193, "125m": 193, "sshleifer": 193, "wip": [193, 210], "ehdwns1516": 193, "uncased_swag": 193, "swag": 193, "squad": 193, "question": [193, 210], "lvwerra": 193, "pegasu": 193, "samsum": 193, "textattack": [193, 201], "mrpc": [193, 201, 202], "echarlaix": 193, "acc91": 193, "d37": 193, "hybrid": 193, "elast": 193, "conll03": 193, "conll2003": 193, "t5": 193, "small": [193, 199, 212], "translat": 193, "wmt16": 193, "helsinki": 193, "opu": 193, "mt": 193, "en": 193, "ro": 193, "quantizationawaretrain": [193, 194], "No": 193, "maskinun": 193, "datatyp": [193, 194], "f1": [193, 218], "gflop": [193, 215, 217], "speedup": 193, "415": [193, 205], "47": [193, 205, 215], "88": [193, 205, 214, 215], "58": [193, 215], "56": [193, 214, 215], "35": [193, 205, 215], "1x": 193, "la": 193, "minilmv2": 193, "115": 193, "89": [193, 215], "28": [193, 205, 210, 215], "16": [193, 194, 195, 205, 210, 211, 213, 214, 215, 222], "99": [193, 215], "76": [193, 214, 215], "33x": 193, "269": 193, "253": 193, "252": [193, 214], "202": 193, "104": 193, "34": [193, 215], "87": [193, 215], "44": [193, 198, 205, 214, 215], "49": [193, 204, 205, 215], "94x": 193, "84": [193, 215], "85": [193, 205, 215], "21x": 193, "315": 193, "251": [193, 215], "242": [193, 205, 215], "159": [193, 214], "142": [193, 215], "33": [193, 215], "86": [193, 215], "68": [193, 214, 215], "41": [193, 205, 215], "55": [193, 214, 215], "82x": 193, "amount": 193, "obtain": [193, 198], "torchprofil": 193, "platinum": [193, 205, 215], "8280": 193, "unstructur": [193, 221], "group": [193, 197, 204, 212, 213, 221], "lasso": [193, 221], "nbsp": [193, 205, 215], "90": [193, 198, 205], "pruneofa": 193, "googl": 193, "wikipedia": 193, "prajjwal1": 193, "approch": 193, "patternlock": [193, 221], "bhadresh": 193, "savani": 193, "emot": 193, "fac": 193, "mini": [193, 198, 202, 205], "gchhablani": 193, "philschmid": 193, "l6": 193, "h384": 193, "moshew": [193, 202], "squadv1": 193, "80": [193, 198, 205, 215], "1x4": [193, 213], "desigh": 194, "bfloat": 194, "fetch": [194, 207], "flag": 194, "enable_bf16": 194, "bfloat16": 194, "qlinear": [194, 201], "u8s8": 194, "u8u8": 194, "highli": 194, "enable_executor": 194, "multi": [195, 198, 199], "bert_model": 195, "30522": 195, "1024": [195, 198, 199, 215, 216], "125018112": 195, "dst_shape": [195, 197, 203], "slightli": 195, "read": 195, "activ": [195, 201, 202, 207, 210, 211, 222], "throught": 195, "numactl": 195, "command": [195, 197, 201, 217], "bind": 195, "core": [195, 205, 207, 215, 217], "omp_num_thread": 195, "session": 195, "want": [195, 197, 198, 199, 201, 204, 207, 208, 209, 216, 218], "close": 195, "glog_minloglevel": [195, 202], "again": 195, "nerual": 195, "show": [195, 197, 200, 201, 204, 210, 212], "actual": [195, 197], "cc": 195, "cmakelist": 195, "reus": 195, "mkdir": [195, 196, 206, 214, 216], "engine_integr": 195, "innersourc": 195, "ai": 195, "xtransform": 195, "submoudl": 195, "cp": 195, "src": [195, 209, 213, 216], "nlp_executor": 195, "neural_engine_exampl": 195, "ne": 195, "root": 195, "ne_root": 195, "project_source_dir": 195, "link": [195, 203, 221], "lib": 195, "add_execut": 195, "target_include_directori": 195, "privat": [195, 203, 207, 208, 209], "boost_inc_dir": 195, "target_link_librari": 195, "cmake_thread_libs_init": 195, "gflag": 195, "cmake": [195, 196, 206, 214, 216], "j": [195, 196, 197, 206, 211, 213, 214, 216], "linux": 196, "gcc": 196, "repo_path": 196, "dpython_execut": 196, "dne_with_sparselib": [196, 216], "neural_engine_bin": 196, "neural_engine_pi": [196, 199], "cpython": 196, "37m": 196, "x86_64": 196, "gnu": 196, "libkernellib": 196, "libneural_engin": 196, "pure": [196, 209], "certain": [197, 204], "simplifi": [197, 200], "attach": [197, 204], "distilbert_bas": 197, "quick": 197, "repo": [197, 216], "instal": [197, 226], "These": [197, 200, 204], "roughli": 197, "divid": [197, 204, 207, 211, 217], "categori": [197, 198], "father": 197, "keep_dim": 197, "axi": [197, 198, 212], "ax": [197, 212], "come": 197, "rewrit": 197, "_attr": 197, "successfulli": [197, 204], "forget": [197, 200, 203], "reinstal": 197, "enter": 197, "you_work_dir": 197, "noth": [197, 204], "wrong": [197, 204], "anoth": [197, 200, 214], "correctli": 197, "distil_bert_bas": 197, "pattern_mapping_config": 197, "becaus": [197, 208, 210, 222], "even": [197, 207], "delv": 197, "recogn": 197, "doc": [197, 200, 208, 213], "put": [197, 200], "collect": [197, 198, 222], "namedtupl": 197, "__call__": 197, "retriev": 197, "equival": [197, 213], "supported_pattern": 197, "appropri": [197, 208], "influenc": [197, 200], "arbitrari": 197, "pattern_dict": 197, "new_node_nam": 197, "ret_old_nod": 197, "talk": 197, "epsilon": 197, "denomin": 197, "numer": [197, 222], "stabil": 197, "_set_attr": 197, "ln_node_idx": 197, "meet": [197, 210, 213], "finish": [197, 200, 202], "yourself": [197, 204], "analyz": 198, "let": [198, 203, 210], "readm": [198, 201], "run_executor": [198, 202], "input_model": [198, 201, 202], "model_and_token": [198, 201, 202], "seq_len": [198, 202, 212, 216], "Of": [198, 204], "cours": [198, 204], "proflil": 198, "trace": 198, "latanc": 198, "perf": [198, 213, 216, 217], "perfrom": 198, "chrome": 198, "view": [198, 207], "wai": [198, 199, 200, 204, 207, 209, 212, 214], "tell": [198, 200, 208, 209], "inst": 198, "And": [198, 199, 200, 201, 204, 208], "count": [198, 203], "pref": 198, "semi": 198, "4x1": [198, 207, 213], "70": [198, 205], "256x256": [198, 216], "settabl": 198, "256x1024": 198, "1024x256": 198, "dens": [198, 199, 204, 213, 216, 221], "post": [198, 216], "gelu_tanh": [198, 203], "add_37": 198, "116": [198, 215], "641": 198, "00": 198, "075": 198, "0375": 198, "comparison": [198, 213], "entir": [198, 207, 221], "185": 198, "801": 198, "693": 198, "366": 198, "content": 198, "part1": [198, 203], "modif": 198, "xlsx": 198, "titl": 198, "model_infer": 198, "friendli": 198, "000": 198, "wall": 198, "durat": 198, "17": [198, 205, 210, 215], "138": 198, "iteration4": 198, "726": 198, "per": [198, 205, 208, 210, 215, 217, 221], "phrase": 198, "0m": 198, "permut": [198, 210, 212, 216], "src1": [198, 208, 216], "perm": [198, 212], "add_284": 198, "028": [198, 215], "044": 198, "reshape_tim": 198, "004m": 198, "forward_tim": 198, "044m": 198, "input_tensor_nam": 198, "matmul_357": 198, "matmul_358": 198, "matmul_346": 198, "input_typ": 198, "f32": [198, 203], "input_shap": [198, 199, 216], "output_tensor_nam": 198, "output_typ": 198, "output_shap": 198, "append_op": 198, "src1_perm": 198, "try": [199, 222], "pictur": [199, 207], "bring": [199, 211, 213], "mainli": 199, "merg": [199, 204], "qkv": [199, 201], "off": 199, "model_path": 199, "isa": [199, 208, 213, 214], "easi": [199, 201], "mix": 199, "int8_model_path": 199, "shape_0": 199, "shape_1": 199, "shape_2": 199, "consid": [199, 207, 209, 210], "enlarg": 199, "subsequ": 199, "remark": 199, "dnnl": [199, 203], "sparselib": [199, 206], "micro": [199, 207, 211, 213], "oc": [199, 216], "mk": 199, "kn": 199, "nhwc": 199, "nxhxw": 199, "h": 199, "nk": 199, "km": 199, "mmkmb": 199, "mmxmb": 199, "fulfil": 199, "along": [199, 211, 212, 213], "omp": 199, "unrol": [199, 211], "know": [199, 210], "disk": [199, 201], "dp": 199, "executionopt": 199, "enable_op_tun": 199, "fix": [199, 210], "engine_dispatch_t": 199, "workspac": 199, "row": [199, 210, 213, 221], "rest": [199, 200, 204, 212, 213], "hash": [199, 208], "size_t": [199, 209], "kernel_config": [199, 216], "kernel_nam": [199, 216], "3025159985633461085": 199, "40": [199, 205], "14124194128933833351": 199, "thing": 199, "affect": 199, "warmup": 199, "simul": [199, 213, 214], "real": [199, 212, 214], "warmup_it": 199, "num_iter": 199, "dispatch_table_file_root": 199, "file_root": 199, "script": [199, 201], "prevent": 199, "imprecis": 199, "purpos": [200, 204, 208], "realiz": 200, "suppli": [200, 204], "recognit": [200, 204], "embeddings_reshap": 200, "said": 200, "thought": 200, "st": 200, "nd": 200, "copi": [200, 212], "greater": [200, 218, 219], "reason": [200, 203], "sent": 200, "written": 200, "might": 200, "phenomenon": 200, "correct": [200, 204, 212], "Its": 200, "similar": [200, 208, 210, 211, 212, 221], "situat": 200, "nod": 200, "leav": [200, 212, 213], "old_node_index": 200, "variabl": [200, 203, 216], "_get_pattern_info": 200, "maintain": 200, "becom": [200, 213], "_create_out_pattern": 200, "_replace_pattern": 200, "imag": [201, 204, 210, 213], "emitt": 201, "netron": 201, "notic": [201, 208, 212], "s8": [201, 208, 209, 216], "u8": [201, 203, 209, 216], "bash": [201, 202], "prepare_model": [201, 202], "sh": [201, 202, 217], "task_nam": [201, 202], "ptq": 201, "much": 201, "ir_path": 201, "focu": [202, 212, 218], "nc_folder": 202, "deepengin": 202, "distilbert_base_uncased_mrpc": 202, "conda": 202, "env": 202, "prepare_dataset": 202, "shell": 202, "tokenizer_dir": 202, "data_dir": 202, "member": [203, 208, 209], "geluoper": 203, "destructor": 203, "onednn": 203, "primit": [203, 206], "oneapi": [203, 214], "io": 203, "html": 203, "public": [203, 208, 209], "shared_ptr": 203, "operatorconfig": 203, "virtual": [203, 208, 209], "algorithm_": 203, "eng_": 203, "eltwise_forward": 203, "gelu_p_": 203, "src_m_": 203, "dst_m_": 203, "attrs_map": 203, "operator_conf_": 203, "adjust": [203, 222], "becuas": 203, "descriptor": [203, 206, 216], "src_shape": 203, "dst": [203, 208, 209, 210, 211, 213, 216], "dst_tensor_ptr": 203, "set_shap": 203, "stride": [203, 207], "src_stride": 203, "getstrid": 203, "dst_stride": 203, "desc": [203, 208, 209], "src_md": 203, "data_typ": [203, 208, 209, 216], "dst_md": 203, "part2": 203, "gelu_algorithm": 203, "gelu_erf": 203, "eltwise_gelu_erf": 203, "eltwise_gelu_tanh": 203, "gelu_d": 203, "prop_kind": 203, "forward_infer": [203, 209], "primitive_desc": 203, "gelu_pd": 203, "unrefernc": 203, "reduc": [203, 207, 208, 211, 213, 222], "manag": 203, "strictli": 203, "alia": 203, "src_data": 203, "dst_data": 203, "mutable_data": 203, "data_ptr": 203, "stream": 203, "set_data_handl": 203, "const_cast": 203, "reinterpret_cast": 203, "memory_args_": 203, "dnnl_arg_src": 203, "dnnl_arg_dst": 203, "unref": 203, "unref_tensor": 203, "especi": [203, 213], "int8_lut_optim": 203, "int8_lut_acc_test": 203, "set_dtyp": 203, "register_operator_class": 203, "satisfi": 204, "rule": 204, "recruit": 204, "ln_pattern": 204, "grow": 204, "concis": 204, "intuit": 204, "choos": 204, "prefer": [204, 212], "longer": 204, "ones": 204, "op_type1": 204, "op_type2": 204, "type1": 204, "type2": 204, "separ": [204, 213], "elig": 204, "a_node_name_1": 204, "b_node_name_1": 204, "c_node_name_1": 204, "a_node_name_2": 204, "b_node_name_2": 204, "c_node_name_2": 204, "a_node_name_n": 204, "b_node_name_n": 204, "c_node_name_n": 204, "bert_large_model_path": 204, "layer_0": 204, "layer_1": 204, "layer_2": 204, "afterward": 204, "volatil": 204, "incorrect": 204, "outcom": 204, "Or": 204, "exactli": 204, "screen": 204, "occur": [204, 207], "alreadi": 204, "moment": 204, "varianc": 204, "batchnorm": 204, "mul_1": 204, "mul_2": 204, "add_1": 204, "07": [205, 215], "8375c": [205, 215], "aw": [205, 215], "c6i": [205, 215], "12xlarg": [205, 215], "vari": [205, 215], "factor": [205, 215], "visit": [205, 215], "www": [205, 215], "sequencelength": 205, "throughput": 205, "sec": 205, "batchsiz": 205, "2652": 205, "36": [205, 215], "513": 205, "lt": [205, 215], "50m": 205, "2181": 205, "43": [205, 215], "628": 205, "1719": 205, "91": [205, 215], "75": [205, 215], "1487": [205, 215], "1220": 205, "39": [205, 215], "143": 205, "1304": 205, "46": [205, 215], "066": 205, "1102": [205, 215], "870": 205, "487": 205, "750": 205, "82": [205, 214, 215], "690": [205, 215], "188": 205, "910": [205, 215], "921": [205, 215], "729": 205, "71": [205, 214, 215], "619": 205, "38": [205, 214, 215], "821": [205, 215], "499": 205, "933": 205, "429": [205, 214], "936": [205, 215], "680": 205, "318": [205, 215], "557": 205, "262": 205, "467": 205, "589": 205, "405": 205, "339": 205, "473": 205, "119": [205, 215], "389": 205, "945": [205, 215], "360": 205, "274": 205, "843": 205, "259": [205, 214, 215], "442": 205, "241": 205, "364": 205, "016": [205, 215], "303": 205, "266": 205, "05": [205, 215], "221": 205, "973": 205, "112": [205, 215], "349": 205, "938": [205, 215], "275": [205, 214], "614": 205, "217": 205, "37": [205, 215], "039": 205, "301": 205, "166": 205, "033": 205, "320": 205, "769": 205, "263": 205, "724": [205, 215], "207": 205, "819": [205, 215], "181": 205, "979": [205, 215], "74": [205, 215], "235": 205, "63": [205, 215], "091": 205, "51": [205, 215], "914": [205, 215], "698": [205, 215], "905": [205, 215], "8972": 205, "076": [205, 215], "20m": 205, "7192": 205, "19": [205, 210, 215], "906": 205, "5482": 205, "509": 205, "4808": 205, "952": 205, "3678": 205, "409": 205, "4750": 205, "975": [205, 215], "3647": 205, "867": 205, "2921": 205, "587": [205, 215], "2576": 205, "18": [205, 210, 215], "768": [205, 215], "2131": [205, 215], "913": [205, 215], "2804": 205, "096": 205, "2263": 205, "037": 205, "1938": 205, "756": [205, 215], "1581": 205, "15": [205, 210, 211, 213, 215], "1409": 205, "015": 205, "2116": 205, "113": 205, "1777": 205, "972": [205, 215], "1474": 205, "392": 205, "1278": 205, "1137": 205, "752": 205, "1594": 205, "124": 205, "1347": [205, 215], "1126": 205, "993": [205, 215], "258": 205, "890": [205, 215], "877": [205, 215], "1319": 205, "1086": 205, "931": [205, 215], "545": 205, "833": 205, "332": [205, 215], "747": [205, 215], "141": 205, "1106": [205, 215], "31": [205, 210, 211, 215], "924": 205, "446": 205, "719": 205, "633": 205, "501": 205, "816": 205, "961": 205, "549": 205, "807": 205, "868": [205, 215], "701": [205, 215], "117": 205, "613": 205, "618": 205, "515": 205, "484": 205, "75384": 205, "989": 205, "1m": 205, "55628": 205, "917": 205, "49120": 205, "957": [205, 215], "41598": 205, "39218": 205, "31211": 205, "788": [205, 215], "28399": 205, "848": 205, "24910": 205, "966": 205, "20505": 205, "18575": 205, "865": 205, "25485": 205, "987": 205, "17468": 205, "16771": 205, "971": [205, 215], "16004": 205, "996": [205, 215], "13381": 205, "894": [205, 215], "13990": 205, "863": [205, 215], "13154": 205, "12535": 205, "12102": 205, "998": 205, "8426": [205, 215], "8736": 205, "8282": 205, "967": 205, "6659": 205, "898": [205, 215], "6477": 205, "6290": 205, "974": [205, 215], "8598": 205, "6449": 205, "935": [205, 215], "6263": [205, 215], "965": [205, 215], "6080": 205, "988": 205, "3684": 205, "817": [205, 215], "6246": 205, "978": 205, "6374": 205, "947": [205, 215], "6026": 205, "3300": [205, 215], "926": 205, "3226": 205, "6221": 205, "958": 205, "6322": 205, "6081": 205, "985": [205, 215], "3368": 205, "3264": 205, "distillbert": 205, "15460": 205, "296": 205, "10m": 205, "13129": 205, "363": 205, "11323": 205, "578": [205, 215], "10072": 205, "599": 205, "8689": 205, "7901": 205, "205": [205, 215], "6737": 205, "562": 205, "5440": 205, "904": [205, 215], "4920": 205, "786": [205, 215], "4460": 205, "053": 205, "5280": 205, "179": 205, "4339": 205, "244": [205, 214], "3634": [205, 215], "928": 205, "3255": 205, "211": [205, 215], "2928": 205, "197": [205, 215], "3681": 205, "527": [205, 215], "2965": [205, 215], "106": [205, 215], "2741": 205, "862": [205, 215], "2351": 205, "2150": 205, "282": 205, "2918": 205, "316": 205, "2505": [205, 215], "602": 205, "2010": [205, 215], "995": 205, "1872": 205, "609": [205, 215], "2409": 205, "983": 205, "1993": 205, "1671": [205, 215], "627": 205, "1484": 205, "131": 205, "1342": [205, 215], "1910": 205, "456": [205, 215], "1659": 205, "687": 205, "1293": 205, "245": [205, 215], "1230": 205, "798": 205, "1091": 205, "261": 205, "1627": 205, "908": 205, "1397": 205, "684": 205, "1130": 205, "1081": 205, "353": 205, "982": [205, 215], "187": [205, 214], "manufactur": [205, 215], "amazon": [205, 215], "ec2": [205, 215], "bio": [205, 215], "1021": [205, 215], "microcod": [205, 215], "0xd000331": [205, 215], "irq": [205, 215], "balanc": [205, 215], "xeonplatinum": 205, "90ghz": [205, 215], "frequenc": [205, 215, 221], "9ghz": [205, 215], "5ghz": [205, 215], "thread": 205, "socket": [205, 215], "numa": [205, 215], "turbo": [205, 215], "frequencygovern": [205, 215], "workdir": 206, "dne_with_test": 206, "ON": [206, 216], "ut": [206, 209], "dne_with_sparselib_onli": [206, 216], "dne_with_sparselib_benchmark": [206, 216], "test_spmm_vnni_kernel": 206, "box": 206, "profl": [206, 214], "section": [206, 213, 214], "unit": 206, "xbyak": [206, 209], "codegener": 206, "convent": 206, "xxxx": 206, "brgemm": 206, "isom": 206, "logic": [206, 214], "spmm": [207, 212, 216], "vnni": [207, 210, 212, 216, 222], "deeplearn": 207, "matrix": [207, 210, 211, 212, 213, 216, 221], "multipli": [207, 213, 222], "adopt": [207, 211, 213], "modern": 207, "spatial": 207, "program": 207, "64byte": 207, "organ": 207, "associ": 207, "access": [207, 211], "align": [207, 209, 213], "b1": 207, "b2": 207, "avx512": [207, 210, 222], "simd": [207, 208, 211], "width": [207, 208, 211, 222], "evenli": 207, "discontinu": 207, "fulli": [207, 213], "worst": 207, "veri": [207, 209], "miss": [207, 213], "frequent": 207, "introduc": [207, 208, 209, 210, 212, 213, 222], "destin": [207, 211, 212], "l1": 207, "l2": 207, "perhap": 207, "mxk": [207, 216], "bxm": 207, "xk": 207, "bxkxm": 207, "nxm": 207, "2d": [207, 216], "respons": 207, "frac": [207, 212], "binaryop": 208, "injector": [208, 209], "dl": 208, "changeabl": 208, "operand": [208, 211], "src2": [208, 216], "seri": [208, 210, 216], "horizont": 208, "overhead": [208, 212, 213], "move": 208, "binaryop_injector": 208, "postop": [208, 209, 216], "eltwiseop": [208, 209], "quit": 208, "eltwise_injector": [208, 209], "escap": [208, 209], "lut": [208, 209, 216], "compute_vector": 208, "expos": [208, 209], "arithmet": 208, "brows": 208, "dt": [208, 209], "vpaddb": 208, "vaddp": 208, "binaryop_attr": 208, "unlik": 208, "set_binaryop_list": 208, "struct": [208, 209], "what": [208, 209, 212, 221], "ptr": [208, 209, 214], "static_addr": 208, "normal": 208, "zp": 208, "channel": [208, 211, 213, 221], "dequant": [208, 209, 216], "free": [208, 216], "addr": 208, "binaryop_alg": 208, "uint8_t": [208, 209], "undef": [208, 209], "per_channel_qu": 208, "per_channel_dequ": 208, "op_alg": [208, 209], "op_dt": 208, "alg": 208, "nullptr": 208, "set_scal": 208, "set_zp": 208, "binaryop_list_": 208, "binaryop_list": 208, "inlin": 208, "get_binaryop_list": 208, "binary_injector_init": 208, "set_mask": 208, "binari": [208, 209, 216], "reg64": [208, 209], "zmm": [208, 209, 211, 213], "get_addr": 208, "broadcast": [208, 211, 213, 214], "scalar": 208, "enable_mask": 208, "vector_comput": [208, 209], "bianryop": 208, "comput_vector": 208, "wrapper": 208, "jit_binary_injector": 208, "addr_typ": 208, "jit_gener": [208, 209], "opmask": [208, 209], "reg": [208, 209], "mov": [208, 214], "addr_ptr": 208, "zmm_src1": 208, "regexp": 208, "step1": [208, 209], "binary_injector": 208, "step2": [208, 209], "via": [208, 210, 214], "data_param": 208, "binaryop_addr": 208, "param_": [208, 209], "append_loop_len": 208, "process_col": 208, "zmm_byte_s": 208, "get_data_s": 208, "input_dt": [208, 216], "offset_exp": 208, "thread_elt_offset": 208, "bianryop_attr_list": 208, "layernorm_ba_desc": 208, "append_vec": 208, "binary_add": 208, "eltwis": 209, "tradit": 209, "obvious": 209, "useless": 209, "idea": [209, 213, 221], "who": 209, "wise": [209, 216], "exp": [209, 216], "postop_attr": 209, "algo": 209, "aplha": 209, "zero": [209, 211, 213, 221], "sacl": 209, "postop_alg": 209, "int8_lut": 209, "postop_typ": 209, "mathemat": 209, "satur": 209, "round": [209, 222], "unus": 209, "\u03b1x": 209, "\u03b2": 209, "le": 209, "gt": 209, "apply_postops_list_": 209, "ker_kind_": 209, "jd": 209, "kernel_kind": 209, "ker_prop_": 209, "kernel_prop": 209, "eng_kind_": 209, "engine_kind": 209, "impl_nthr_": 209, "ts_descs_": 209, "attrs_": 209, "tensor_desc": 209, "unordered_map": 209, "apply_postops_list": 209, "omp_get_max_thread": 209, "omp_get_num_proc": 209, "eltwise_injector_init": 209, "chian": 209, "escape_reg": 209, "escape_eras": 209, "eras": 209, "prepare_t": 209, "zmm_src": 209, "postop_idx": 209, "reg_typ": 209, "reg_idx": 209, "step0": 209, "eltwiseop_param_t": 209, "element_num": 209, "jit_eltwiseop_t": 209, "ssd": [209, 216], "assign_reg": 209, "eltwiseop_kd_t": 209, "op_desc_": 209, "params_": 209, "remain_task_mask": 209, "scratch_": 209, "r10": 209, "reg_src": 209, "addr_src": 209, "r15": [209, 214], "addr_dst": 209, "r14": [209, 214], "reg_param": 209, "rdi": [209, 214], "remain_element_num": 209, "rsi": 209, "getidx": 209, "alloc": 209, "special": [209, 212], "rcx": 209, "rdx": 209, "rsp": 209, "step3": 209, "preambl": 209, "load_param": 209, "vmovup": [209, 214], "postambl": 209, "fp32_gelu_attr": 209, "bf16_gelu_attr": 209, "gen": 209, "push_back": 209, "gen_cas": 209, "data0_desc": 209, "postop_list": 209, "fp32_gelu": [209, 216], "fp32_exp": 209, "mask_mock1": 209, "reg64_mock1": 209, "zmm_mock1": 209, "fp32_exp_attr": 209, "data1_desc": 209, "bf16_gelu": 209, "bf16_exp": [209, 216], "bf16_exp_attr": 209, "dt1op1": 209, "dt2op2": 209, "hase": 209, "get_true_data": 209, "rf_data": 209, "tmp": [209, 210], "your_kernel_log": 209, "apply_postop_list": 209, "unit_test_util": 209, "tdpbf16p": 210, "16x32": 210, "32x16": 210, "FOR": [210, 211, 213], "TO": 210, "colsb": 210, "byte": [210, 213], "col": 210, "endfor": [210, 211, 213], "write_row_and_zero": 210, "zero_upper_row": 210, "zero_tileconfig_start": 210, "layout": [210, 212], "successor": 210, "1x16": [210, 213], "concaten": [210, 213, 216], "intrins": 210, "offlin": [210, 213, 222], "tileloadd": 210, "good": 210, "vmovdqu32": 210, "consum": 210, "altern": [210, 213], "lot": 210, "disast": 210, "16x1": [210, 212], "impact": 210, "experi": [210, 213], "fly": 210, "__m512i": 210, "_mm512_set_epi16": 210, "29": [210, 215], "27": [210, 215], "26": [210, 214, 215], "25": [210, 215, 216], "23": [210, 215], "22": [210, 215], "21": [210, 215], "__m256i": 210, "lo": 210, "_mm256_loadu_epi": 210, "li": 210, "vec": 210, "_mm512_inserti32x8": 210, "_mm512_castsi256_si512": 210, "_mm512_permutexvar_epi16": 210, "_mm512_storeu_epi32": 210, "vfmadd": 211, "vfmadd231p": [211, 214], "degre": 211, "parallel": [211, 213, 216], "conting": 211, "act": 211, "bsc": 211, "variant": 211, "bsr": 211, "openmp": 211, "over": [211, 212], "thu": [211, 222], "relief": 211, "bottleneck": 211, "microkernel": 211, "peripher": 211, "decid": [211, 222], "implicit": 211, "p2031": [212, 216], "2013": 212, "avx512f": [212, 216], "noperm": [212, 216], "p1302": [212, 216], "p2013": [212, 216], "equat": [212, 222], "dot": [212, 222], "rm": 212, "q": 212, "v": 212, "qk": 212, "textunderscor": 212, "head_num": [212, 216], "head_siz": [212, 216], "nativ": 212, "sparelib": 212, "physic": 212, "axis": 212, "conceptu": 212, "head_nun": 212, "perm2031": 212, "perm2013": 212, "perm1302": 212, "concept": [212, 213], "lh": 212, "rh": 212, "float32": [212, 222], "figur": [212, 213], "illustr": 212, "inner": 212, "bodi": 212, "accumul": [212, 213], "16x16": 212, "drawn": 212, "lighter": 212, "cell": [212, 213], "uint8": [212, 222], "respectfulli": 212, "vnni_noperm_p2013_p1302": 212, "transpose_4b_8x8": 212, "legend": 212, "explan": 212, "offset": 212, "contigu": 212, "ellipsi": 212, "thinner": 212, "border": 212, "bolder": 212, "color": [212, 213], "16x32x16": 212, "lead": [212, 213], "suboptim": 212, "temporari": 212, "piec": 212, "turn": 212, "abl": [212, 222], "boost": 212, "twofold": 212, "unifi": 212, "roll": 212, "back": 212, "workload": 212, "four": 213, "adjac": 213, "unsign": [213, 216], "sign": [213, 222], "tmp1": 213, "zeroextend16": 213, "signextend16": 213, "tmp2": 213, "tmp3": 213, "tmp4": 213, "dword": [213, 214], "capabl": 213, "benefit": [213, 222], "transposit": 213, "discuss": 213, "typic": 213, "sai": 213, "4x4": 213, "4x16": 213, "pick": 213, "mxkxn": 213, "problem": 213, "densiti": 213, "fma": 213, "bubbl": 213, "16x4": 213, "highlight": 213, "4x": 213, "talent": 213, "solut": 213, "smart": 213, "gui": [213, 214], "swizzl": 213, "workaround": 213, "investig": 213, "unfortun": 213, "difficulti": 213, "bad": 213, "cost": 213, "harm": 213, "2x1": 213, "conclus": 213, "against": 213, "brief": 214, "sparse_lib_verbos": 214, "sparselib_verbos": 214, "runtim": [214, 216, 222], "nthr": 214, "224": [214, 215], "exec": 214, "shape_256_256_128": 214, "4658": [214, 215], "56982": 214, "itt": 214, "dne_with_sparselib_vtun": 214, "opt": 214, "latest": 214, "manual": 214, "dcmake_vtune_hom": 214, "sparse_lib_vtun": 214, "ssh": 214, "analys": 214, "verifi": 214, "sparse_lib_dump": 214, "xed64": 214, "click": 214, "xdi": 214, "push": 214, "rbx": 214, "rbp": 214, "4154": 214, "r12": 214, "4155": 214, "r13": 214, "4156": 214, "4157": 214, "dataxf": 214, "bd00040000": 214, "ebp": 214, "0x400": 214, "4c8b3f": 214, "qword": 214, "4c8b7708": 214, "0x8": 214, "4c8b6f10": 214, "0x10": 214, "1a": 214, "avx512evex": 214, "62f17d48efc0": 214, "vpxord": 214, "zmm0": 214, "62f15d48efe4": 214, "zmm4": 214, "62513d48efc0": 214, "zmm8": 214, "2c": 214, "62511d48efe4": 214, "zmm12": 214, "62f17548efc9": 214, "zmm1": 214, "62f15548efe": 214, "zmm5": 214, "3e": 214, "62513548efc9": 214, "zmm9": 214, "62511548efe": 214, "zmm13": 214, "4a": 214, "62f16d48efd2": 214, "zmm2": 214, "50": 214, "62f14d48eff6": 214, "zmm6": 214, "62512d48efd2": 214, "zmm10": 214, "5c": 214, "62510d48eff6": 214, "zmm14": 214, "62": [214, 215], "62c17c481006": 214, "zmm16": 214, "zmmword": 214, "62c17c48104e01": 214, "zmm17": 214, "0x40": 214, "6f": 214, "62c17c48105602": 214, "zmm18": 214, "0x80": 214, "62427d48183f": 214, "vbroadcastss": 214, "zmm31": 214, "7c": 214, "vfma": 214, "62927d40b8c7": 214, "62927540b8cf": 214, "62926d40b8d7": 214, "8e": 214, "62427d48187f04": 214, "95": [214, 215], "62927d40b8e7": 214, "9b": 214, "62927540b8ef": 214, "a1": 214, "62926d40b8f7": 214, "a7": 214, "62427d48187f08": 214, "0x20": 214, "ae": 214, "62127d40b8c7": 214, "b4": 214, "62127540b8cf": 214, "ba": [214, 216], "62126d40b8d7": 214, "c0": 214, "62427d48187f0c": 214, "0x30": 214, "c7": 214, "62127d40b8e7": 214, "62127540b8ef": 214, "62126d40b8f7": 214, "d9": 214, "62c17c48104603": 214, "0xc0": 214, "e0": 214, "62c17c48104e04": 214, "0x100": 214, "e7": 214, "62c17c48105605": 214, "0x140": 214, "ee": 214, "62427d48187f01": 214, "0x4": 214, "f5": 214, "fb": 214, "101": 214, "107": 214, "62427d48187f05": 214, "0x14": 214, "10e": 214, "114": 214, "11a": 214, "62427d48187f09": 214, "0x24": 214, "12d": 214, "133": 214, "139": 214, "62427d48187f0d": 214, "0x34": 214, "140": 214, "146": 214, "14c": 214, "152": 214, "62c17c48104606": 214, "0x180": 214, "62c17c48104e07": 214, "0x1c0": 214, "62c17c48105608": 214, "0x200": 214, "167": [214, 215], "62427d48187f02": 214, "16e": 214, "174": 214, "17a": 214, "180": 214, "62427d48187f06": 214, "0x18": 214, "18d": 214, "193": 214, "199": 214, "62427d48187f0a": 214, "0x28": 214, "1a0": 214, "1a6": 214, "1ac": 214, "1b2": 214, "62427d48187f0e": 214, "0x38": 214, "1b9": 214, "1bf": 214, "1c5": 214, "1cb": 214, "62c17c48104609": 214, "0x240": 214, "1d2": 214, "62c17c48104e0a": 214, "0x280": 214, "1d9": 214, "62c17c4810560b": 214, "0x2c0": 214, "1e0": 214, "62427d48187f03": 214, "0xc": 214, "1e7": 214, "1ed": 214, "1f3": 214, "1f9": 214, "62427d48187f07": 214, "0x1c": 214, "200": 214, "206": 214, "20c": 214, "212": 214, "62427d48187f0b": 214, "0x2c": 214, "219": [214, 215], "21f": 214, "225": 214, "22b": 214, "62427d48187f0f": 214, "0x3c": 214, "232": [214, 215], "238": 214, "23e": 214, "62d17c48114500": 214, "24b": 214, "62d17c48116503": 214, "62517c48114506": 214, "62517c48116509": 214, "260": 214, "62d17c48114d01": 214, "267": 214, "62d17c48116d04": 214, "26e": 214, "62517c48114d07": 214, "62517c48116d0a": 214, "27c": 214, "62d17c48115502": 214, "283": 214, "62d17c48117505": 214, "28a": 214, "62517c48115508": 214, "291": 214, "62517c4811750b": 214, "298": [214, 215], "pop": 214, "415f": 214, "29a": 214, "415e": 214, "29c": 214, "415d": 214, "29e": 214, "415c": 214, "2a0": 214, "5d": 214, "2a1": 214, "5b": 214, "2a2": 214, "avx": 214, "c5f877": 214, "vzeroupp": 214, "2a5": 214, "xed3": 214, "stat": 214, "cycl": 214, "29220": 214, "236418": 214, "118": 214, "2003": 214, "54": [214, 215], "003486": 215, "601": 215, "003107": 215, "675": 215, "002614": 215, "802": 215, "002166": 215, "968": 215, "068": 215, "001647": 215, "1273": 215, "011226": 215, "284": 215, "009475": 215, "885": 215, "377": 215, "007641": 215, "1097": 215, "78": 215, "005845": 215, "1435": 215, "004071": 215, "2060": 215, "012745": 215, "658": 215, "198": 215, "011113": 215, "754": 215, "835": 215, "009402": 215, "892": 215, "007602": 215, "1103": 215, "005494": 215, "1527": 215, "044202": 215, "759": 215, "036423": 215, "029245": 215, "1147": 215, "022347": 215, "1501": 215, "014906": 215, "2251": 215, "4096": 215, "216338": 215, "620": 215, "408": 215, "179593": 215, "345": 215, "135054": 215, "806": 215, "094698": 215, "1417": 215, "06097": 215, "2201": 215, "190508": 215, "704": 215, "526": 215, "159566": 215, "841": 215, "130863": 215, "1025": 215, "103927": 215, "1291": 215, "073996": 215, "1813": 215, "02504": 215, "753": 215, "784": 215, "021073": 215, "895": 215, "682": 215, "017099": 215, "013078": 215, "1443": 215, "009233": 215, "2044": 215, "3072": 215, "112882": 215, "668": 215, "818": 215, "087939": 215, "858": 215, "525": 215, "068835": 215, "1096": 215, "79": 215, "048734": 215, "1549": 215, "031756": 215, "2377": 215, "109308": 215, "679": 215, "092247": 215, "805": 215, "638": 215, "075911": 215, "055895": 215, "1329": 215, "61": 215, "035875": 215, "2071": 215, "57": 215, "00565": 215, "742": 215, "297": 215, "005036": 215, "832": 215, "004475": 215, "937": 215, "182": 215, "003685": 215, "1138": 215, "00271": 215, "1547": 215, "98": 215, "018348": 215, "386": 215, "015412": 215, "1088": 215, "01257": 215, "1334": 215, "009599": 215, "1747": 215, "72": 215, "006776": 215, "2475": 215, "020632": 215, "813": 215, "162": 215, "018427": 215, "483": 215, "01647": 215, "1018": 215, "66": 215, "01358": 215, "1235": 215, "010552": 215, "1589": 215, "072121": 215, "930": 215, "506": 215, "059613": 215, "1125": 215, "048378": 215, "1387": 215, "036675": 215, "1829": 215, "83": 215, "024857": 215, "2699": 215, "376539": 215, "712": 215, "902": 215, "31929": 215, "840": 215, "727": 215, "261265": 215, "1027": 215, "193579": 215, "1386": 215, "118429": 215, "2266": 215, "309195": 215, "177": 215, "256619": 215, "1046": 215, "213454": 215, "1257": 215, "165192": 215, "1624": 215, "118402": 215, "2267": 215, "040293": 215, "855": 215, "034117": 215, "027528": 215, "1371": 215, "02113": 215, "1786": 215, "015069": 215, "218765": 215, "215": 215, "180921": 215, "834": 215, "592": 215, "142778": 215, "1057": 215, "097692": 215, "1545": 215, "062003": 215, "2435": 215, "174101": 215, "853": 215, "73": 215, "148369": 215, "1001": 215, "123554": 215, "1203": 215, "092366": 215, "1609": 215, "059128": 215, "2513": 215, "007447": 215, "844": 215, "006572": 215, "005702": 215, "004831": 215, "1302": 215, "003674": 215, "1712": 215, "024706": 215, "020746": 215, "1213": 215, "03": 215, "016921": 215, "012994": 215, "1936": 215, "009038": 215, "2784": 215, "027588": 215, "912": 215, "024042": 215, "77": 215, "020788": 215, "1210": 215, "017787": 215, "1414": 215, "014013": 215, "1795": 215, "099457": 215, "1012": 215, "081973": 215, "1228": 215, "066057": 215, "1523": 215, "049708": 215, "2025": 215, "034191": 215, "2944": 215, "500698": 215, "804": 215, "184": 215, "420619": 215, "287": 215, "337529": 215, "1192": 215, "94": 215, "251221": 215, "1602": 215, "158668": 215, "2537": 215, "412912": 215, "155": 215, "346369": 215, "1162": 215, "2831": 215, "1422": 215, "220585": 215, "1825": 215, "156168": 215, "2578": 215, "05384": 215, "1051": 215, "045507": 215, "1244": 215, "036978": 215, "1531": 215, "028483": 215, "1987": 215, "020046": 215, "2824": 215, "283445": 215, "799": 215, "069": 215, "236101": 215, "959": 215, "302": 215, "188745": 215, "1199": 215, "135532": 215, "084554": 215, "2678": 215, "227976": 215, "977": 215, "19463": 215, "1145": 215, "161251": 215, "1382": 215, "123585": 215, "1804": 215, "084032": 215, "2653": 215, "009405": 215, "891": 215, "00822": 215, "1020": 215, "007013": 215, "1196": 215, "08": 215, "005799": 215, "1446": 215, "004647": 215, "1805": 215, "033634": 215, "997": 215, "629": 215, "027609": 215, "1215": 215, "022443": 215, "1495": 215, "09": 215, "017081": 215, "1964": 215, "011754": 215, "2854": 215, "03586": 215, "031008": 215, "1082": 215, "026049": 215, "1288": 215, "021516": 215, "1559": 215, "017011": 215, "1972": 215, "133295": 215, "1006": 215, "92": 215, "111186": 215, "1207": 215, "088111": 215, "066552": 215, "2016": 215, "045442": 215, "2953": 215, "611718": 215, "645": 215, "533329": 215, "430288": 215, "1247": 215, "307141": 215, "198987": 215, "2698": 215, "02": [215, 218], "556249": 215, "163": 215, "462737": 215, "1160": 215, "37537": 215, "1430": 215, "28321": 215, "1895": 215, "203901": 215, "2633": 215, "071636": 215, "1053": 215, "060352": 215, "1250": 215, "04901": 215, "1540": 215, "037568": 215, "2009": 215, "026748": 215, "2822": 215, "3572": 215, "845": 215, "437": 215, "299561": 215, "1008": 215, "228752": 215, "1320": 215, "165648": 215, "1823": 215, "105656": 215, "2858": 215, "298907": 215, "994": 215, "529": 215, "255598": 215, "1163": 215, "20824": 215, "1427": 215, "159911": 215, "1858": 215, "111211": 215, "2673": 215, "0153": 215, "685": 215, "358": 215, "013145": 215, "797": 215, "010967": 215, "956": 215, "009211": 215, "007554": 215, "1388": 215, "055308": 215, "758": 215, "351": 215, "045848": 215, "826": 215, "036726": 215, "1142": 215, "06": 215, "027535": 215, "018464": 215, "2271": 215, "059788": 215, "051022": 215, "822": 215, "062": 215, "042164": 215, "033344": 215, "029639": 215, "1415": 215, "22241": 215, "337": 215, "18324": 215, "915": 215, "145322": 215, "1154": 215, "1083": 215, "072884": 215, "2301": 215, "11793": 215, "600": 215, "929398": 215, "722": 215, "720963": 215, "823": 215, "510039": 215, "1315": 215, "336519": 215, "1994": 215, "909941": 215, "737": 215, "508": 215, "753487": 215, "644": 215, "606477": 215, "459915": 215, "1459": 215, "303455": 215, "2211": 215, "123429": 215, "764": 215, "586": 215, "103035": 215, "923": 215, "082503": 215, "1143": 215, "062558": 215, "1508": 215, "042694": 215, "2210": 215, "60813": 215, "734": 215, "483053": 215, "781": 215, "462": 215, "357348": 215, "1056": 215, "256715": 215, "1470": 215, "169119": 215, "2232": 215, "503341": 215, "738": 215, "42134": 215, "881": 215, "342843": 215, "255199": 215, "1456": 215, "174091": 215, "2134": 215, "014267": 215, "012397": 215, "1015": 215, "010587": 215, "1188": 215, "008608": 215, "1461": 215, "006554": 215, "1919": 215, "053254": 215, "044755": 215, "1124": 215, "034839": 215, "1444": 215, "026689": 215, "1885": 215, "017743": 215, "2836": 215, "69": 215, "054911": 215, "916": 215, "608": 215, "047555": 215, "1058": 215, "040166": 215, "1253": 215, "032695": 215, "1539": 215, "025032": 215, "220947": 215, "911": 215, "178324": 215, "1128": 215, "137361": 215, "1465": 215, "103126": 215, "1952": 215, "070143": 215, "2870": 215, "06648": 215, "755": 215, "893959": 215, "900": 215, "831": 215, "718893": 215, "1120": 215, "537405": 215, "1498": 215, "280686": 215, "2869": 215, "902588": 215, "730678": 215, "582871": 215, "1381": 215, "444133": 215, "298489": 215, "2697": 215, "581": 215, "095595": 215, "1184": 215, "078109": 215, "1449": 215, "059619": 215, "1899": 215, "041405": 215, "2735": 215, "596568": 215, "497127": 215, "396634": 215, "286973": 215, "1578": 215, "167473": 215, "2704": 215, "472466": 215, "943": 215, "787": 215, "391055": 215, "1140": 215, "319865": 215, "1394": 215, "247491": 215, "1801": 215, "169874": 215, "2624": 215, "93": 215, "021379": 215, "686": 215, "67": 215, "018228": 215, "015207": 215, "012053": 215, "1218": 215, "010396": 215, "1412": 215, "077159": 215, "761": 215, "06424": 215, "074": 215, "051467": 215, "038789": 215, "1513": 215, "025687": 215, "2285": 215, "083622": 215, "702": 215, "071292": 215, "664": 215, "058915": 215, "697": 215, "048407": 215, "041133": 215, "311691": 215, "569": 215, "256635": 215, "204973": 215, "153086": 215, "1534": 215, "101206": 215, "2320": 215, "59625": 215, "588": 215, "583": 215, "33246": 215, "705": 215, "03849": 215, "703": 215, "738939": 215, "1271": 215, "480308": 215, "1956": 215, "26056": 215, "745": 215, "324": 215, "04874": 215, "842936": 215, "1114": 215, "59": 215, "635554": 215, "1478": 215, "42145": 215, "2229": 215, "174215": 215, "375": 215, "145836": 215, "116701": 215, "1132": 215, "087673": 215, "1506": 215, "0595": 215, "2220": 215, "883258": 215, "598": 215, "333": 215, "711146": 215, "743": 215, "543634": 215, "129": 215, "402406": 215, "1313": 215, "266945": 215, "1979": 215, "70404": 215, "592043": 215, "878": 215, "695": 215, "475444": 215, "1094": 215, "358932": 215, "240739": 215, "2160": 215, "018438": 215, "909": 215, "907": 215, "015871": 215, "013504": 215, "1242": 215, "010993": 215, "1526": 215, "00826": 215, "2031": 215, "061272": 215, "1095": 215, "060962": 215, "1100": 215, "046729": 215, "1436": 215, "034036": 215, "1971": 215, "023128": 215, "2901": 215, "071725": 215, "061692": 215, "1087": 215, "05216": 215, "1286": 215, "042327": 215, "1585": 215, "032111": 215, "2089": 215, "286461": 215, "242512": 215, "181783": 215, "1476": 215, "139021": 215, "1930": 215, "087012": 215, "3085": 215, "36322": 215, "652": 215, "08991": 215, "880185": 215, "1219": 215, "694533": 215, "366328": 215, "2931": 215, "15748": 215, "927": 215, "937824": 215, "1144": 215, "745357": 215, "1440": 215, "558061": 215, "1924": 215, "391387": 215, "2743": 215, "157349": 215, "616": 215, "129806": 215, "103083": 215, "1464": 215, "078442": 215, "053639": 215, "2815": 215, "767569": 215, "874": 215, "641585": 215, "941": 215, "387": 215, "488558": 215, "1236": 215, "355651": 215, "1698": 215, "230945": 215, "2615": 215, "611059": 215, "514108": 215, "1156": 215, "416571": 215, "318094": 215, "1869": 215, "225023": 215, "2642": 215, "037509": 215, "564": 215, "03176": 215, "026189": 215, "1281": 215, "021115": 215, "015895": 215, "2110": 215, "141333": 215, "949": 215, "133647": 215, "1004": 215, "071033": 215, "1889": 215, "52": 215, "042992": 215, "3121": 215, "147474": 215, "125344": 215, "1070": 215, "104294": 215, "084977": 215, "1579": 215, "062473": 215, "2148": 215, "701639": 215, "765": 215, "534615": 215, "359791": 215, "1492": 215, "2612": 215, "2055": 215, "183193": 215, "2930": 215, "92067": 215, "735": 215, "271": 215, "4402": 215, "880": 215, "046": 215, "69186": 215, "1269": 215, "17436": 215, "1828": 215, "880179": 215, "2439": 215, "62123": 215, "264": 215, "14905": 215, "999": 215, "64253": 215, "1307": 215, "1413": 215, "1881": 215, "771439": 215, "2783": 215, "369429": 215, "451": 215, "288236": 215, "1047": 215, "209526": 215, "1441": 215, "148115": 215, "2038": 215, "106089": 215, "2846": 215, "53204": 215, "465": 215, "28593": 215, "939": 215, "368": 215, "0852": 215, "1113": 215, "685382": 215, "1762": 215, "408357": 215, "2958": 215, "4521": 215, "13466": 215, "853916": 215, "1392": 215, "642672": 215, "1850": 215, "446442": 215, "2663": 215, "057419": 215, "876": 215, "046081": 215, "1092": 215, "038936": 215, "1292": 215, "031279": 215, "02345": 215, "2146": 215, "204966": 215, "17364": 215, "1159": 215, "141097": 215, "1426": 215, "105192": 215, "1913": 215, "067777": 215, "2970": 215, "21269": 215, "946": 215, "573": 215, "191564": 215, "1050": 215, "156368": 215, "1287": 215, "1565": 215, "093357": 215, "2156": 215, "84983": 215, "789777": 215, "1019": 215, "598168": 215, "1346": 215, "433492": 215, "1857": 215, "269504": 215, "2988": 215, "74845": 215, "859": 215, "348": 215, "96945": 215, "811": 215, "505": 215, "77082": 215, "76407": 215, "1826": 215, "09719": 215, "2935": 215, "73162": 215, "00241": 215, "1072": 215, "39024": 215, "77317": 215, "1816": 215, "19536": 215, "2694": 215, "517278": 215, "875": 215, "708": 215, "382208": 215, "1185": 215, "317837": 215, "1425": 215, "233231": 215, "1942": 215, "152925": 215, "2962": 215, "44309": 215, "741": 215, "62409": 215, "1115": 215, "64963": 215, "1098": 215, "03923": 215, "1743": 215, "625089": 215, "2898": 215, "07006": 215, "861": 215, "632": 215, "64247": 215, "1085": 215, "33386": 215, "1337": 215, "994935": 215, "1792": 215, "68383": 215, "2608": 215, "071358": 215, "940": 215, "061246": 215, "051679": 215, "1298": 215, "041483": 215, "1617": 215, "030989": 215, "2165": 215, "282241": 215, "951": 215, "085": 215, "238855": 215, "1123": 215, "193713": 215, "1385": 215, "146781": 215, "81": 215, "093896": 215, "286141": 215, "122": 215, "257138": 215, "1043": 215, "214208": 215, "167575": 215, "1601": 215, "124072": 215, "2163": 215, "21431": 215, "884": 215, "237": 215, "955251": 215, "775294": 215, "1384": 215, "63282": 215, "1696": 215, "37333": 215, "2876": 215, "87335": 215, "317": 215, "65059": 215, "1176": 215, "94733": 215, "1457": 215, "62241": 215, "1637": 215, "47752": 215, "2906": 215, "75786": 215, "83024": 215, "889": 215, "87429": 215, "1108": 215, "87685": 215, "75328": 215, "2449": 215, "718776": 215, "289": 215, "561317": 215, "1076": 215, "429166": 215, "1407": 215, "317204": 215, "1904": 215, "208555": 215, "2896": 215, "94057": 215, "30458": 215, "1048": 215, "6702": 215, "25799": 215, "1920": 215, "84121": 215, "2871": 215, "34423": 215, "711": 215, "77444": 215, "857": 215, "10049": 215, "52509": 215, "926038": 215, "2568": 215, "00203": 215, "1032": 215, "001981": 215, "001794": 215, "1169": 215, "001637": 215, "1280": 215, "00171": 215, "1226": 215, "003958": 215, "2119": 215, "003405": 215, "2463": 215, "003086": 215, "2718": 215, "002927": 215, "2866": 215, "002179": 215, "3849": 215, "004371": 215, "1918": 215, "004182": 215, "2005": 215, "003448": 215, "2433": 215, "00291": 215, "2882": 215, "002937": 215, "2856": 215, "012095": 215, "2774": 215, "010338": 215, "3245": 215, "008508": 215, "3943": 215, "006595": 215, "5087": 215, "004847": 215, "6923": 215, "052451": 215, "2558": 215, "042874": 215, "3130": 215, "032364": 215, "4147": 215, "02312": 215, "5805": 215, "01522": 215, "8818": 215, "045123": 215, "2974": 215, "037382": 215, "3590": 215, "030275": 215, "4433": 215, "023182": 215, "5789": 215, "01617": 215, "8300": 215, "007314": 215, "2580": 215, "006332": 215, "2980": 215, "005359": 215, "3522": 215, "004493": 215, "4200": 215, "003418": 215, "5521": 215, "027003": 215, "2795": 215, "02197": 215, "3436": 215, "017748": 215, "4253": 215, "013134": 215, "5748": 215, "008974": 215, "8412": 215, "025719": 215, "2889": 215, "021897": 215, "3393": 215, "018093": 215, "4107": 215, "013742": 215, "5408": 215, "009924": 215, "7488": 215, "002891": 215, "1450": 215, "002458": 215, "002523": 215, "1662": 215, "002266": 215, "1851": 215, "001803": 215, "2326": 215, "005789": 215, "005004": 215, "3353": 215, "00424": 215, "3956": 215, "003505": 215, "4786": 215, "002972": 215, "5644": 215, "006933": 215, "2420": 215, "005931": 215, "2828": 215, "005267": 215, "3185": 215, "004801": 215, "3494": 215, "003851": 215, "4356": 215, "019352": 215, "3467": 215, "016625": 215, "4036": 215, "013287": 215, "5050": 215, "010629": 215, "6313": 215, "007591": 215, "8841": 215, "097726": 215, "2746": 215, "081327": 215, "065632": 215, "4090": 215, "047646": 215, "5633": 215, "029536": 215, "9088": 215, "073619": 215, "3646": 215, "060379": 215, "4445": 215, "048994": 215, "5478": 215, "036992": 215, "7256": 215, "02588": 215, "10372": 215, "011659": 215, "3237": 215, "009791": 215, "3855": 215, "008118": 215, "4650": 215, "006679": 215, "5652": 215, "004939": 215, "7643": 215, "053777": 215, "2807": 215, "045914": 215, "3288": 215, "03588": 215, "4208": 215, "02529": 215, "5970": 215, "016742": 215, "9018": 215, "040705": 215, "3651": 215, "034291": 215, "4334": 215, "028568": 215, "5202": 215, "02187": 215, "6796": 215, "016186": 215, "9183": 215, "003155": 215, "002952": 215, "002655": 215, "2369": 215, "002436": 215, "2582": 215, "002236": 215, "2813": 215, "00745": 215, "3377": 215, "006565": 215, "3833": 215, "005426": 215, "4638": 215, "004256": 215, "5912": 215, "003466": 215, "7261": 215, "008359": 215, "3010": 215, "00742": 215, "3391": 215, "006535": 215, "3850": 215, "005559": 215, "4526": 215, "004881": 215, "5156": 215, "025726": 215, "3912": 215, "021747": 215, "4628": 215, "017651": 215, "5703": 215, "013712": 215, "7341": 215, "009801": 215, "10270": 215, "124749": 215, "3227": 215, "103385": 215, "3894": 215, "083219": 215, "4838": 215, "062601": 215, "6432": 215, "039799": 215, "10117": 215, "101071": 215, "3983": 215, "082567": 215, "4876": 215, "066852": 215, "6023": 215, "048773": 215, "8255": 215, "035419": 215, "11368": 215, "014772": 215, "01278": 215, "4430": 215, "010532": 215, "5376": 215, "008698": 215, "6509": 215, "006436": 215, "8798": 215, "069887": 215, "3240": 215, "058858": 215, "3848": 215, "047341": 215, "4784": 215, "034614": 215, "6543": 215, "022295": 215, "10159": 215, "053815": 215, "4142": 215, "045458": 215, "4904": 215, "037358": 215, "5968": 215, "02914": 215, "7651": 215, "02089": 215, "10672": 215, "003936": 215, "003322": 215, "2525": 215, "003173": 215, "2643": 215, "002691": 215, "3117": 215, "002358": 215, "3557": 215, "009382": 215, "3576": 215, "008289": 215, "4047": 215, "006724": 215, "4990": 215, "005148": 215, "6518": 215, "004061": 215, "8262": 215, "010712": 215, "3132": 215, "009203": 215, "007943": 215, "4224": 215, "006981": 215, "4806": 215, "00561": 215, "5980": 215, "034567": 215, "3882": 215, "028972": 215, "4632": 215, "023258": 215, "5770": 215, "017977": 215, "7466": 215, "012814": 215, "10474": 215, "158162": 215, "3394": 215, "132552": 215, "4050": 215, "101844": 215, "5271": 215, "080936": 215, "6633": 215, "05301": 215, "10127": 215, "135839": 215, "3952": 215, "11116": 215, "4829": 215, "089951": 215, "063302": 215, "8481": 215, "046746": 215, "11484": 215, "019263": 215, "3919": 215, "016459": 215, "4586": 215, "013535": 215, "5578": 215, "010771": 215, "7009": 215, "007611": 215, "9919": 215, "085488": 215, "3532": 215, "074727": 215, "4041": 215, "060476": 215, "4993": 215, "041796": 215, "7225": 215, "027547": 215, "10962": 215, "071382": 215, "4164": 215, "060077": 215, "4948": 215, "049658": 215, "5986": 215, "038139": 215, "7794": 215, "027025": 215, "10999": 215, "005025": 215, "2086": 215, "004519": 215, "003968": 215, "00339": 215, "3093": 215, "003153": 215, "3325": 215, "014795": 215, "2834": 215, "012623": 215, "3322": 215, "010269": 215, "4084": 215, "007859": 215, "5337": 215, "005703": 215, "7354": 215, "016169": 215, "2594": 215, "014448": 215, "2902": 215, "011705": 215, "3583": 215, "010149": 215, "4132": 215, "008793": 215, "4769": 215, "05603": 215, "2994": 215, "0468": 215, "3584": 215, "03744": 215, "4481": 215, "028166": 215, "5956": 215, "019259": 215, "8711": 215, "277815": 215, "2415": 215, "229837": 215, "2919": 215, "1787": 215, "3755": 215, "126545": 215, "5303": 215, "083532": 215, "8033": 215, "224925": 215, "2983": 215, "184256": 215, "3642": 215, "146452": 215, "4582": 215, "108899": 215, "6162": 215, "074066": 215, "9060": 215, "031946": 215, "2954": 215, "026814": 215, "3519": 215, "021706": 215, "4347": 215, "016667": 215, "5662": 215, "011647": 215, "8102": 215, "150549": 215, "2507": 215, "119951": 215, "3147": 215, "089309": 215, "4226": 215, "063723": 215, "5923": 215, "042784": 215, "8823": 215, "122421": 215, "3035": 215, "102244": 215, "082201": 215, "4520": 215, "062248": 215, "5969": 215, "042944": 215, "8652": 215, "004811": 215, "004438": 215, "2835": 215, "003899": 215, "003438": 215, "3659": 215, "002978": 215, "4225": 215, "014576": 215, "3453": 215, "012078": 215, "4167": 215, "008963": 215, "5615": 215, "007276": 215, "6917": 215, "005485": 215, "9176": 215, "015062": 215, "3341": 215, "013243": 215, "3800": 215, "011443": 215, "4398": 215, "009288": 215, "5418": 215, "007446": 215, "6759": 215, "054398": 215, "3701": 215, "044569": 215, "4517": 215, "036333": 215, "5541": 215, "027049": 215, "7442": 215, "018742": 215, "10742": 215, "267367": 215, "3011": 215, "223615": 215, "3601": 215, "1797": 215, "134716": 215, "5977": 215, "069275": 215, "11624": 215, "222661": 215, "3616": 215, "179525": 215, "4485": 215, "139298": 215, "5781": 215, "095879": 215, "8399": 215, "176292": 215, "4568": 215, "070028": 215, "025834": 215, "4383": 215, "02075": 215, "5457": 215, "016128": 215, "7021": 215, "011601": 215, "9761": 215, "148512": 215, "3050": 215, "124238": 215, "09953": 215, "4551": 215, "071432": 215, "6341": 215, "044154": 215, "10259": 215, "113174": 215, "3940": 215, "096166": 215, "4636": 215, "076584": 215, "5822": 215, "059291": 215, "7520": 215, "041661": 215, "10703": 215, "006557": 215, "2239": 215, "005848": 215, "2510": 215, "005021": 215, "2923": 215, "004663": 215, "3148": 215, "003933": 215, "3732": 215, "020392": 215, "2879": 215, "017102": 215, "3433": 215, "013703": 215, "4285": 215, "010953": 215, "5361": 215, "007496": 215, "7833": 215, "022132": 215, "019376": 215, "3030": 215, "015877": 215, "3698": 215, "013437": 215, "4370": 215, "011637": 215, "5046": 215, "078075": 215, "3008": 215, "065155": 215, "3604": 215, "052195": 215, "4500": 215, "03941": 215, "5959": 215, "026271": 215, "8940": 215, "398509": 215, "2357": 215, "332153": 215, "259051": 215, "3626": 215, "184412": 215, "5094": 215, "119678": 215, "7850": 215, "313656": 215, "2995": 215, "257989": 215, "3641": 215, "206049": 215, "4559": 215, "152848": 215, "6146": 215, "103125": 215, "9110": 215, "044486": 215, "2969": 215, "037334": 215, "3538": 215, "030229": 215, "023198": 215, "5695": 215, "01587": 215, "8325": 215, "219777": 215, "2404": 215, "17764": 215, "2975": 215, "135864": 215, "3889": 215, "100424": 215, "5262": 215, "067755": 215, "7799": 215, "172356": 215, "3018": 215, "144231": 215, "3606": 215, "116019": 215, "4483": 215, "087388": 215, "5953": 215, "0596": 215, "8728": 215, "006097": 215, "2751": 215, "005176": 215, "3241": 215, "00449": 215, "3736": 215, "003949": 215, "4248": 215, "003175": 215, "5284": 215, "020483": 215, "3276": 215, "013769": 215, "4873": 215, "011419": 215, "5876": 215, "008933": 215, "7512": 215, "006533": 215, "10272": 215, "019241": 215, "3487": 215, "016835": 215, "3986": 215, "014234": 215, "4714": 215, "011946": 215, "5617": 215, "009106": 215, "7369": 215, "07811": 215, "061481": 215, "4366": 215, "046201": 215, "5810": 215, "035702": 215, "7518": 215, "02221": 215, "12086": 215, "326917": 215, "3284": 215, "273363": 215, "3927": 215, "220994": 215, "4858": 215, "166153": 215, "6462": 215, "08544": 215, "12567": 215, "311348": 215, "3448": 215, "243012": 215, "4418": 215, "187933": 215, "5713": 215, "126819": 215, "8466": 215, "085569": 215, "12548": 215, "040478": 215, "3730": 215, "03297": 215, "4579": 215, "026527": 215, "5692": 215, "020782": 215, "7265": 215, "013904": 215, "10860": 215, "183003": 215, "161443": 215, "3741": 215, "129767": 215, "4654": 215, "089335": 215, "6760": 215, "061068": 215, "9890": 215, "15525": 215, "3829": 215, "125772": 215, "4727": 215, "101434": 215, "5861": 215, "076508": 215, "7770": 215, "053732": 215, "11064": 215, "010421": 215, "3219": 215, "009082": 215, "3694": 215, "007813": 215, "4294": 215, "006511": 215, "5153": 215, "005172": 215, "6487": 215, "032138": 215, "4176": 215, "02699": 215, "4972": 215, "022001": 215, "6100": 215, "016901": 215, "7941": 215, "012004": 215, "11180": 215, "03738": 215, "03149": 215, "4262": 215, "026673": 215, "5031": 215, "021782": 215, "6161": 215, "016822": 215, "7978": 215, "176031": 215, "3049": 215, "134442": 215, "3993": 215, "084378": 215, "6362": 215, "064058": 215, "8381": 215, "043787": 215, "12261": 215, "697876": 215, "3077": 215, "615338": 215, "3489": 215, "350147": 215, "6133": 215, "267289": 215, "8034": 215, "179695": 215, "11950": 215, "703207": 215, "3053": 215, "561805": 215, "3822": 215, "423052": 215, "5076": 215, "254835": 215, "171434": 215, "12526": 215, "093348": 215, "3235": 215, "072563": 215, "4161": 215, "05392": 215, "5600": 215, "037612": 215, "8029": 215, "026314": 215, "11476": 215, "407388": 215, "340939": 215, "3543": 215, "261028": 215, "4627": 215, "151649": 215, "7965": 215, "103379": 215, "11684": 215, "358769": 215, "3314": 215, "283046": 215, "4201": 215, "212152": 215, "5604": 215, "158502": 215, "7502": 215, "107514": 215, "11059": 215, "014833": 215, "012912": 215, "3898": 215, "011054": 215, "4553": 215, "009253": 215, "5439": 215, "00717": 215, "7019": 215, "052661": 215, "3823": 215, "044728": 215, "4501": 215, "036583": 215, "5503": 215, "027487": 215, "7324": 215, "01839": 215, "10947": 215, "055665": 215, "046588": 215, "4321": 215, "039411": 215, "5108": 215, "031875": 215, "6316": 215, "8148": 215, "263316": 215, "3058": 215, "198303": 215, "4061": 215, "141966": 215, "5672": 215, "105849": 215, "7608": 215, "068787": 215, "11707": 215, "793822": 215, "4057": 215, "996979": 215, "3230": 215, "54288": 215, "5933": 215, "412174": 215, "7815": 215, "274441": 215, "11737": 215, "03474": 215, "3113": 215, "832701": 215, "3868": 215, "564787": 215, "421781": 215, "7637": 215, "271587": 215, "11860": 215, "130834": 215, "3462": 215, "094331": 215, "4802": 215, "076012": 215, "058047": 215, "7803": 215, "039534": 215, "11458": 215, "635729": 215, "2850": 215, "379899": 215, "307908": 215, "5884": 215, "233057": 215, "7774": 215, "157518": 215, "11503": 215, "518276": 215, "3441": 215, "422517": 215, "4221": 215, "323476": 215, "5513": 215, "247251": 215, "7213": 215, "163369": 215, "10917": 215, "019231": 215, "016815": 215, "3991": 215, "014327": 215, "4683": 215, "011932": 215, "5624": 215, "00915": 215, "7334": 215, "072314": 215, "3712": 215, "06138": 215, "4373": 215, "050021": 215, "5366": 215, "037695": 215, "7121": 215, "02494": 215, "10763": 215, "079663": 215, "3369": 215, "06167": 215, "4352": 215, "052133": 215, "5149": 215, "042188": 215, "032574": 215, "8240": 215, "380582": 215, "2821": 215, "24038": 215, "4466": 215, "195271": 215, "5498": 215, "146935": 215, "7307": 215, "094832": 215, "11322": 215, "08794": 215, "3947": 215, "913626": 215, "4701": 215, "737943": 215, "5820": 215, "558473": 215, "7690": 215, "369466": 215, "51009": 215, "2844": 215, "26974": 215, "3382": 215, "778244": 215, "5518": 215, "589803": 215, "7282": 215, "375284": 215, "11444": 215, "160705": 215, "3758": 215, "135495": 215, "4457": 215, "108718": 215, "5555": 215, "08112": 215, "7445": 215, "053351": 215, "11320": 215, "614109": 215, "3934": 215, "518614": 215, "418491": 215, "5772": 215, "31592": 215, "7647": 215, "211893": 215, "11401": 215, "836616": 215, "2842": 215, "699579": 215, "3399": 215, "544194": 215, "379699": 215, "228043": 215, "10428": 215, "amx": 216, "x16": 216, "environment_vari": 216, "kernel_typ": [216, 217], "acc": [216, 217], "perfom": 216, "introduct": 216, "benchmark_it": 216, "benchmark_no_refresh": 216, "refresh": 216, "kxn": 216, "mxn": 216, "sparse_ratio": 216, "micro_b": 216, "output_fp32": 216, "has_append_sum": 216, "micro_oc": 216, "sub_func_level": 216, "3d_infer": 216, "automaticlli": 216, "subfunc_level": 216, "subfunc_level_max": 216, "fold": 216, "dsparse_lib_use_amx": 216, "amx_bf16_x16": 216, "output_bf16": 216, "interv": 216, "lower_bound": 216, "upper_bound": 216, "invalid": 216, "prefix": 216, "fp32_relu": 216, "src_dt": 216, "dst_dt": 216, "tanspos": 216, "4d": 216, "distinguish": 216, "alpha": 216, "src0": 216, "bs0": 216, "bs1": 216, "beta": 216, "scr2": 216, "avx512f_p2031_p2013": 216, "has_binary_add": 216, "tile_m": 216, "tile_n": 216, "coeffici": 216, "vnni_noperm_p2031_p1302": 216, "spec_typ": 216, "output_dt": 216, "suuport": 216, "d0xd1x": 216, "d0": 216, "dst_type": 216, "newli": 216, "subdir": 216, "benchmark_dir": 216, "bench_": 216, "cpp": 216, "test_": 216, "entranc": 216, "procedur": 216, "get_true_data_": 216, "check_result_": 216, "gen_case_": 216, "run_bench_": 216, "feel": 216, "calc_flop": 216, "get_refresh_data_idx": 216, "benchmark_util": 216, "whitespac": 217, "labl": 217, "skip": 217, "run_ci": 217, "discard": 217, "new_input_fil": 217, "medium_n": 217, "it_per_cor": 217, "repeat": 217, "ci": 217, "toler": 218, "usag": [218, 219], "rel": 218, "conjunct": 218, "absolut": [218, 221, 222], "proport": [218, 219], "statu": [219, 222], "criteria": 219, "vision": 220, "speech": 220, "multimod": 220, "text_classifi": 220, "great": 220, "9998425245285034": 220, "autotoken": 220, "believ": 220, "beauti": 220, "evoc": 220, "ve": 220, "seen": 220, "9998886585235596": 220, "redund": 221, "bear": 221, "brain": 221, "damag": 221, "hypothesi": 221, "yann": 221, "lecun": 221, "salient": 221, "anywher": 221, "filter": 221, "magnitud": 221, "lowest": 221, "lock": 221, "freez": 221, "grouplasso": 221, "hyper": 221, "didn": 221, "pruning_conf": 221, "full": 222, "littl": 222, "degrad": 222, "gain": 222, "bandwidth": 222, "ex": 222, "articl": 222, "affin": 222, "common": 222, "convers": 222, "math": 222, "zeropoint": 222, "asymmetr": 222, "earli": 222, "platform": [222, 227], "overflow": 222, "fp16": 222, "solv": 222, "unseen": 222, "peopl": 222, "emul": 222, "fake": 222, "backward": 222, "mimic": 222, "made": 222, "fact": 222, "ultim": 222, "yield": 222, "either": 222, "pain": 222, "brought": 222, "lossi": 222, "fx": 222, "eager": 222, "qat": 222, "exit": 222, "guarante": 222}, "objects": {"": [[111, 0, 0, "-", "intel_extension_for_transformers"], [146, 0, 0, "-", "test_add_cls_token"], [147, 0, 0, "-", "test_attention_output_layer_norm_length_adaptive_keep_indices"], [148, 0, 0, "-", "test_attention_reshape"], [149, 0, 0, "-", "test_conv_reshape"], [150, 0, 0, "-", "test_embeddingbag"], [151, 0, 0, "-", "test_execution_options"], [152, 0, 0, "-", "test_gelu"], [153, 0, 0, "-", "test_graph_dispatch"], [154, 0, 0, "-", "test_insert_input_output_data"], [155, 0, 0, "-", "test_is_supported_onnx_graph"], [156, 0, 0, "-", "test_last_layer_shape"], [157, 0, 0, "-", "test_layer_norm_with_reduce_mean"], [158, 0, 0, "-", "test_main"], [159, 0, 0, "-", "test_matmul_with_bias_relu"], [160, 0, 0, "-", "test_matmul_with_bias_sigmoid"], [161, 0, 0, "-", "test_matmul_with_bias_tanh"], [162, 0, 0, "-", "test_merged_embeddingbag"], [163, 0, 0, "-", "test_model"], [164, 0, 0, "-", "test_onnx_utils"], [165, 0, 0, "-", "test_ops"], [166, 0, 0, "-", "test_padding_sequence"], [167, 0, 0, "-", "test_pattern_dispatch"], [168, 0, 0, "-", "test_position_embeddings"], [169, 0, 0, "-", "test_qkv_merge"], [170, 0, 0, "-", "test_qkv_reshape"], [171, 0, 0, "-", "test_quant_onnx_execute"], [172, 0, 0, "-", "test_reshape_after_restore_hidden_states"], [173, 0, 0, "-", "test_reshape_before_and_after_attention_out_layer_norm_gather_elements"], [174, 0, 0, "-", "test_reshape_before_restore_hidden_states"], [175, 0, 0, "-", "test_start_end_logits"], [176, 0, 0, "-", "test_tf_utils"], [177, 0, 0, "-", "test_token_type_embeddings"], [178, 0, 0, "-", "test_transpose"], [179, 0, 0, "-", "test_transpose_batch_matmul"]], "intel_extension_for_transformers": [[0, 0, 0, "-", "backends"], [118, 0, 0, "-", "optimization"], [143, 0, 0, "-", "preprocessing"], [145, 0, 0, "-", "version"]], "intel_extension_for_transformers.backends": [[110, 0, 0, "-", "neural_engine"]], "intel_extension_for_transformers.backends.neural_engine": [[9, 0, 0, "-", "compile"]], "intel_extension_for_transformers.backends.neural_engine.compile": [[9, 1, 1, "", "compile"], [1, 0, 0, "-", "compile"], [3, 0, 0, "-", "extractors"], [7, 0, 0, "-", "graph"], [8, 0, 0, "-", "graph_utils"], [10, 0, 0, "-", "loaders"], [12, 0, 0, "-", "logger"], [13, 0, 0, "-", "onnx_utils"], [32, 0, 0, "-", "ops"], [74, 0, 0, "-", "sub_graph"], [109, 0, 0, "-", "tf_utils"]], "intel_extension_for_transformers.backends.neural_engine.compile.compile": [[1, 1, 1, "", "compile"], [1, 1, 1, "", "start_pipeline"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors": [[3, 2, 1, "", "Extractor"], [2, 0, 0, "-", "extractor"], [4, 0, 0, "-", "onnx_extractor"], [5, 0, 0, "-", "tf_extractor"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors.extractor": [[2, 2, 1, "", "Extractor"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors.onnx_extractor": [[4, 2, 1, "", "ONNXExtractor"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors.tf_extractor": [[5, 2, 1, "", "TensorflowExtractor"]], "intel_extension_for_transformers.backends.neural_engine.compile.graph": [[7, 2, 1, "", "Graph"], [6, 0, 0, "-", "graph"]], "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph": [[7, 3, 1, "", "change_node_input_tensors"], [7, 3, 1, "", "change_node_output_tensors"], [7, 3, 1, "", "dump_tensor"], [7, 3, 1, "", "engine_init"], [7, 4, 1, "", "execution_options"], [7, 3, 1, "", "get_next_node_names"], [7, 3, 1, "", "get_node_by_name"], [7, 3, 1, "", "get_node_id"], [7, 3, 1, "", "get_pre_node_names"], [7, 3, 1, "", "get_sparse_nodes_name"], [7, 3, 1, "", "get_tensor_idx"], [7, 3, 1, "", "graph_dispatch"], [7, 3, 1, "", "graph_init"], [7, 3, 1, "", "inference"], [7, 3, 1, "", "insert_nodes"], [7, 3, 1, "", "modify_node_connections"], [7, 4, 1, "", "net_config"], [7, 4, 1, "", "nodes"], [7, 3, 1, "", "remove_nodes"], [7, 3, 1, "", "rename_node"], [7, 3, 1, "", "save"], [7, 3, 1, "", "transpose_mode_int8"], [7, 4, 1, "", "weight_data"]], "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph": [[6, 2, 1, "", "Graph"]], "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph": [[6, 3, 1, "", "change_node_input_tensors"], [6, 3, 1, "", "change_node_output_tensors"], [6, 3, 1, "", "dump_tensor"], [6, 3, 1, "", "engine_init"], [6, 4, 1, "", "execution_options"], [6, 3, 1, "", "get_next_node_names"], [6, 3, 1, "", "get_node_by_name"], [6, 3, 1, "", "get_node_id"], [6, 3, 1, "", "get_pre_node_names"], [6, 3, 1, "", "get_sparse_nodes_name"], [6, 3, 1, "", "get_tensor_idx"], [6, 3, 1, "", "graph_dispatch"], [6, 3, 1, "", "graph_init"], [6, 3, 1, "", "inference"], [6, 3, 1, "", "insert_nodes"], [6, 3, 1, "", "modify_node_connections"], [6, 4, 1, "", "net_config"], [6, 4, 1, "", "nodes"], [6, 3, 1, "", "remove_nodes"], [6, 3, 1, "", "rename_node"], [6, 3, 1, "", "save"], [6, 3, 1, "", "transpose_mode_int8"], [6, 4, 1, "", "weight_data"]], "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils": [[8, 2, 1, "", "LazyImport"], [8, 1, 1, "", "construct_node"], [8, 1, 1, "", "get_data_dtype"], [8, 1, 1, "", "get_model_fwk_name"], [8, 1, 1, "", "get_quant_info"], [8, 1, 1, "", "insert_pattern"], [8, 1, 1, "", "insert_quant_info"], [8, 1, 1, "", "list2str"], [8, 1, 1, "", "names_from_input"], [8, 1, 1, "", "pattern_mapping"], [8, 1, 1, "", "pattern_mapping_conf_validation"], [8, 1, 1, "", "quant_info_init"], [8, 1, 1, "", "search_pattern"], [8, 1, 1, "", "search_straight_pattern"], [8, 1, 1, "", "str2list"]], "intel_extension_for_transformers.backends.neural_engine.compile.loaders": [[10, 2, 1, "", "Loader"], [11, 0, 0, "-", "loader"]], "intel_extension_for_transformers.backends.neural_engine.compile.loaders.loader": [[11, 2, 1, "", "Loader"]], "intel_extension_for_transformers.backends.neural_engine.compile.logger": [[12, 2, 1, "", "Logger"], [12, 1, 1, "", "debug"], [12, 1, 1, "", "error"], [12, 1, 1, "", "fatal"], [12, 1, 1, "", "info"], [12, 1, 1, "", "log"], [12, 1, 1, "", "warn"], [12, 1, 1, "", "warning"]], "intel_extension_for_transformers.backends.neural_engine.compile.logger.Logger": [[12, 3, 1, "", "get_logger"]], "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils": [[13, 1, 1, "", "bias_to_int32"], [13, 1, 1, "", "change_num_name"], [13, 1, 1, "", "get_children"], [13, 1, 1, "", "get_initializer_children_names"], [13, 1, 1, "", "get_node_children_names"], [13, 1, 1, "", "graph_node_names_details"], [13, 1, 1, "", "is_supported_onnx_graph"], [13, 1, 1, "", "is_supported_onnx_node"], [13, 1, 1, "", "onnx_extract_operator"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops": [[32, 2, 1, "", "Operator"], [14, 0, 0, "-", "all"], [15, 0, 0, "-", "assert"], [16, 0, 0, "-", "batch_matmul"], [17, 0, 0, "-", "batch_matmul_v2"], [18, 0, 0, "-", "bias_add"], [19, 0, 0, "-", "cast"], [20, 0, 0, "-", "concat"], [21, 0, 0, "-", "conv"], [22, 0, 0, "-", "empty_ops"], [23, 0, 0, "-", "expand_dims"], [24, 0, 0, "-", "fused_batch_matmul_v2"], [25, 0, 0, "-", "fused_batch_norm_v3"], [26, 0, 0, "-", "fused_gemm"], [27, 0, 0, "-", "fused_matmul"], [28, 0, 0, "-", "gather"], [29, 0, 0, "-", "gather_elements"], [30, 0, 0, "-", "gelu"], [31, 0, 0, "-", "gemm"], [33, 0, 0, "-", "iterator_get_next"], [34, 0, 0, "-", "iterator_v2"], [35, 0, 0, "-", "layer_normalization"], [36, 0, 0, "-", "map_and_batch_dataset"], [37, 0, 0, "-", "matmul"], [38, 0, 0, "-", "mean"], [39, 0, 0, "-", "mkl_layer_norm"], [40, 0, 0, "-", "model_dataset"], [41, 0, 0, "-", "one_hot"], [42, 0, 0, "-", "onnx_input"], [43, 0, 0, "-", "op"], [32, 1, 1, "", "operator_registry"], [44, 0, 0, "-", "optimize_dataset"], [45, 0, 0, "-", "pack"], [46, 0, 0, "-", "placeholder"], [47, 0, 0, "-", "quantize_linear"], [48, 0, 0, "-", "quantize_v2"], [49, 0, 0, "-", "quantized_fused_matmul_and_dequantize"], [50, 0, 0, "-", "quantized_matmul_with_bias_and_dequantize"], [51, 0, 0, "-", "reduce_mean"], [52, 0, 0, "-", "reduce_sum"], [53, 0, 0, "-", "reshape"], [54, 0, 0, "-", "scatter_elements"], [55, 0, 0, "-", "softmax"], [56, 0, 0, "-", "split"], [57, 0, 0, "-", "squeeze"], [58, 0, 0, "-", "strided_slice"], [59, 0, 0, "-", "tensor"], [60, 0, 0, "-", "top_k"], [61, 0, 0, "-", "transpose"], [62, 0, 0, "-", "unpack"], [63, 0, 0, "-", "unsqueeze"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.Operator": [[32, 4, 1, "", "attr"], [32, 4, 1, "", "config"], [32, 3, 1, "", "construct"], [32, 3, 1, "", "extract"], [32, 4, 1, "", "input_tensors"], [32, 4, 1, "", "name"], [32, 4, 1, "", "op_type"], [32, 4, 1, "", "output_tensors"], [32, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.all": [[14, 2, 1, "", "All"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.all.All": [[14, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.assert": [[15, 2, 1, "", "Assert"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.assert.Assert": [[15, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul": [[16, 2, 1, "", "BatchMatMul"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul.BatchMatMul": [[16, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2": [[17, 2, 1, "", "BatchMatMulV2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2.BatchMatMulV2": [[17, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add": [[18, 2, 1, "", "BiasAdd"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add.BiasAdd": [[18, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.cast": [[19, 2, 1, "", "Cast"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.cast.Cast": [[19, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.concat": [[20, 2, 1, "", "Concat"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.concat.Concat": [[20, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.conv": [[21, 2, 1, "", "Conv"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.conv.Conv": [[21, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops": [[22, 2, 1, "", "Add"], [22, 2, 1, "", "AddV2"], [22, 2, 1, "", "BinaryAdd"], [22, 2, 1, "", "ConstantOfShape"], [22, 2, 1, "", "Convolution"], [22, 2, 1, "", "CumSum"], [22, 2, 1, "", "DequantizeLinear"], [22, 2, 1, "", "Div"], [22, 2, 1, "", "EmbeddingBag"], [22, 2, 1, "", "Equal"], [22, 2, 1, "", "Erf"], [22, 2, 1, "", "Expand"], [22, 2, 1, "", "ExpandIndices"], [22, 2, 1, "", "Fill"], [22, 2, 1, "", "FlatMapDataset"], [22, 2, 1, "", "Flatten"], [22, 2, 1, "", "Identity"], [22, 2, 1, "", "InnerProduct"], [22, 2, 1, "", "Input"], [22, 2, 1, "", "LayerNorm"], [22, 2, 1, "", "LessEqual"], [22, 2, 1, "", "Loop"], [22, 2, 1, "", "MakeIterator"], [22, 2, 1, "", "MatMulWithBias"], [22, 2, 1, "", "MatMulWithBiasAdd"], [22, 2, 1, "", "MatMulWithBiasGelu"], [22, 2, 1, "", "MatMulWithBiasRelu"], [22, 2, 1, "", "MatMulWithBiasSigmoid"], [22, 2, 1, "", "MatMulWithBiasTanh"], [22, 2, 1, "", "Matmul"], [22, 2, 1, "", "MergedEmbeddingbag"], [22, 2, 1, "", "Mul"], [22, 2, 1, "", "NonZero"], [22, 2, 1, "", "Not"], [22, 2, 1, "", "Onehot"], [22, 2, 1, "", "Output"], [22, 2, 1, "", "PaddingSequence"], [22, 2, 1, "", "PositionIds"], [22, 2, 1, "", "Pow"], [22, 2, 1, "", "QLinearAdd"], [22, 2, 1, "", "QLinearMatMul"], [22, 2, 1, "", "QLinearMul"], [22, 2, 1, "", "Quantize"], [22, 2, 1, "", "Range"], [22, 2, 1, "", "RealDiv"], [22, 2, 1, "", "Relu"], [22, 2, 1, "", "Reorder"], [22, 2, 1, "", "Rsqrt"], [22, 2, 1, "", "Shape"], [22, 2, 1, "", "Sigmoid"], [22, 2, 1, "", "Slice"], [22, 2, 1, "", "Sqrt"], [22, 2, 1, "", "Square"], [22, 2, 1, "", "SquaredDifference"], [22, 2, 1, "", "StopGradient"], [22, 2, 1, "", "Sub"], [22, 2, 1, "", "Tanh"], [22, 2, 1, "", "TensorSliceDataset"], [22, 2, 1, "", "Tile"], [22, 2, 1, "", "TokenTypeIds"], [22, 2, 1, "", "TransposeBatchMatMul"], [22, 2, 1, "", "Where"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims": [[23, 2, 1, "", "ExpandDims"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims.ExpandDims": [[23, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3": [[25, 2, 1, "", "FusedBatchNormV3"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3.FusedBatchNormV3": [[25, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm": [[26, 2, 1, "", "FusedGemm"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm.FusedGemm": [[26, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul": [[27, 2, 1, "", "FusedMatMul"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul.FusedMatMul": [[27, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather": [[28, 2, 1, "", "Gather"], [28, 2, 1, "", "GatherV2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather.Gather": [[28, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather.GatherV2": [[28, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements": [[29, 2, 1, "", "GatherElements"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements.GatherElements": [[29, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu": [[30, 2, 1, "", "Gelu"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu.Gelu": [[30, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm": [[31, 2, 1, "", "Gemm"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm.Gemm": [[31, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next": [[33, 2, 1, "", "IteratorGetNext"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next.IteratorGetNext": [[33, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2": [[34, 2, 1, "", "IteratorV2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2.IteratorV2": [[34, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization": [[35, 2, 1, "", "LayerNormalization"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization.LayerNormalization": [[35, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset": [[36, 2, 1, "", "MapAndBatchDataset"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset.MapAndBatchDataset": [[36, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul": [[37, 2, 1, "", "MatMul"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul.MatMul": [[37, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.mean": [[38, 2, 1, "", "Mean"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.mean.Mean": [[38, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset": [[40, 2, 1, "", "ModelDataset"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset.ModelDataset": [[40, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot": [[41, 2, 1, "", "OneHot"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot.OneHot": [[41, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input": [[42, 2, 1, "", "ONNXINPUT"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input.ONNXINPUT": [[42, 3, 1, "", "extract"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.op": [[43, 2, 1, "", "Operator"], [43, 1, 1, "", "operator_registry"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.Operator": [[43, 4, 1, "", "attr"], [43, 4, 1, "", "config"], [43, 3, 1, "", "construct"], [43, 3, 1, "", "extract"], [43, 4, 1, "", "input_tensors"], [43, 4, 1, "", "name"], [43, 4, 1, "", "op_type"], [43, 4, 1, "", "output_tensors"], [43, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset": [[44, 2, 1, "", "OptimizeDataset"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset.OptimizeDataset": [[44, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.pack": [[45, 2, 1, "", "Pack"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.pack.Pack": [[45, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder": [[46, 2, 1, "", "Placeholder"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder.Placeholder": [[46, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear": [[47, 2, 1, "", "QuantizeLinear"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear.QuantizeLinear": [[47, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2": [[48, 2, 1, "", "QuantizeV2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2.QuantizeV2": [[48, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize": [[50, 2, 1, "", "QuantizedMatMulWithBiasAndDequantize"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize.QuantizedMatMulWithBiasAndDequantize": [[50, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean": [[51, 2, 1, "", "ReduceMean"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean.ReduceMean": [[51, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum": [[52, 2, 1, "", "ReduceSum"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum.ReduceSum": [[52, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape": [[53, 2, 1, "", "Reshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape.Reshape": [[53, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements": [[54, 2, 1, "", "ScatterElements"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements.ScatterElements": [[54, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax": [[55, 2, 1, "", "Softmax"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax.Softmax": [[55, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.split": [[56, 2, 1, "", "Split"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.split.Split": [[56, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze": [[57, 2, 1, "", "Squeeze"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze.Squeeze": [[57, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice": [[58, 2, 1, "", "StridedSlice"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice.StridedSlice": [[58, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor": [[59, 2, 1, "", "Tensor"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.Tensor": [[59, 4, 1, "", "config"], [59, 4, 1, "", "data"], [59, 4, 1, "", "dest_op"], [59, 4, 1, "", "dtype"], [59, 4, 1, "", "location"], [59, 4, 1, "", "name"], [59, 4, 1, "", "shape"], [59, 4, 1, "", "source_op"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k": [[60, 2, 1, "", "TopK"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k.TopK": [[60, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose": [[61, 2, 1, "", "Transpose"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose.Transpose": [[61, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack": [[62, 2, 1, "", "Unpack"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack.Unpack": [[62, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze": [[63, 2, 1, "", "Unsqueeze"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze.Unsqueeze": [[63, 3, 1, "", "set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph": [[74, 2, 1, "", "Pattern"], [74, 2, 1, "", "SubGraphMatcher"], [64, 0, 0, "-", "add_cls_token"], [65, 0, 0, "-", "add_embeddings"], [66, 0, 0, "-", "attention_mask_length_adaptive_keep_indices"], [67, 0, 0, "-", "attention_output_layer_norm_length_adaptive_keep_indices"], [68, 0, 0, "-", "attention_reshape"], [69, 0, 0, "-", "collect_quant_info"], [70, 0, 0, "-", "conv_reshape"], [71, 0, 0, "-", "embeddingbag"], [72, 0, 0, "-", "gelu"], [73, 0, 0, "-", "generate_sequence"], [75, 0, 0, "-", "input_data"], [76, 0, 0, "-", "input_file"], [77, 0, 0, "-", "insert_bf16_node"], [78, 0, 0, "-", "insert_quant_node"], [79, 0, 0, "-", "interact_features"], [80, 0, 0, "-", "last_layer_shape"], [81, 0, 0, "-", "layer_norm"], [82, 0, 0, "-", "layer_norm_with_reduce_mean"], [83, 0, 0, "-", "matmul_with_bias"], [84, 0, 0, "-", "matmul_with_bias_add"], [85, 0, 0, "-", "matmul_with_bias_gelu"], [86, 0, 0, "-", "matmul_with_bias_relu"], [87, 0, 0, "-", "matmul_with_bias_sigmoid"], [88, 0, 0, "-", "matmul_with_bias_tanh"], [89, 0, 0, "-", "merged_embeddingbag"], [90, 0, 0, "-", "output_data"], [91, 0, 0, "-", "padding_sequence"], [92, 0, 0, "-", "pattern"], [74, 1, 1, "", "pattern_registry"], [93, 0, 0, "-", "position_embeddings"], [94, 0, 0, "-", "position_embeddings_v1"], [95, 0, 0, "-", "qkv_merge"], [96, 0, 0, "-", "qkv_reshape"], [97, 0, 0, "-", "quantize_fusion"], [98, 0, 0, "-", "reshape_after_restore_hidden_states"], [99, 0, 0, "-", "reshape_before_and_after_attention_out_layer_norm_gather_elements"], [100, 0, 0, "-", "reshape_before_restore_hidden_states"], [101, 0, 0, "-", "reshape_fusion"], [102, 0, 0, "-", "restore_hidden_states_in_length_adaptive_update_indices"], [103, 0, 0, "-", "start_end_logits"], [104, 0, 0, "-", "subgraph_matcher"], [105, 0, 0, "-", "token_type_embeddings"], [106, 0, 0, "-", "token_type_embeddings_v1"], [107, 0, 0, "-", "transpose_batch_matmul"], [108, 0, 0, "-", "word_embeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_cls_token": [[64, 2, 1, "", "AddClsToken"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_embeddings": [[65, 2, 1, "", "AddEmbeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_mask_length_adaptive_keep_indices": [[66, 2, 1, "", "AttentionMaskLengthAdaptiveExpandIndices"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_output_layer_norm_length_adaptive_keep_indices": [[67, 2, 1, "", "AttentionOutputLayerNormLengthAdaptiveExpandIndices"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_reshape": [[68, 2, 1, "", "AttentionReshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.collect_quant_info": [[69, 2, 1, "", "CollectQuantInfo"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.conv_reshape": [[70, 2, 1, "", "ConvReshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.embeddingbag": [[71, 2, 1, "", "EmbeddingBag"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.gelu": [[72, 2, 1, "", "Gelu"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.generate_sequence": [[73, 2, 1, "", "GenerateSequence"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_data": [[75, 2, 1, "", "InputData"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_file": [[76, 2, 1, "", "InputFile"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_bf16_node": [[77, 2, 1, "", "InsertBF16Node"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_quant_node": [[78, 2, 1, "", "InsertQuantNode"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.interact_features": [[79, 2, 1, "", "InteractFeatures"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.last_layer_shape": [[80, 2, 1, "", "LastLayerShape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm": [[81, 2, 1, "", "LayerNorm"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm_with_reduce_mean": [[82, 2, 1, "", "LayerNormWithReduceMean"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias": [[83, 2, 1, "", "MatMulWithBias"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_add": [[84, 2, 1, "", "MatMulWithBiasAdd"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_gelu": [[85, 2, 1, "", "MatMulWithBiasGelu"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_relu": [[86, 2, 1, "", "MatMulWithBiasRelu"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_sigmoid": [[87, 2, 1, "", "MatMulWithBiasSigmoid"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_tanh": [[88, 2, 1, "", "MatmulWithBiasTanh"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.merged_embeddingbag": [[89, 2, 1, "", "MergedEmbeddingbag"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.output_data": [[90, 2, 1, "", "OutputData"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.padding_sequence": [[91, 2, 1, "", "PaddingSequence"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern": [[92, 2, 1, "", "Pattern"], [92, 1, 1, "", "pattern_registry"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings": [[93, 2, 1, "", "PositionEmbeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings_v1": [[94, 2, 1, "", "PositionEmbeddingsV1"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_merge": [[95, 2, 1, "", "QKVMerge"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_reshape": [[96, 2, 1, "", "QKVReshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.quantize_fusion": [[97, 2, 1, "", "QunatizeFusion"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_after_restore_hidden_states": [[98, 2, 1, "", "ReshapeAfterRestoreHiddenStates"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_and_after_attention_out_layer_norm_gather_elements": [[99, 2, 1, "", "ReshapeBeforeAndAfterAttentionOutLayerNormGatherElements"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_restore_hidden_states": [[100, 2, 1, "", "ReshapeBeforeRestoreHiddenStates"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_fusion": [[101, 2, 1, "", "ReshapeFusion"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.restore_hidden_states_in_length_adaptive_update_indices": [[102, 2, 1, "", "RestoreHiddenStatesInLengthAdaptive"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.start_end_logits": [[103, 2, 1, "", "StartEndLogits"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.subgraph_matcher": [[104, 2, 1, "", "SubGraphMatcher"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings": [[105, 2, 1, "", "TokenTypeEmbeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings_v1": [[106, 2, 1, "", "TokenTypeEmbeddingsV1"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.transpose_batch_matmul": [[107, 2, 1, "", "TransposeBatchMatMul"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.word_embeddings": [[108, 2, 1, "", "WordEmbeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.tf_utils": [[109, 1, 1, "", "create_tf_node"], [109, 1, 1, "", "get_tensor_dest_op"], [109, 1, 1, "", "graph_node_names_details"], [109, 1, 1, "", "tf_extract_operator"]], "intel_extension_for_transformers.optimization": [[118, 2, 1, "", "AutoDistillation"], [118, 2, 1, "", "AutoDistillationConfig"], [118, 2, 1, "", "DistillationConfig"], [118, 2, 1, "", "DistillationCriterionMode"], [118, 2, 1, "", "DynamicLengthConfig"], [118, 2, 1, "", "FlashDistillationConfig"], [118, 2, 1, "", "OptimizedModel"], [118, 2, 1, "", "Provider"], [118, 2, 1, "", "PrunerConfig"], [118, 2, 1, "", "PruningConfig"], [118, 2, 1, "", "PruningMode"], [118, 2, 1, "", "QuantizationConfig"], [118, 2, 1, "", "QuantizationMode"], [118, 2, 1, "", "TFDistillationConfig"], [118, 2, 1, "", "TFOptimization"], [112, 0, 0, "-", "benchmark"], [113, 0, 0, "-", "config"], [114, 0, 0, "-", "distillation"], [117, 0, 0, "-", "dynamic"], [120, 0, 0, "-", "mixture"], [121, 0, 0, "-", "model"], [122, 0, 0, "-", "optimizer"], [123, 0, 0, "-", "optimizer_tf"], [124, 0, 0, "-", "pipeline"], [125, 0, 0, "-", "pruning"], [126, 0, 0, "-", "pytorch_pruner"], [132, 0, 0, "-", "quantization"], [133, 0, 0, "-", "trainer"], [134, 0, 0, "-", "utils"]], "intel_extension_for_transformers.optimization.AutoDistillation": [[118, 4, 1, "", "advisor"], [118, 3, 1, "", "create_distillers"], [118, 3, 1, "", "dump_search_results"], [118, 3, 1, "", "estimate"], [118, 4, 1, "", "eval_func"], [118, 3, 1, "", "find_best_model_archs"], [118, 3, 1, "", "init_by_cfg"], [118, 3, 1, "", "init_search_cfg"], [118, 3, 1, "", "load_search_results"], [118, 3, 1, "", "metrics_conversion"], [118, 3, 1, "", "model_arch_proposition"], [118, 3, 1, "", "params_vec2params_dict"], [118, 3, 1, "", "search"], [118, 4, 1, "", "student_model"], [118, 4, 1, "", "teacher_model"], [118, 4, 1, "", "train_func"]], "intel_extension_for_transformers.optimization.AutoDistillationConfig": [[118, 4, 1, "", "framework"], [118, 4, 1, "", "knowledge_transfer"], [118, 4, 1, "", "max_trials"], [118, 4, 1, "", "metrics"], [118, 4, 1, "", "regular_distillation"], [118, 4, 1, "", "search_algorithm"], [118, 4, 1, "", "search_space"], [118, 4, 1, "", "seed"]], "intel_extension_for_transformers.optimization.DistillationConfig": [[118, 4, 1, "", "criterion"], [118, 4, 1, "", "framework"], [118, 4, 1, "", "metrics"]], "intel_extension_for_transformers.optimization.OptimizedModel": [[118, 3, 1, "", "from_pretrained"]], "intel_extension_for_transformers.optimization.PruningConfig": [[118, 4, 1, "", "epoch_range"], [118, 4, 1, "", "epochs"], [118, 4, 1, "", "framework"], [118, 3, 1, "", "init_prune_config"], [118, 4, 1, "", "initial_sparsity_ratio"], [118, 4, 1, "", "metrics"], [118, 4, 1, "", "pruner_config"], [118, 4, 1, "", "target_sparsity_ratio"]], "intel_extension_for_transformers.optimization.QuantizationConfig": [[118, 4, 1, "", "approach"], [118, 4, 1, "", "framework"], [118, 4, 1, "", "input_names"], [118, 4, 1, "", "max_trials"], [118, 4, 1, "", "metrics"], [118, 4, 1, "", "objectives"], [118, 4, 1, "", "op_wise"], [118, 4, 1, "", "output_dir"], [118, 4, 1, "", "output_names"], [118, 4, 1, "", "performance_only"], [118, 4, 1, "", "random_seed"], [118, 4, 1, "", "resume_path"], [118, 4, 1, "", "sampling_size"], [118, 4, 1, "", "strategy"], [118, 4, 1, "", "tensorboard"], [118, 4, 1, "", "timeout"]], "intel_extension_for_transformers.optimization.TFOptimization": [[118, 3, 1, "", "autodistill"], [118, 3, 1, "", "build_train_func"], [118, 3, 1, "", "builtin_eval_func"], [118, 3, 1, "", "distill"], [118, 4, 1, "", "eval_dataset"], [118, 4, 1, "", "eval_func"], [118, 3, 1, "", "init_distiller"], [118, 3, 1, "", "init_pruner"], [118, 3, 1, "", "init_quantizer"], [118, 4, 1, "", "input_names"], [118, 4, 1, "", "inputs"], [118, 3, 1, "", "model_builder_builtin"], [118, 4, 1, "", "output_names"], [118, 3, 1, "", "prune"], [118, 3, 1, "", "quantize"], [118, 4, 1, "", "train_dataset"], [118, 4, 1, "", "train_func"]], "intel_extension_for_transformers.optimization.benchmark": [[112, 2, 1, "", "ExecutorBenchmark"], [112, 1, 1, "", "run"]], "intel_extension_for_transformers.optimization.config": [[113, 2, 1, "", "AutoDistillationConfig"], [113, 2, 1, "", "DistillationConfig"], [113, 2, 1, "", "DynamicLengthConfig"], [113, 2, 1, "", "FlashDistillationConfig"], [113, 2, 1, "", "Provider"], [113, 2, 1, "", "PruningConfig"], [113, 2, 1, "", "QuantizationConfig"], [113, 2, 1, "", "TFDistillationConfig"]], "intel_extension_for_transformers.optimization.config.AutoDistillationConfig": [[113, 4, 1, "", "framework"], [113, 4, 1, "", "knowledge_transfer"], [113, 4, 1, "", "max_trials"], [113, 4, 1, "", "metrics"], [113, 4, 1, "", "regular_distillation"], [113, 4, 1, "", "search_algorithm"], [113, 4, 1, "", "search_space"], [113, 4, 1, "", "seed"]], "intel_extension_for_transformers.optimization.config.DistillationConfig": [[113, 4, 1, "", "criterion"], [113, 4, 1, "", "framework"], [113, 4, 1, "", "metrics"]], "intel_extension_for_transformers.optimization.config.PruningConfig": [[113, 4, 1, "", "epoch_range"], [113, 4, 1, "", "epochs"], [113, 4, 1, "", "framework"], [113, 3, 1, "", "init_prune_config"], [113, 4, 1, "", "initial_sparsity_ratio"], [113, 4, 1, "", "metrics"], [113, 4, 1, "", "pruner_config"], [113, 4, 1, "", "target_sparsity_ratio"]], "intel_extension_for_transformers.optimization.config.QuantizationConfig": [[113, 4, 1, "", "approach"], [113, 4, 1, "", "framework"], [113, 4, 1, "", "input_names"], [113, 4, 1, "", "max_trials"], [113, 4, 1, "", "metrics"], [113, 4, 1, "", "objectives"], [113, 4, 1, "", "op_wise"], [113, 4, 1, "", "output_dir"], [113, 4, 1, "", "output_names"], [113, 4, 1, "", "performance_only"], [113, 4, 1, "", "random_seed"], [113, 4, 1, "", "resume_path"], [113, 4, 1, "", "sampling_size"], [113, 4, 1, "", "strategy"], [113, 4, 1, "", "tensorboard"], [113, 4, 1, "", "timeout"]], "intel_extension_for_transformers.optimization.distillation": [[114, 2, 1, "", "DistillationCriterionMode"]], "intel_extension_for_transformers.optimization.dynamic": [[115, 0, 0, "-", "drop_and_restore_utils"], [116, 0, 0, "-", "evolution"]], "intel_extension_for_transformers.optimization.dynamic.drop_and_restore_utils": [[115, 1, 1, "", "sample_layer_configuration"], [115, 1, 1, "", "sample_length_configuration"]], "intel_extension_for_transformers.optimization.dynamic.evolution": [[116, 2, 1, "", "Evolution"], [116, 1, 1, "", "approx_ratio"], [116, 1, 1, "", "inverse"], [116, 1, 1, "", "store2str"]], "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution": [[116, 3, 1, "", "add_gene"], [116, 3, 1, "", "convex_hull"], [116, 3, 1, "", "crossover"], [116, 3, 1, "", "get_store"], [116, 3, 1, "", "load_store"], [116, 3, 1, "", "mutate"], [116, 3, 1, "", "pareto_frontier"], [116, 3, 1, "", "save_population"], [116, 3, 1, "", "save_store"], [116, 3, 1, "", "set_lower_constraint"], [116, 3, 1, "", "set_upper_constraint"]], "intel_extension_for_transformers.optimization.mixture": [[119, 0, 0, "-", "auto_distillation"]], "intel_extension_for_transformers.optimization.mixture.auto_distillation": [[119, 2, 1, "", "AutoDistillation"], [119, 2, 1, "", "BayesianOptimizationSearcher"], [119, 2, 1, "", "GridSearcher"], [119, 2, 1, "", "RandomSearcher"], [119, 2, 1, "", "Searcher"], [119, 1, 1, "", "create_search_space_pool"], [119, 1, 1, "", "find_pareto_front"]], "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation": [[119, 4, 1, "", "advisor"], [119, 3, 1, "", "create_distillers"], [119, 3, 1, "", "dump_search_results"], [119, 3, 1, "", "estimate"], [119, 4, 1, "", "eval_func"], [119, 3, 1, "", "find_best_model_archs"], [119, 3, 1, "", "init_by_cfg"], [119, 3, 1, "", "init_search_cfg"], [119, 3, 1, "", "load_search_results"], [119, 3, 1, "", "metrics_conversion"], [119, 3, 1, "", "model_arch_proposition"], [119, 3, 1, "", "params_vec2params_dict"], [119, 3, 1, "", "search"], [119, 4, 1, "", "student_model"], [119, 4, 1, "", "teacher_model"], [119, 4, 1, "", "train_func"]], "intel_extension_for_transformers.optimization.mixture.auto_distillation.BayesianOptimizationSearcher": [[119, 3, 1, "", "feedback"], [119, 3, 1, "", "indices2params_vec"], [119, 3, 1, "", "suggestion"]], "intel_extension_for_transformers.optimization.mixture.auto_distillation.GridSearcher": [[119, 3, 1, "", "suggestion"]], "intel_extension_for_transformers.optimization.mixture.auto_distillation.RandomSearcher": [[119, 3, 1, "", "suggestion"]], "intel_extension_for_transformers.optimization.mixture.auto_distillation.Searcher": [[119, 3, 1, "", "feedback"], [119, 3, 1, "", "params_vec2params_dict"], [119, 3, 1, "", "suggestion"]], "intel_extension_for_transformers.optimization.model": [[121, 2, 1, "", "OptimizedModel"]], "intel_extension_for_transformers.optimization.model.OptimizedModel": [[121, 3, 1, "", "from_pretrained"]], "intel_extension_for_transformers.optimization.optimizer": [[122, 2, 1, "", "NoTrainerOptimizer"], [122, 2, 1, "", "Orchestrate_optimizer"]], "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer": [[122, 4, 1, "", "calib_dataloader"], [122, 4, 1, "", "calib_func"], [122, 3, 1, "", "distill"], [122, 4, 1, "", "eval_func"], [122, 3, 1, "", "init_distiller"], [122, 3, 1, "", "init_pruner"], [122, 3, 1, "", "init_quantizer"], [122, 4, 1, "", "provider"], [122, 3, 1, "", "prune"], [122, 3, 1, "", "quantize"], [122, 4, 1, "", "train_func"]], "intel_extension_for_transformers.optimization.optimizer.Orchestrate_optimizer": [[122, 3, 1, "", "fit"]], "intel_extension_for_transformers.optimization.optimizer_tf": [[123, 2, 1, "", "TFOptimization"]], "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization": [[123, 3, 1, "", "autodistill"], [123, 3, 1, "", "build_train_func"], [123, 3, 1, "", "builtin_eval_func"], [123, 3, 1, "", "distill"], [123, 4, 1, "", "eval_dataset"], [123, 4, 1, "", "eval_func"], [123, 3, 1, "", "init_distiller"], [123, 3, 1, "", "init_pruner"], [123, 3, 1, "", "init_quantizer"], [123, 4, 1, "", "input_names"], [123, 4, 1, "", "inputs"], [123, 3, 1, "", "model_builder_builtin"], [123, 4, 1, "", "output_names"], [123, 3, 1, "", "prune"], [123, 3, 1, "", "quantize"], [123, 4, 1, "", "train_dataset"], [123, 4, 1, "", "train_func"]], "intel_extension_for_transformers.optimization.pipeline": [[124, 1, 1, "", "infer_framework_load_model"]], "intel_extension_for_transformers.optimization.pruning": [[125, 2, 1, "", "PrunerConfig"], [125, 2, 1, "", "PruningMode"]], "intel_extension_for_transformers.optimization.pytorch_pruner": [[127, 0, 0, "-", "patterns"], [128, 0, 0, "-", "prune_utils"], [129, 0, 0, "-", "pruner"], [130, 0, 0, "-", "pruning"], [131, 0, 0, "-", "scheduler"]], "intel_extension_for_transformers.optimization.pytorch_pruner.patterns": [[127, 1, 1, "", "get_pattern"], [127, 1, 1, "", "register_pattern"]], "intel_extension_for_transformers.optimization.pytorch_pruner.prune_utils": [[128, 1, 1, "", "parse_not_to_prune"], [128, 1, 1, "", "parse_to_prune"]], "intel_extension_for_transformers.optimization.pytorch_pruner.pruner": [[129, 2, 1, "", "SnipPruner"], [129, 1, 1, "", "get_pruner"], [129, 1, 1, "", "register_pruners"]], "intel_extension_for_transformers.optimization.pytorch_pruner.scheduler": [[131, 1, 1, "", "get_scheduler"], [131, 1, 1, "", "register_scheduler"]], "intel_extension_for_transformers.optimization.quantization": [[132, 2, 1, "", "QuantizationMode"]], "intel_extension_for_transformers.optimization.trainer": [[133, 2, 1, "", "BaseTrainer"], [133, 2, 1, "", "NLPSeq2SeqTrainer"], [133, 2, 1, "", "NLPTrainer"]], "intel_extension_for_transformers.optimization.trainer.BaseTrainer": [[133, 3, 1, "", "auto_distil_evaluation_loop"], [133, 3, 1, "", "autodistillation"], [133, 3, 1, "", "builtin_eval_func"], [133, 3, 1, "", "builtin_train_func"], [133, 4, 1, "", "calib_dataloader"], [133, 3, 1, "", "compute_loss"], [133, 3, 1, "", "create_optimizer_builtin"], [133, 3, 1, "", "distill"], [133, 4, 1, "", "eval_func"], [133, 3, 1, "", "export_to_bf16_onnx"], [133, 3, 1, "", "export_to_fp32_onnx"], [133, 3, 1, "", "export_to_int8_onnx"], [133, 3, 1, "", "export_to_jit"], [133, 3, 1, "", "export_to_onnx"], [133, 3, 1, "", "init_distiller"], [133, 3, 1, "", "init_pruner"], [133, 3, 1, "", "init_quantizer"], [133, 3, 1, "", "model_builder_builtin"], [133, 3, 1, "", "orchestrate_optimizations"], [133, 4, 1, "", "provider"], [133, 3, 1, "", "prune"], [133, 3, 1, "", "quantize"], [133, 4, 1, "", "resuming_checkpoint"], [133, 3, 1, "", "run_evolutionary_search"], [133, 3, 1, "", "set_dynamic_config"], [133, 3, 1, "", "train"], [133, 4, 1, "", "train_func"], [133, 3, 1, "", "training_step"], [133, 3, 1, "", "training_step_length_adaptive"]], "intel_extension_for_transformers.optimization.trainer.NLPSeq2SeqTrainer": [[133, 3, 1, "", "builtin_eval_func"], [133, 4, 1, "", "max_length"], [133, 4, 1, "", "num_beams"]], "intel_extension_for_transformers.optimization.utils": [[135, 0, 0, "-", "metrics"], [136, 0, 0, "-", "models"], [139, 0, 0, "-", "objectives"], [140, 0, 0, "-", "utility"], [141, 0, 0, "-", "utility_tf"]], "intel_extension_for_transformers.optimization.utils.metrics": [[135, 2, 1, "", "Metric"]], "intel_extension_for_transformers.optimization.utils.models": [[137, 0, 0, "-", "modeling_bert_dynamic"], [138, 0, 0, "-", "modeling_roberta_dynamic"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic": [[137, 2, 1, "", "BertEmbeddings"], [137, 2, 1, "", "BertForMaskedLM"], [137, 2, 1, "", "BertForMultipleChoice"], [137, 2, 1, "", "BertForNextSentencePrediction"], [137, 2, 1, "", "BertForPreTraining"], [137, 2, 1, "", "BertForPreTrainingOutput"], [137, 2, 1, "", "BertForQuestionAnswering"], [137, 2, 1, "", "BertForSequenceClassification"], [137, 2, 1, "", "BertForTokenClassification"], [137, 2, 1, "", "BertLMHeadModel"], [137, 2, 1, "", "BertModel"], [137, 2, 1, "", "BertPreTrainedModel"], [137, 1, 1, "", "load_tf_weights_in_bert"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForMaskedLM": [[137, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForMultipleChoice": [[137, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForNextSentencePrediction": [[137, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForPreTraining": [[137, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForQuestionAnswering": [[137, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForSequenceClassification": [[137, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForTokenClassification": [[137, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertLMHeadModel": [[137, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertModel": [[137, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic": [[138, 2, 1, "", "RobertaAttention"], [138, 2, 1, "", "RobertaClassificationHead"], [138, 2, 1, "", "RobertaEmbeddings"], [138, 2, 1, "", "RobertaEncoder"], [138, 2, 1, "", "RobertaForCausalLM"], [138, 2, 1, "", "RobertaForMaskedLM"], [138, 2, 1, "", "RobertaForMultipleChoice"], [138, 2, 1, "", "RobertaForQuestionAnswering"], [138, 2, 1, "", "RobertaForSequenceClassification"], [138, 2, 1, "", "RobertaForTokenClassification"], [138, 2, 1, "", "RobertaIntermediate"], [138, 2, 1, "", "RobertaLMHead"], [138, 2, 1, "", "RobertaLayer"], [138, 2, 1, "", "RobertaModel"], [138, 2, 1, "", "RobertaOutput"], [138, 2, 1, "", "RobertaPooler"], [138, 2, 1, "", "RobertaPreTrainedModel"], [138, 2, 1, "", "RobertaSelfAttention"], [138, 2, 1, "", "RobertaSelfOutput"], [138, 1, 1, "", "create_position_ids_from_input_ids"], [138, 1, 1, "", "expand_gather"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaAttention": [[138, 3, 1, "", "forward"], [138, 3, 1, "", "prune_heads"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaClassificationHead": [[138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaEmbeddings": [[138, 3, 1, "", "create_position_ids_from_inputs_embeds"], [138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaEncoder": [[138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForCausalLM": [[138, 3, 1, "", "forward"], [138, 3, 1, "", "get_output_embeddings"], [138, 3, 1, "", "prepare_inputs_for_generation"], [138, 3, 1, "", "set_output_embeddings"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForMaskedLM": [[138, 3, 1, "", "forward"], [138, 3, 1, "", "get_output_embeddings"], [138, 3, 1, "", "set_output_embeddings"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForMultipleChoice": [[138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForQuestionAnswering": [[138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForSequenceClassification": [[138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForTokenClassification": [[138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaIntermediate": [[138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaLMHead": [[138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaLayer": [[138, 3, 1, "", "feed_forward_chunk"], [138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaModel": [[138, 3, 1, "", "forward"], [138, 3, 1, "", "get_input_embeddings"], [138, 3, 1, "", "set_input_embeddings"], [138, 3, 1, "", "set_length_config"], [138, 3, 1, "", "set_output_attentions"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaOutput": [[138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaPooler": [[138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaPreTrainedModel": [[138, 3, 1, "", "update_keys_to_ignore"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaSelfAttention": [[138, 3, 1, "", "forward"], [138, 3, 1, "", "transpose_for_scores"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaSelfOutput": [[138, 3, 1, "", "forward"]], "intel_extension_for_transformers.optimization.utils.objectives": [[139, 2, 1, "", "Objective"]], "intel_extension_for_transformers.optimization.utils.objectives.Objective": [[139, 3, 1, "", "modelsize"], [139, 3, 1, "", "performance"]], "intel_extension_for_transformers.optimization.utils.utility": [[140, 1, 1, "", "distributed_init"]], "intel_extension_for_transformers.optimization.utils.utility_tf": [[141, 2, 1, "", "TFDataloader"], [141, 1, 1, "", "distributed_init"], [141, 1, 1, "", "get_filepath"], [141, 1, 1, "", "keras2SavedModel"]], "intel_extension_for_transformers.preprocessing": [[142, 0, 0, "-", "data_augmentation"], [144, 0, 0, "-", "utils"]], "intel_extension_for_transformers.preprocessing.utils": [[144, 2, 1, "", "AugmenterType"]], "test_add_cls_token": [[146, 2, 1, "", "TestAddClsToken"]], "test_add_cls_token.TestAddClsToken": [[146, 3, 1, "", "setUpClass"], [146, 3, 1, "", "tearDownClass"]], "test_attention_output_layer_norm_length_adaptive_keep_indices": [[147, 2, 1, "", "TestAttentionReshape"]], "test_attention_output_layer_norm_length_adaptive_keep_indices.TestAttentionReshape": [[147, 3, 1, "", "setUpClass"], [147, 3, 1, "", "tearDownClass"]], "test_attention_reshape": [[148, 2, 1, "", "TestAttentionReshape"]], "test_attention_reshape.TestAttentionReshape": [[148, 3, 1, "", "setUpClass"], [148, 3, 1, "", "tearDownClass"]], "test_conv_reshape": [[149, 2, 1, "", "TestConvReshape"]], "test_conv_reshape.TestConvReshape": [[149, 3, 1, "", "setUpClass"], [149, 3, 1, "", "tearDownClass"]], "test_embeddingbag": [[150, 2, 1, "", "TestEmbeddingBag"]], "test_embeddingbag.TestEmbeddingBag": [[150, 3, 1, "", "setUpClass"], [150, 3, 1, "", "tearDownClass"]], "test_execution_options": [[151, 2, 1, "", "TestExecutionOptions"]], "test_execution_options.TestExecutionOptions": [[151, 3, 1, "", "setUpClass"], [151, 3, 1, "", "tearDownClass"]], "test_gelu": [[152, 2, 1, "", "TestGelu"]], "test_gelu.TestGelu": [[152, 3, 1, "", "setUpClass"], [152, 3, 1, "", "tearDownClass"]], "test_graph_dispatch": [[153, 2, 1, "", "TestGraphDispatch"]], "test_graph_dispatch.TestGraphDispatch": [[153, 3, 1, "", "setUpClass"], [153, 3, 1, "", "tearDownClass"]], "test_insert_input_output_data": [[154, 2, 1, "", "TestInsertInputOuputData"]], "test_insert_input_output_data.TestInsertInputOuputData": [[154, 3, 1, "", "setUpClass"], [154, 3, 1, "", "tearDownClass"]], "test_is_supported_onnx_graph": [[155, 2, 1, "", "TestIsSupportedOnnxGraph"]], "test_is_supported_onnx_graph.TestIsSupportedOnnxGraph": [[155, 3, 1, "", "setUpClass"], [155, 3, 1, "", "tearDownClass"], [155, 3, 1, "", "test_is_supported_onnx_graph"]], "test_last_layer_shape": [[156, 2, 1, "", "TestLastLayerShape"]], "test_last_layer_shape.TestLastLayerShape": [[156, 3, 1, "", "setUpClass"], [156, 3, 1, "", "tearDownClass"]], "test_layer_norm_with_reduce_mean": [[157, 2, 1, "", "TestLayerNormWithReduceMean"]], "test_layer_norm_with_reduce_mean.TestLayerNormWithReduceMean": [[157, 3, 1, "", "setUpClass"], [157, 3, 1, "", "tearDownClass"]], "test_main": [[158, 2, 1, "", "TestMain"]], "test_main.TestMain": [[158, 3, 1, "", "setUpClass"], [158, 3, 1, "", "tearDownClass"]], "test_matmul_with_bias_relu": [[159, 2, 1, "", "TestMatmulWithBiasRelu"]], "test_matmul_with_bias_relu.TestMatmulWithBiasRelu": [[159, 3, 1, "", "setUpClass"], [159, 3, 1, "", "tearDownClass"]], "test_matmul_with_bias_sigmoid": [[160, 2, 1, "", "TestMatMulWithBiasSigmoid"]], "test_matmul_with_bias_sigmoid.TestMatMulWithBiasSigmoid": [[160, 3, 1, "", "setUpClass"], [160, 3, 1, "", "tearDownClass"]], "test_matmul_with_bias_tanh": [[161, 2, 1, "", "TestMatmulWithBiasTanh"]], "test_matmul_with_bias_tanh.TestMatmulWithBiasTanh": [[161, 3, 1, "", "setUpClass"], [161, 3, 1, "", "tearDownClass"]], "test_merged_embeddingbag": [[162, 2, 1, "", "TestMergedEmbeddingbag"]], "test_merged_embeddingbag.TestMergedEmbeddingbag": [[162, 3, 1, "", "setUpClass"], [162, 3, 1, "", "tearDownClass"]], "test_onnx_utils": [[164, 2, 1, "", "TestOnnxUtils"]], "test_onnx_utils.TestOnnxUtils": [[164, 3, 1, "", "setUpClass"], [164, 3, 1, "", "tearDownClass"]], "test_ops": [[165, 2, 1, "", "TestOps"]], "test_ops.TestOps": [[165, 3, 1, "", "setUpClass"], [165, 3, 1, "", "tearDownClass"]], "test_padding_sequence": [[166, 2, 1, "", "TestPaddingSequence"]], "test_padding_sequence.TestPaddingSequence": [[166, 3, 1, "", "setUpClass"], [166, 3, 1, "", "tearDownClass"]], "test_pattern_dispatch": [[167, 2, 1, "", "TestPatternDispatch"]], "test_pattern_dispatch.TestPatternDispatch": [[167, 3, 1, "", "setUpClass"], [167, 3, 1, "", "tearDownClass"]], "test_position_embeddings": [[168, 2, 1, "", "TestPositionEmbeddings"]], "test_position_embeddings.TestPositionEmbeddings": [[168, 3, 1, "", "setUpClass"], [168, 3, 1, "", "tearDownClass"]], "test_qkv_merge": [[169, 2, 1, "", "TestQKVMerge"]], "test_qkv_merge.TestQKVMerge": [[169, 3, 1, "", "setUpClass"], [169, 3, 1, "", "tearDownClass"]], "test_qkv_reshape": [[170, 2, 1, "", "TestAttentionReshape"]], "test_qkv_reshape.TestAttentionReshape": [[170, 3, 1, "", "setUpClass"], [170, 3, 1, "", "tearDownClass"]], "test_quant_onnx_execute": [[171, 2, 1, "", "TestQuantOnnxExecute"]], "test_quant_onnx_execute.TestQuantOnnxExecute": [[171, 3, 1, "", "setUpClass"], [171, 3, 1, "", "tearDownClass"]], "test_reshape_after_restore_hidden_states": [[172, 2, 1, "", "TestLayerNormWithReduceMean"]], "test_reshape_after_restore_hidden_states.TestLayerNormWithReduceMean": [[172, 3, 1, "", "setUpClass"], [172, 3, 1, "", "tearDownClass"]], "test_reshape_before_and_after_attention_out_layer_norm_gather_elements": [[173, 2, 1, "", "TestAttentionReshape"]], "test_reshape_before_and_after_attention_out_layer_norm_gather_elements.TestAttentionReshape": [[173, 3, 1, "", "setUpClass"], [173, 3, 1, "", "tearDownClass"]], "test_reshape_before_restore_hidden_states": [[174, 2, 1, "", "TestLayerNormWithReduceMean"]], "test_reshape_before_restore_hidden_states.TestLayerNormWithReduceMean": [[174, 3, 1, "", "setUpClass"], [174, 3, 1, "", "tearDownClass"]], "test_start_end_logits": [[175, 2, 1, "", "TestStartEndLogits"]], "test_start_end_logits.TestStartEndLogits": [[175, 3, 1, "", "setUpClass"], [175, 3, 1, "", "tearDownClass"]], "test_tf_utils": [[176, 2, 1, "", "TestTfUtils"]], "test_tf_utils.TestTfUtils": [[176, 3, 1, "", "setUpClass"], [176, 3, 1, "", "tearDownClass"]], "test_token_type_embeddings": [[177, 2, 1, "", "TestTokenTypeEmbeddings"]], "test_token_type_embeddings.TestTokenTypeEmbeddings": [[177, 3, 1, "", "setUpClass"], [177, 3, 1, "", "tearDownClass"]], "test_transpose": [[178, 2, 1, "", "TestTranspose"]], "test_transpose.TestTranspose": [[178, 3, 1, "", "setUpClass"], [178, 3, 1, "", "tearDownClass"]], "test_transpose_batch_matmul": [[179, 2, 1, "", "TestTransposeBatchMatMul"]], "test_transpose_batch_matmul.TestTransposeBatchMatMul": [[179, 3, 1, "", "setUpClass"], [179, 3, 1, "", "tearDownClass"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "titleterms": {"intel_extension_for_transform": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 191, 196], "backend": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 194, 195, 220], "neural_engin": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "compil": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 201], "modul": [1, 2, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, 137, 138, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, 137, 138, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 223], "function": [1, 8, 9, 12, 13, 32, 43, 74, 92, 109, 112, 115, 116, 119, 124, 127, 128, 129, 131, 137, 138, 140, 141], "extractor": [2, 3, 4, 5], "class": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 116, 118, 119, 121, 122, 123, 125, 129, 132, 133, 135, 137, 138, 139, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 218], "submodul": [3, 7, 9, 10, 32, 74, 111, 117, 118, 120, 134, 136], "packag": [3, 7, 9, 10, 32, 74, 118], "onnx_extractor": 4, "tf_extractor": 5, "graph": [6, 7, 195, 199, 200], "graph_util": 8, "subpackag": [9, 110, 118], "loader": [10, 11], "logger": 12, "onnx_util": 13, "op": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 197, 199], "all": 14, "assert": 15, "batch_matmul": 16, "batch_matmul_v2": 17, "bias_add": 18, "cast": 19, "concat": 20, "conv": 21, "empty_op": 22, "expand_dim": 23, "fused_batch_matmul_v2": 24, "fused_batch_norm_v3": 25, "fused_gemm": 26, "fused_matmul": 27, "gather": 28, "gather_el": 29, "gelu": [30, 72], "gemm": 31, "attribut": [32, 74, 197], "iterator_get_next": 33, "iterator_v2": 34, "layer_norm": [35, 81], "map_and_batch_dataset": 36, "matmul": 37, "mean": [38, 209], "mkl_layer_norm": 39, "model_dataset": 40, "one_hot": 41, "onnx_input": 42, "optimize_dataset": 44, "pack": 45, "placehold": 46, "quantize_linear": 47, "quantize_v2": 48, "quantized_fused_matmul_and_dequant": 49, "quantized_matmul_with_bias_and_dequant": 50, "reduce_mean": 51, "reduce_sum": 52, "reshap": 53, "scatter_el": 54, "softmax": [55, 216], "split": 56, "squeez": 57, "strided_slic": 58, "tensor": 59, "top_k": 60, "transpos": 61, "unpack": 62, "unsqueez": 63, "sub_graph": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "add_cls_token": 64, "add_embed": 65, "attention_mask_length_adaptive_keep_indic": 66, "attention_output_layer_norm_length_adaptive_keep_indic": 67, "attention_reshap": 68, "collect_quant_info": 69, "conv_reshap": 70, "embeddingbag": 71, "generate_sequ": 73, "input_data": 75, "input_fil": 76, "insert_bf16_nod": 77, "insert_quant_nod": 78, "interact_featur": 79, "last_layer_shap": 80, "layer_norm_with_reduce_mean": 82, "matmul_with_bia": 83, "matmul_with_bias_add": 84, "matmul_with_bias_gelu": 85, "matmul_with_bias_relu": 86, "matmul_with_bias_sigmoid": 87, "matmul_with_bias_tanh": 88, "merged_embeddingbag": 89, "output_data": 90, "padding_sequ": 91, "pattern": [92, 127, 197, 199, 200, 204, 210, 211, 213], "position_embed": 93, "position_embeddings_v1": 94, "qkv_merg": 95, "qkv_reshap": 96, "quantize_fus": 97, "reshape_after_restore_hidden_st": 98, "reshape_before_and_after_attention_out_layer_norm_gather_el": 99, "reshape_before_restore_hidden_st": 100, "reshape_fus": 101, "restore_hidden_states_in_length_adaptive_update_indic": 102, "start_end_logit": 103, "subgraph_match": 104, "token_type_embed": 105, "token_type_embeddings_v1": 106, "transpose_batch_matmul": 107, "word_embed": 108, "tf_util": 109, "optim": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 184], "benchmark": [112, 185, 202, 216], "config": [113, 180, 197, 199], "distil": [114, 180, 182, 192, 193], "dynam": [115, 116, 117, 222], "drop_and_restore_util": 115, "evolut": 116, "mixtur": [119, 120], "auto_distil": 119, "model": [121, 136, 137, 138, 182, 194, 195, 198, 201, 202, 220], "optimizer_tf": [123, 180], "pipelin": [124, 180, 220], "prune": [125, 130, 182, 193, 221], "pytorch_prun": [126, 127, 128, 129, 130, 131], "prune_util": 128, "pruner": 129, "schedul": 131, "quantiz": [132, 182, 193, 202, 222], "trainer": [133, 180, 192, 221, 222], "util": [134, 135, 136, 137, 138, 139, 140, 141, 144], "metric": [135, 192, 218, 221, 222], "modeling_bert_dynam": 137, "modeling_roberta_dynam": 138, "object": [139, 219, 222], "utility_tf": 141, "preprocess": [142, 143, 144], "data_augment": 142, "version": [145, 196], "test_add_cls_token": 146, "test_attention_output_layer_norm_length_adaptive_keep_indic": 147, "test_attention_reshap": 148, "test_conv_reshap": 149, "test_embeddingbag": 150, "test_execution_opt": 151, "test_gelu": 152, "test_graph_dispatch": 153, "test_insert_input_output_data": 154, "test_is_supported_onnx_graph": 155, "test_last_layer_shap": 156, "test_layer_norm_with_reduce_mean": 157, "test_main": 158, "test_matmul_with_bias_relu": 159, "test_matmul_with_bias_sigmoid": 160, "test_matmul_with_bias_tanh": 161, "test_merged_embeddingbag": 162, "test_model": 163, "test_onnx_util": 164, "test_op": 165, "test_padding_sequ": 166, "test_pattern_dispatch": 167, "test_position_embed": 168, "test_qkv_merg": 169, "test_qkv_reshap": 170, "test_quant_onnx_execut": 171, "test_reshape_after_restore_hidden_st": 172, "test_reshape_before_and_after_attention_out_layer_norm_gather_el": 173, "test_reshape_before_restore_hidden_st": 174, "test_start_end_logit": 175, "test_tf_util": 176, "test_token_type_embed": 177, "test_transpos": 178, "test_transpose_batch_matmul": 179, "autodistil": 180, "design": [180, 202, 210, 211, 213], "framework": [180, 208, 209], "criterion": [180, 192], "knowledgedistillationloss": 180, "intermediatelayersknowledgedistillationloss": 180, "usag": [180, 192, 194, 208, 209, 216, 221], "pytorch": [180, 192, 193], "api": [180, 183, 194, 198, 206], "flash": 180, "exampl": [180, 193, 194, 198, 201, 216, 219, 220], "regular": 180, "tensorflow": [180, 192, 193], "secur": 181, "polici": 181, "report": 181, "vulner": 181, "intel": [182, 187, 190, 193, 224, 227], "extens": [182, 187, 190, 193, 224, 227], "transform": [182, 187, 188, 190, 193, 206, 224, 225, 227], "acceler": [182, 188, 206, 225], "base": [182, 193], "platform": [182, 205, 215], "what": 182, "doe": 182, "offer": 182, "document": [182, 187, 224], "instal": [182, 191, 196, 202, 206], "releas": 182, "binari": [182, 195, 196], "from": [182, 196], "sourc": 182, "get": [182, 191, 198, 202, 218, 222], "start": [182, 191, 218, 222], "data": [182, 191, 211, 215], "augment": [182, 191], "neural": [182, 189, 193, 195, 196, 226], "engin": [182, 189, 193, 195, 196, 199, 201, 202, 226], "length": [182, 193], "adapt": [182, 193], "librari": [182, 188, 206, 225], "system": 182, "requir": 182, "valid": [182, 215], "hardwar": 182, "environ": [182, 202], "softwar": 182, "select": 182, "public": 182, "event": 182, "introduct": [185, 191, 192, 194, 197, 198, 199, 200, 201, 204, 206, 208, 209, 210, 212, 218, 219, 220, 221, 222], "pytorchbenchmark": 185, "executorbenchmark": 185, "featur": [186, 208, 209, 222, 223], "welcom": [187, 224], "section": [187, 224], "depend": 191, "script": [191, 192, 221, 222], "paramet": 191, "support": [191, 194, 201, 218, 219, 222], "text": 191, "gener": [191, 195], "argument": 191, "knowledg": [192, 193], "intermedi": 192, "layer": 192, "creat": [192, 200, 221, 222], "an": [192, 201, 221, 222], "instanc": [192, 221, 222], "option": [192, 199, 221, 222], "distillationconfig": 192, "stock": 193, "ipex": 193, "auto": 193, "na": 193, "orchestr": 193, "refer": [193, 206], "deploy": 193, "dens": 193, "spars": [193, 198, 211], "export": 194, "onnx": [194, 195, 201, 202], "matrix": [194, 219, 222], "fp32": 194, "bf16": 194, "int8": [194, 202, 220], "For": [194, 216], "executor": [194, 203, 220], "deploi": [195, 196], "integr": 195, "1": [195, 198, 202, 203], "architectur": 195, "2": [195, 202, 203], "tf": 195, "us": 195, "infer": [195, 207, 220], "through": 195, "run": [195, 198, 202], "3": 195, "manual": 195, "custom": [195, 197, 203], "yaml": 195, "weight": 195, "build": [195, 206, 216], "4": [195, 215], "prerequisit": [196, 202], "stabl": 196, "pip": 196, "bare": 196, "metal": 196, "add": [197, 203], "regist": [197, 203], "node": [197, 200], "type": [197, 221], "set": [197, 198], "map": [197, 200], "fuse": 197, "new": [197, 200], "after": 197, "fusion": [197, 200], "profil": [198, 214], "profl": 198, "you": 198, "can": 198, "onli": 198, "engine_profil": 198, "befor": 198, "python": 198, "c": 198, "part": 198, "csv": 198, "ratio": 198, "oper": [198, 203], "total": 198, "level": 198, "json": 198, "iter": 198, "tune": [199, 202, 222], "dispatch": 199, "best": 199, "kernel": [199, 206, 210, 211, 213, 216], "relat": 199, "runtim": 199, "how": 199, "turn": 199, "mechan": 199, "more": 199, "dict": 200, "obtain": 200, "necessari": 200, "inform": 200, "construct": 200, "establish": 200, "connect": 200, "remov": [200, 204], "old": 200, "insert": 200, "ir": [201, 202], "format": [201, 211, 217], "prepar": [201, 202], "low": 202, "precis": 202, "dataset": 202, "To": 202, "its": 202, "accuraci": [202, 222], "h": 203, "includ": 203, "cpp": 203, "src": 203, "recogn": 204, "represent": 204, "pars": 204, "list": [204, 221], "search": 204, "each": 204, "straight": 204, "chain": 204, "splice": 204, "sub": 204, "main": 204, "duplic": 204, "result": 204, "configur": [205, 215], "test": 206, "perform": [206, 214, 215], "user": [206, 208, 209], "sparse_matmul": [206, 216], "develop": [206, 208, 209, 216], "guid": 206, "memori": 207, "layout": 207, "spmm_vnni": [207, 216], "cach": 207, "issu": 207, "3d": 207, "param_typ": [208, 209], "hpp": [208, 209], "operator_desc": [208, 209], "jit_binaryop_injector": 208, "": [208, 209], "perspect": [208, 209], "alpha": 209, "beta": 209, "scale": 209, "jit_eltwise_injector": 209, "amx": 210, "brief": 210, "isa": 210, "reorder": [210, 212, 213], "avx512f": 211, "kei": 211, "instruct": 211, "loop": 211, "problem": 212, "statement": 212, "matmul_p2031_2013": 212, "matmul_avx512f_p2031_p2013": [212, 216], "matmul_noperm_p2031_p1302": 212, "matmul_vnni_noperm_p2013_p1302": 212, "beforehand": 212, "vnni": 213, "On": 213, "fly": 213, "activ": 213, "candid": 213, "verbos": 214, "vtune": 214, "sde": 214, "singl": 215, "thread": 215, "multi": 215, "spmm_avx512f": 216, "spmm_amx_bf16_x16": 216, "eltwiseop": 216, "layernorm_ba": 216, "transpose_matmul": 216, "matmul_vnni_noperm_p2031_p1302": 216, "attent": 216, "input": 217, "summari": 218, "prunerconfig": 221, "pruningconfig": 221, "fundament": 222, "approach": 222, "post": 222, "train": 222, "static": 222, "awar": 222, "quantizationconfig": 222}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"intel_extension_for_transformers.backends": [[0, "module-intel_extension_for_transformers.backends"]], "intel_extension_for_transformers.backends.neural_engine.compile.compile": [[1, "module-intel_extension_for_transformers.backends.neural_engine.compile.compile"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [119, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [135, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"]], "Functions": [[1, "functions"], [8, "functions"], [9, "functions"], [12, "functions"], [13, "functions"], [32, "functions"], [43, "functions"], [74, "functions"], [92, "functions"], [109, "functions"], [112, "functions"], [115, "functions"], [116, "functions"], [119, "functions"], [124, "functions"], [127, "functions"], [128, "functions"], [129, "functions"], [131, "functions"], [137, "functions"], [138, "functions"], [140, "functions"], [141, "functions"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors.extractor": [[2, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors.extractor"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [116, "classes"], [118, "classes"], [119, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [125, "classes"], [129, "classes"], [132, "classes"], [133, "classes"], [135, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [141, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors": [[3, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors"]], "Submodules": [[3, "submodules"], [7, "submodules"], [9, "submodules"], [10, "submodules"], [32, "submodules"], [74, "submodules"], [111, "submodules"], [117, "submodules"], [118, "submodules"], [120, "submodules"], [134, "submodules"], [136, "submodules"]], "Package Contents": [[3, "package-contents"], [7, "package-contents"], [9, "package-contents"], [10, "package-contents"], [32, "package-contents"], [74, "package-contents"], [118, "package-contents"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors.onnx_extractor": [[4, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors.onnx_extractor"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors.tf_extractor": [[5, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors.tf_extractor"]], "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph": [[6, "module-intel_extension_for_transformers.backends.neural_engine.compile.graph.graph"]], "intel_extension_for_transformers.backends.neural_engine.compile.graph": [[7, "module-intel_extension_for_transformers.backends.neural_engine.compile.graph"]], "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils": [[8, "module-intel_extension_for_transformers.backends.neural_engine.compile.graph_utils"]], "intel_extension_for_transformers.backends.neural_engine.compile": [[9, "module-intel_extension_for_transformers.backends.neural_engine.compile"]], "Subpackages": [[9, "subpackages"], [110, "subpackages"], [118, "subpackages"]], "intel_extension_for_transformers.backends.neural_engine.compile.loaders": [[10, "module-intel_extension_for_transformers.backends.neural_engine.compile.loaders"]], "intel_extension_for_transformers.backends.neural_engine.compile.loaders.loader": [[11, "module-intel_extension_for_transformers.backends.neural_engine.compile.loaders.loader"]], "intel_extension_for_transformers.backends.neural_engine.compile.logger": [[12, "module-intel_extension_for_transformers.backends.neural_engine.compile.logger"]], "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils": [[13, "module-intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.all": [[14, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.all"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.assert": [[15, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.assert"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul": [[16, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2": [[17, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add": [[18, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.cast": [[19, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.cast"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.concat": [[20, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.concat"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.conv": [[21, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.conv"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops": [[22, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims": [[23, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_matmul_v2": [[24, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_matmul_v2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3": [[25, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm": [[26, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul": [[27, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather": [[28, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gather"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements": [[29, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu": [[30, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm": [[31, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops": [[32, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops"]], "Attributes": [[32, "attributes"], [74, "attributes"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next": [[33, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2": [[34, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization": [[35, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset": [[36, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul": [[37, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.mean": [[38, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.mean"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.mkl_layer_norm": [[39, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.mkl_layer_norm"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset": [[40, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot": [[41, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input": [[42, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.op": [[43, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.op"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset": [[44, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.pack": [[45, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.pack"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder": [[46, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear": [[47, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2": [[48, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_fused_matmul_and_dequantize": [[49, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_fused_matmul_and_dequantize"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize": [[50, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean": [[51, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum": [[52, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape": [[53, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements": [[54, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax": [[55, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.split": [[56, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.split"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze": [[57, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice": [[58, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor": [[59, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k": [[60, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose": [[61, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack": [[62, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze": [[63, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_cls_token": [[64, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_cls_token"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_embeddings": [[65, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_embeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_mask_length_adaptive_keep_indices": [[66, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_mask_length_adaptive_keep_indices"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_output_layer_norm_length_adaptive_keep_indices": [[67, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_output_layer_norm_length_adaptive_keep_indices"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_reshape": [[68, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_reshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.collect_quant_info": [[69, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.collect_quant_info"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.conv_reshape": [[70, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.conv_reshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.embeddingbag": [[71, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.embeddingbag"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.gelu": [[72, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.gelu"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.generate_sequence": [[73, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.generate_sequence"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph": [[74, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_data": [[75, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_data"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_file": [[76, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_file"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_bf16_node": [[77, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_bf16_node"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_quant_node": [[78, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_quant_node"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.interact_features": [[79, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.interact_features"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.last_layer_shape": [[80, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.last_layer_shape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm": [[81, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm_with_reduce_mean": [[82, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm_with_reduce_mean"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias": [[83, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_add": [[84, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_add"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_gelu": [[85, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_gelu"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_relu": [[86, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_relu"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_sigmoid": [[87, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_sigmoid"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_tanh": [[88, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_tanh"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.merged_embeddingbag": [[89, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.merged_embeddingbag"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.output_data": [[90, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.output_data"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.padding_sequence": [[91, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.padding_sequence"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern": [[92, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings": [[93, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings_v1": [[94, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings_v1"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_merge": [[95, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_merge"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_reshape": [[96, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_reshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.quantize_fusion": [[97, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.quantize_fusion"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_after_restore_hidden_states": [[98, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_after_restore_hidden_states"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_and_after_attention_out_layer_norm_gather_elements": [[99, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_and_after_attention_out_layer_norm_gather_elements"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_restore_hidden_states": [[100, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_restore_hidden_states"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_fusion": [[101, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_fusion"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.restore_hidden_states_in_length_adaptive_update_indices": [[102, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.restore_hidden_states_in_length_adaptive_update_indices"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.start_end_logits": [[103, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.start_end_logits"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.subgraph_matcher": [[104, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.subgraph_matcher"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings": [[105, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings_v1": [[106, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings_v1"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.transpose_batch_matmul": [[107, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.transpose_batch_matmul"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.word_embeddings": [[108, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.word_embeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.tf_utils": [[109, "module-intel_extension_for_transformers.backends.neural_engine.compile.tf_utils"]], "intel_extension_for_transformers.backends.neural_engine": [[110, "module-intel_extension_for_transformers.backends.neural_engine"]], "intel_extension_for_transformers": [[111, "module-intel_extension_for_transformers"]], "intel_extension_for_transformers.optimization.benchmark": [[112, "module-intel_extension_for_transformers.optimization.benchmark"]], "intel_extension_for_transformers.optimization.config": [[113, "module-intel_extension_for_transformers.optimization.config"]], "intel_extension_for_transformers.optimization.distillation": [[114, "module-intel_extension_for_transformers.optimization.distillation"]], "intel_extension_for_transformers.optimization.dynamic.drop_and_restore_utils": [[115, "module-intel_extension_for_transformers.optimization.dynamic.drop_and_restore_utils"]], "intel_extension_for_transformers.optimization.dynamic.evolution": [[116, "module-intel_extension_for_transformers.optimization.dynamic.evolution"]], "intel_extension_for_transformers.optimization.dynamic": [[117, "module-intel_extension_for_transformers.optimization.dynamic"]], "intel_extension_for_transformers.optimization": [[118, "module-intel_extension_for_transformers.optimization"]], "intel_extension_for_transformers.optimization.mixture.auto_distillation": [[119, "module-intel_extension_for_transformers.optimization.mixture.auto_distillation"]], "intel_extension_for_transformers.optimization.mixture": [[120, "module-intel_extension_for_transformers.optimization.mixture"]], "intel_extension_for_transformers.optimization.model": [[121, "module-intel_extension_for_transformers.optimization.model"]], "intel_extension_for_transformers.optimization.optimizer": [[122, "module-intel_extension_for_transformers.optimization.optimizer"]], "intel_extension_for_transformers.optimization.optimizer_tf": [[123, "module-intel_extension_for_transformers.optimization.optimizer_tf"]], "intel_extension_for_transformers.optimization.pipeline": [[124, "module-intel_extension_for_transformers.optimization.pipeline"]], "intel_extension_for_transformers.optimization.pruning": [[125, "module-intel_extension_for_transformers.optimization.pruning"]], "intel_extension_for_transformers.optimization.pytorch_pruner": [[126, "module-intel_extension_for_transformers.optimization.pytorch_pruner"]], "intel_extension_for_transformers.optimization.pytorch_pruner.patterns": [[127, "module-intel_extension_for_transformers.optimization.pytorch_pruner.patterns"]], "intel_extension_for_transformers.optimization.pytorch_pruner.prune_utils": [[128, "module-intel_extension_for_transformers.optimization.pytorch_pruner.prune_utils"]], "intel_extension_for_transformers.optimization.pytorch_pruner.pruner": [[129, "module-intel_extension_for_transformers.optimization.pytorch_pruner.pruner"]], "intel_extension_for_transformers.optimization.pytorch_pruner.pruning": [[130, "module-intel_extension_for_transformers.optimization.pytorch_pruner.pruning"]], "intel_extension_for_transformers.optimization.pytorch_pruner.scheduler": [[131, "module-intel_extension_for_transformers.optimization.pytorch_pruner.scheduler"]], "intel_extension_for_transformers.optimization.quantization": [[132, "module-intel_extension_for_transformers.optimization.quantization"]], "intel_extension_for_transformers.optimization.trainer": [[133, "module-intel_extension_for_transformers.optimization.trainer"]], "intel_extension_for_transformers.optimization.utils": [[134, "module-intel_extension_for_transformers.optimization.utils"]], "intel_extension_for_transformers.optimization.utils.metrics": [[135, "module-intel_extension_for_transformers.optimization.utils.metrics"]], "intel_extension_for_transformers.optimization.utils.models": [[136, "module-intel_extension_for_transformers.optimization.utils.models"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic": [[137, "module-intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic": [[138, "module-intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic"]], "intel_extension_for_transformers.optimization.utils.objectives": [[139, "module-intel_extension_for_transformers.optimization.utils.objectives"]], "intel_extension_for_transformers.optimization.utils.utility": [[140, "module-intel_extension_for_transformers.optimization.utils.utility"]], "intel_extension_for_transformers.optimization.utils.utility_tf": [[141, "module-intel_extension_for_transformers.optimization.utils.utility_tf"]], "intel_extension_for_transformers.preprocessing.data_augmentation": [[142, "module-intel_extension_for_transformers.preprocessing.data_augmentation"]], "intel_extension_for_transformers.preprocessing": [[143, "module-intel_extension_for_transformers.preprocessing"]], "intel_extension_for_transformers.preprocessing.utils": [[144, "module-intel_extension_for_transformers.preprocessing.utils"]], "intel_extension_for_transformers.version": [[145, "module-intel_extension_for_transformers.version"]], "test_add_cls_token": [[146, "module-test_add_cls_token"]], "test_attention_output_layer_norm_length_adaptive_keep_indices": [[147, "module-test_attention_output_layer_norm_length_adaptive_keep_indices"]], "test_attention_reshape": [[148, "module-test_attention_reshape"]], "test_conv_reshape": [[149, "module-test_conv_reshape"]], "test_embeddingbag": [[150, "module-test_embeddingbag"]], "test_execution_options": [[151, "module-test_execution_options"]], "test_gelu": [[152, "module-test_gelu"]], "test_graph_dispatch": [[153, "module-test_graph_dispatch"]], "test_insert_input_output_data": [[154, "module-test_insert_input_output_data"]], "test_is_supported_onnx_graph": [[155, "module-test_is_supported_onnx_graph"]], "test_last_layer_shape": [[156, "module-test_last_layer_shape"]], "test_layer_norm_with_reduce_mean": [[157, "module-test_layer_norm_with_reduce_mean"]], "test_main": [[158, "module-test_main"]], "test_matmul_with_bias_relu": [[159, "module-test_matmul_with_bias_relu"]], "test_matmul_with_bias_sigmoid": [[160, "module-test_matmul_with_bias_sigmoid"]], "test_matmul_with_bias_tanh": [[161, "module-test_matmul_with_bias_tanh"]], "test_merged_embeddingbag": [[162, "module-test_merged_embeddingbag"]], "test_model": [[163, "module-test_model"]], "test_onnx_utils": [[164, "module-test_onnx_utils"]], "test_ops": [[165, "module-test_ops"]], "test_padding_sequence": [[166, "module-test_padding_sequence"]], "test_pattern_dispatch": [[167, "module-test_pattern_dispatch"]], "test_position_embeddings": [[168, "module-test_position_embeddings"]], "test_qkv_merge": [[169, "module-test_qkv_merge"]], "test_qkv_reshape": [[170, "module-test_qkv_reshape"]], "test_quant_onnx_execute": [[171, "module-test_quant_onnx_execute"]], "test_reshape_after_restore_hidden_states": [[172, "module-test_reshape_after_restore_hidden_states"]], "test_reshape_before_and_after_attention_out_layer_norm_gather_elements": [[173, "module-test_reshape_before_and_after_attention_out_layer_norm_gather_elements"]], "test_reshape_before_restore_hidden_states": [[174, "module-test_reshape_before_restore_hidden_states"]], "test_start_end_logits": [[175, "module-test_start_end_logits"]], "test_tf_utils": [[176, "module-test_tf_utils"]], "test_token_type_embeddings": [[177, "module-test_token_type_embeddings"]], "test_transpose": [[178, "module-test_transpose"]], "test_transpose_batch_matmul": [[179, "module-test_transpose_batch_matmul"]], "AutoDistillation Design": [[180, "autodistillation-design"]], "AutoDistillation Pipeline": [[180, "autodistillation-pipeline"]], "Framework Class Design": [[180, "framework-class-design"]], "Criterion Class Design": [[180, "criterion-class-design"]], "KnowledgeDistillationLoss": [[180, "knowledgedistillationloss"]], "IntermediateLayersKnowledgeDistillationLoss": [[180, "intermediatelayersknowledgedistillationloss"]], "Usage": [[180, "usage"], [208, "usage"], [209, "usage"], [216, "usage"], [221, "usage"]], "Pytorch": [[180, "pytorch"]], "AutoDistillation API in Trainer": [[180, "autodistillation-api-in-trainer"]], "Flash distillation config example": [[180, "flash-distillation-config-example"]], "Regular distillation config example": [[180, "regular-distillation-config-example"]], "AutoDistillation config example": [[180, "autodistillation-config-example"], [180, "id1"]], "Tensorflow": [[180, "tensorflow"]], "AutoDistillation API in optimizer_tf": [[180, "autodistillation-api-in-optimizer-tf"]], "Distillation config example": [[180, "distillation-config-example"]], "Security Policy": [[181, "security-policy"]], "Report a Vulnerability": [[181, "report-a-vulnerability"]], "Intel\u00ae Extension for Transformers: Accelerating Transformer-based Models on Intel Platforms": [[182, "intel-extension-for-transformers-accelerating-transformer-based-models-on-intel-platforms"]], "What does Intel\u00ae Extension for Transformers offer?": [[182, "what-does-intel-extension-for-transformers-offer"]], "Documentation": [[182, "documentation"]], "Installation": [[182, "installation"], [196, "installation"], [206, "installation"]], "Release Binary Install": [[182, "release-binary-install"]], "Install From Source": [[182, "install-from-source"]], "Install Intel\u00ae Extension for Transformers": [[182, "install-intel-extension-for-transformers"]], "Getting Started": [[182, "getting-started"], [191, "getting-started"]], "Quantization": [[182, "quantization"], [193, "quantization"], [222, "quantization"]], "Pruning": [[182, "pruning"], [193, "pruning"], [221, "pruning"]], "Distillation": [[182, "distillation"], [192, "distillation"], [192, "id1"], [193, "distillation"]], "Data Augmentation": [[182, "data-augmentation"], [191, "data-augmentation"], [191, "id1"]], "Neural Engine": [[182, "neural-engine"], [189, "neural-engine"], [226, "neural-engine"]], "Quantized Length Adaptive Transformer": [[182, "quantized-length-adaptive-transformer"]], "Transformers-accelerated Neural Engine": [[182, "transformers-accelerated-neural-engine"]], "Transformers-accelerated Libraries": [[182, "transformers-accelerated-libraries"], [188, "transformers-accelerated-libraries"], [206, "transformers-accelerated-libraries"], [225, "transformers-accelerated-libraries"]], "System Requirements": [[182, "system-requirements"]], "Validated Hardware Environment": [[182, "validated-hardware-environment"]], "Validated Software Environment": [[182, "validated-software-environment"]], "Selected Publications/Events": [[182, "selected-publications-events"]], "APIs": [[183, "apis"]], "Optimization": [[184, "optimization"]], "Benchmark": [[185, "benchmark"]], "Introduction": [[185, "introduction"], [191, "introduction"], [192, "introduction"], [194, "introduction"], [197, "introduction"], [198, "introduction"], [199, "introduction"], [200, "introduction"], [201, "introduction"], [204, "introduction"], [206, "introduction"], [208, "introduction"], [209, "introduction"], [212, "introduction"], [218, "introduction"], [219, "introduction"], [220, "introduction"], [221, "introduction"], [222, "introduction"]], "PyTorchBenchmark": [[185, "pytorchbenchmark"]], "ExecutorBenchmark": [[185, "executorbenchmark"]], "Features": [[186, "features"], [223, "features"]], "Welcome to Intel\u00ae Extension for Transformers\u2019 documentation!": [[187, "welcome-to-intel-extension-for-transformers-documentation"], [224, "welcome-to-intel-extension-for-transformers-documentation"]], "Sections": [[187, "sections"], [224, "sections"]], "Intel\u00ae Extension for Transformers": [[190, "intel-extension-for-transformers"], [227, "intel-extension-for-transformers"]], "Install Dependency": [[191, "install-dependency"]], "Install Intel_Extension_for_Transformers": [[191, "install-intel-extension-for-transformers"]], "Script": [[191, "script"]], "Parameters of Data Augmentation": [[191, "parameters-of-data-augmentation"]], "Supported Augmenter": [[191, "supported-augmenter"]], "Text Generation Augmenter": [[191, "text-generation-augmenter"]], "Augmenter Arguments:": [[191, "augmenter-arguments"]], "Knowledge Distillation": [[192, "knowledge-distillation"], [193, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[192, "intermediate-layer-knowledge-distillation"]], "usage": [[192, "usage"]], "Pytorch Script:": [[192, "pytorch-script"]], "Tensorflow Script:": [[192, "tensorflow-script"]], "Create an Instance of Metric": [[192, "create-an-instance-of-metric"], [222, "create-an-instance-of-metric"]], "Create an Instance of Criterion(Optional)": [[192, "create-an-instance-of-criterion-optional"]], "Create an Instance of DistillationConfig": [[192, "create-an-instance-of-distillationconfig"]], "Distill with Trainer": [[192, "distill-with-trainer"]], "Examples": [[193, "examples"], [194, "examples"], [216, "examples"], [216, "id1"], [216, "id2"], [216, "id3"], [216, "id4"], [216, "id5"], [216, "id6"], [216, "id7"], [216, "id8"], [220, "examples"]], "Stock PyTorch Examples": [[193, "stock-pytorch-examples"]], "Intel Extension for Pytorch (IPEX) examples": [[193, "intel-extension-for-pytorch-ipex-examples"]], "Intel TensorFlow Examples": [[193, "intel-tensorflow-examples"]], "Length Adaptive Transformers": [[193, "length-adaptive-transformers"]], "Auto Distillation (NAS Based)": [[193, "auto-distillation-nas-based"]], "Orchestrate": [[193, "orchestrate"]], "Reference Deployment on Neural Engine": [[193, "reference-deployment-on-neural-engine"]], "Dense Reference Deployment on Neural Engine": [[193, "dense-reference-deployment-on-neural-engine"]], "Sparse Reference Deployment on Neural Engine": [[193, "sparse-reference-deployment-on-neural-engine"]], "Export to ONNX": [[194, "export-to-onnx"]], "Supported Model Export Matrix": [[194, "supported-model-export-matrix"]], "Export to FP32 ONNX Model": [[194, "export-to-fp32-onnx-model"]], "Export to BF16 ONNX Model": [[194, "export-to-bf16-onnx-model"]], "API usage": [[194, "api-usage"]], "Export to INT8 ONNX Model": [[194, "export-to-int8-onnx-model"]], "For executor backend": [[194, "for-executor-backend"]], "Deploy and Integration": [[195, "deploy-and-integration"]], "1. Architecture": [[195, "architecture"]], "2. Deploy a TF/ONNX model using Engine inference": [[195, "deploy-a-tf-onnx-model-using-engine-inference"]], "Generate the Engine Graph through TF/ONNX model": [[195, "generate-the-engine-graph-through-tf-onnx-model"]], "Run the inference by Engine": [[195, "run-the-inference-by-engine"], [195, "id1"]], "3. Manual customized yaml and weight binary to use Engine inference": [[195, "manual-customized-yaml-and-weight-binary-to-use-engine-inference"]], "Build the yaml and weight binary": [[195, "build-the-yaml-and-weight-binary"]], "4. Integrate Neural Engine as Backend": [[195, "integrate-neural-engine-as-backend"]], "Prerequisites": [[196, "prerequisites"]], "Install": [[196, "install"]], "Install stable version intel_extension_for_transformers from pip": [[196, "install-stable-version-intel-extension-for-transformers-from-pip"]], "Install Neural Engine binary to deploy bare metal engine": [[196, "install-neural-engine-binary-to-deploy-bare-metal-engine"]], "Add Customized Pattern": [[197, "add-customized-pattern"]], "Register the Nodes\u2019 Op Types": [[197, "register-the-nodes-op-types"]], "Set the Pattern Mapping Config and Register the Pattern": [[197, "set-the-pattern-mapping-config-and-register-the-pattern"]], "Fuse Pattern and Set Attributes of New Pattern after Fusion": [[197, "fuse-pattern-and-set-attributes-of-new-pattern-after-fusion"]], "Profiling": [[198, "profiling"]], "Profling API": [[198, "profling-api"]], "You can get profile only with ENGINE_PROFILING=1 before running model by python/c++ API.": [[198, "you-can-get-profile-only-with-engine-profiling-1-before-running-model-by-python-c-api"]], "Profiling Examples": [[198, "profiling-examples"]], "Parts of CSV Profiling": [[198, "parts-of-csv-profiling"]], "Sparse Ratio Setting Part": [[198, "sparse-ratio-setting-part"]], "Operator Profiling Part": [[198, "operator-profiling-part"]], "Total Profiling Part": [[198, "total-profiling-part"]], "Levels of JSON Profiling": [[198, "levels-of-json-profiling"]], "Model Level": [[198, "model-level"]], "Iteration Level": [[198, "iteration-level"]], "Operator Level": [[198, "operator-level"]], "Engine Tuning": [[199, "engine-tuning"]], "Pattern Tuning for Dispatching Best Pattern": [[199, "pattern-tuning-for-dispatching-best-pattern"]], "Graph Tuning for Dispatching Best Graph": [[199, "graph-tuning-for-dispatching-best-graph"]], "OP Tuning for Dispatching Best Kernel and Related Runtime Config": [[199, "op-tuning-for-dispatching-best-kernel-and-related-runtime-config"]], "How to Turn on Op Tuning Mechanism": [[199, "how-to-turn-on-op-tuning-mechanism"]], "More Tuning Options": [[199, "more-tuning-options"]], "Graph Fusion": [[200, "graph-fusion"]], "Pattern Mapping Dict": [[200, "pattern-mapping-dict"]], "Obtain the Necessary Information for New Pattern Construction": [[200, "obtain-the-necessary-information-for-new-pattern-construction"]], "Create Nodes and Establish Connections": [[200, "create-nodes-and-establish-connections"]], "Remove the Old Pattern and Insert the New Pattern": [[200, "remove-the-old-pattern-and-insert-the-new-pattern"]], "Compile an ONNX model to Engine IR": [[201, "compile-an-onnx-model-to-engine-ir"]], "Supported ONNX Format": [[201, "supported-onnx-format"]], "Compile Examples": [[201, "compile-examples"]], "Prepare ONNX Model": [[201, "prepare-onnx-model"]], "Compile to IR": [[201, "compile-to-ir"]], "Quantize a ONNX model to engine low precision/int8 IR": [[202, "quantize-a-onnx-model-to-engine-low-precision-int8-ir"]], "Design": [[202, "design"]], "Prerequisite": [[202, "prerequisite"]], "Install environment": [[202, "install-environment"]], "Prepare Dataset": [[202, "prepare-dataset"]], "Prepare ONNX model": [[202, "prepare-onnx-model"]], "Run tuning and benchmark": [[202, "run-tuning-and-benchmark"]], "1. To get the tuned model and its accuracy:": [[202, "to-get-the-tuned-model-and-its-accuracy"]], "2. To get the benchmark of tuned model:": [[202, "to-get-the-benchmark-of-tuned-model"]], "Customized Operators Register": [[203, "customized-operators-register"]], "1. Add *.h of the customized operator to executor/include/operators": [[203, "add-h-of-the-customized-operator-to-executor-include-operators"]], "2. Add *.cpp of the customized operator to executor/src/operators": [[203, "add-cpp-of-the-customized-operator-to-executor-src-operators"]], "Pattern Recognize": [[204, "pattern-recognize"]], "Pattern Representation": [[204, "pattern-representation"]], "Parse Pattern Representation List": [[204, "parse-pattern-representation-list"]], "Search Each Straight Chain Pattern": [[204, "search-each-straight-chain-pattern"]], "Splice Sub-chains with the Main Chain and Remove Duplicate Results": [[204, "splice-sub-chains-with-the-main-chain-and-remove-duplicate-results"]], "platform configuration": [[205, "platform-configuration"], [215, "platform-configuration"]], "Build": [[206, "build"], [216, "build"]], "Test": [[206, "test"]], "Performance": [[206, "performance"]], "API reference for users": [[206, "api-reference-for-users"]], "sparse_matmul kernel:": [[206, "sparse-matmul-kernel"]], "Developer guide for developers": [[206, "developer-guide-for-developers"]], "Memory Layout in SPMM_VNNI": [[207, "memory-layout-in-spmm-vnni"]], "Cache Issues": [[207, "cache-issues"]], "SPMM_VNNI 3D Inference": [[207, "spmm-vnni-3d-inference"]], "Framework Features": [[208, "framework-features"], [209, "framework-features"]], "param_type.hpp": [[208, "param-type-hpp"]], "operator_desc.hpp": [[208, "operator-desc-hpp"], [209, "operator-desc-hpp"]], "jit_binaryop_injector.hpp": [[208, "jit-binaryop-injector-hpp"]], "Developer\u2019s Perspective": [[208, "developer-s-perspective"]], "User\u2019s Perspective": [[208, "user-s-perspective"], [209, "user-s-perspective"]], "param_types.hpp": [[209, "param-types-hpp"]], "alpha,beta,scale meaning": [[209, "alpha-beta-scale-meaning"]], "jit_eltwise_injector.hpp": [[209, "jit-eltwise-injector-hpp"]], "Developer\u2019s Perspective.": [[209, "developer-s-perspective"]], "Design of AMX Kernel": [[210, "design-of-amx-kernel"]], "Brief introduction for ISAs": [[210, "brief-introduction-for-isas"]], "Pattern": [[210, "pattern"]], "Reorder": [[210, "reorder"]], "Design of AVX512F Kernel": [[211, "design-of-avx512f-kernel"]], "Key Instruction": [[211, "key-instruction"]], "Sparse Pattern & Data Format": [[211, "sparse-pattern-data-format"]], "Loops": [[211, "loops"]], "Problem Statements": [[212, "problem-statements"]], "Matmul_p2031_2013": [[212, "matmul-p2031-2013"]], "Matmul_avx512f_p2031_p2013": [[212, "matmul-avx512f-p2031-p2013"]], "Matmul_noperm_p2031_p1302": [[212, "matmul-noperm-p2031-p1302"]], "Matmul_vnni_noperm_p2013_p1302": [[212, "matmul-vnni-noperm-p2013-p1302"]], "Reorder beforehand": [[212, "reorder-beforehand"]], "Design of the VNNI Kernel": [[213, "design-of-the-vnni-kernel"]], "On the fly activation reordering": [[213, "on-the-fly-activation-reordering"]], "Candidate patterns": [[213, "candidate-patterns"]], "Performance and Profiling": [[214, "performance-and-profiling"]], "Verbose": [[214, "verbose"]], "VTune": [[214, "vtune"]], "SDE": [[214, "sde"]], "Validation Performance Data": [[215, "validation-performance-data"]], "Single Thread": [[215, "single-thread"]], "Multi Thread (Thread = 4)": [[215, "multi-thread-thread-4"]], "Benchmark for Kernels": [[216, "benchmark-for-kernels"]], "sparse_matmul": [[216, "sparse-matmul"]], "spmm_avx512f": [[216, "spmm-avx512f"]], "spmm_vnni": [[216, "spmm-vnni"]], "spmm_amx_bf16_x16": [[216, "spmm-amx-bf16-x16"]], "eltwiseop": [[216, "eltwiseop"]], "layernorm_ba": [[216, "layernorm-ba"]], "transpose_matmul": [[216, "transpose-matmul"]], "matmul_avx512f_p2031_p2013": [[216, "matmul-avx512f-p2031-p2013"]], "matmul_vnni_noperm_p2031_p1302": [[216, "matmul-vnni-noperm-p2031-p1302"]], "softmax": [[216, "softmax"]], "attention": [[216, "attention"]], "For developers": [[216, "for-developers"]], "Inputs format": [[217, "inputs-format"]], "Metrics": [[218, "metrics"]], "Supported Metric": [[218, "supported-metric"]], "Metric Class Summary": [[218, "metric-class-summary"]], "Get Start with Metrics": [[218, "get-start-with-metrics"]], "Objective": [[219, "objective"]], "Supported Objectives Matrix:": [[219, "supported-objectives-matrix"]], "Examples:": [[219, "examples"]], "Pipeline": [[220, "pipeline"]], "Pipeline Inference for INT8 Model": [[220, "pipeline-inference-for-int8-model"]], "Pipeline Inference for Executor Backend": [[220, "pipeline-inference-for-executor-backend"]], "Pruning types": [[221, "pruning-types"]], "Script:": [[221, "script"], [222, "script"]], "Create an instance of Metric": [[221, "create-an-instance-of-metric"]], "Create list of an instance of PrunerConfig(Optional)": [[221, "create-list-of-an-instance-of-prunerconfig-optional"]], "Create an instance of PruningConfig": [[221, "create-an-instance-of-pruningconfig"]], "Prune with Trainer": [[221, "prune-with-trainer"]], "Quantization Fundamentals": [[222, "quantization-fundamentals"]], "Quantization Approach": [[222, "quantization-approach"]], "Post Training Dynamic Quantization": [[222, "post-training-dynamic-quantization"]], "Post Training Static Quantization": [[222, "post-training-static-quantization"]], "Quantization Aware Training": [[222, "quantization-aware-training"]], "Accuracy Aware Tuning": [[222, "accuracy-aware-tuning"]], "Supported Feature Matrix": [[222, "supported-feature-matrix"]], "Get Started": [[222, "get-started"]], "Create an Instance of Objective(Optional)": [[222, "create-an-instance-of-objective-optional"]], "Create an Instance of QuantizationConfig": [[222, "create-an-instance-of-quantizationconfig"]], "Quantization with Trainer": [[222, "quantization-with-trainer"]], "Contents:": [[223, null]]}, "indexentries": {"intel_extension_for_transformers.backends": [[0, "module-intel_extension_for_transformers.backends"]], "module": [[0, "module-intel_extension_for_transformers.backends"], [1, "module-intel_extension_for_transformers.backends.neural_engine.compile.compile"], [2, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors.extractor"], [3, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors"], [4, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors.onnx_extractor"], [5, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors.tf_extractor"], [6, "module-intel_extension_for_transformers.backends.neural_engine.compile.graph.graph"], [7, "module-intel_extension_for_transformers.backends.neural_engine.compile.graph"], [8, "module-intel_extension_for_transformers.backends.neural_engine.compile.graph_utils"], [9, "module-intel_extension_for_transformers.backends.neural_engine.compile"], [10, "module-intel_extension_for_transformers.backends.neural_engine.compile.loaders"], [11, "module-intel_extension_for_transformers.backends.neural_engine.compile.loaders.loader"], [12, "module-intel_extension_for_transformers.backends.neural_engine.compile.logger"], [13, "module-intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils"], [14, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.all"], [15, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.assert"], [16, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul"], [17, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2"], [18, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add"], [19, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.cast"], [20, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.concat"], [21, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.conv"], [22, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops"], [23, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims"], [24, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_matmul_v2"], [25, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3"], [26, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm"], [27, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul"], [28, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gather"], [29, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements"], [30, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu"], [31, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm"], [32, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops"], [33, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next"], [34, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2"], [35, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization"], [36, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset"], [37, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul"], [38, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.mean"], [39, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.mkl_layer_norm"], [40, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset"], [41, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot"], [42, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input"], [43, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.op"], [44, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset"], [45, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.pack"], [46, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder"], [47, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear"], [48, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2"], [49, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_fused_matmul_and_dequantize"], [50, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize"], [51, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean"], [52, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum"], [53, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape"], [54, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements"], [55, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax"], [56, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.split"], [57, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze"], [58, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice"], [59, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor"], [60, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k"], [61, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose"], [62, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack"], [63, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze"], [64, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_cls_token"], [65, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_embeddings"], [66, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_mask_length_adaptive_keep_indices"], [67, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_output_layer_norm_length_adaptive_keep_indices"], [68, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_reshape"], [69, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.collect_quant_info"], [70, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.conv_reshape"], [71, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.embeddingbag"], [72, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.gelu"], [73, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.generate_sequence"], [74, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph"], [75, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_data"], [76, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_file"], [77, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_bf16_node"], [78, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_quant_node"], [79, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.interact_features"], [80, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.last_layer_shape"], [81, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm"], [82, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm_with_reduce_mean"], [83, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias"], [84, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_add"], [85, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_gelu"], [86, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_relu"], [87, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_sigmoid"], [88, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_tanh"], [89, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.merged_embeddingbag"], [90, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.output_data"], [91, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.padding_sequence"], [92, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern"], [93, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings"], [94, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings_v1"], [95, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_merge"], [96, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_reshape"], [97, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.quantize_fusion"], [98, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_after_restore_hidden_states"], [99, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_and_after_attention_out_layer_norm_gather_elements"], [100, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_restore_hidden_states"], [101, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_fusion"], [102, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.restore_hidden_states_in_length_adaptive_update_indices"], [103, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.start_end_logits"], [104, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.subgraph_matcher"], [105, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings"], [106, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings_v1"], [107, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.transpose_batch_matmul"], [108, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.word_embeddings"], [109, "module-intel_extension_for_transformers.backends.neural_engine.compile.tf_utils"], [110, "module-intel_extension_for_transformers.backends.neural_engine"], [111, "module-intel_extension_for_transformers"], [112, "module-intel_extension_for_transformers.optimization.benchmark"], [113, "module-intel_extension_for_transformers.optimization.config"], [114, "module-intel_extension_for_transformers.optimization.distillation"], [115, "module-intel_extension_for_transformers.optimization.dynamic.drop_and_restore_utils"], [116, "module-intel_extension_for_transformers.optimization.dynamic.evolution"], [117, "module-intel_extension_for_transformers.optimization.dynamic"], [118, "module-intel_extension_for_transformers.optimization"], [119, "module-intel_extension_for_transformers.optimization.mixture.auto_distillation"], [120, "module-intel_extension_for_transformers.optimization.mixture"], [121, "module-intel_extension_for_transformers.optimization.model"], [122, "module-intel_extension_for_transformers.optimization.optimizer"], [123, "module-intel_extension_for_transformers.optimization.optimizer_tf"], [124, "module-intel_extension_for_transformers.optimization.pipeline"], [125, "module-intel_extension_for_transformers.optimization.pruning"], [126, "module-intel_extension_for_transformers.optimization.pytorch_pruner"], [127, "module-intel_extension_for_transformers.optimization.pytorch_pruner.patterns"], [128, "module-intel_extension_for_transformers.optimization.pytorch_pruner.prune_utils"], [129, "module-intel_extension_for_transformers.optimization.pytorch_pruner.pruner"], [130, "module-intel_extension_for_transformers.optimization.pytorch_pruner.pruning"], [131, "module-intel_extension_for_transformers.optimization.pytorch_pruner.scheduler"], [132, "module-intel_extension_for_transformers.optimization.quantization"], [133, "module-intel_extension_for_transformers.optimization.trainer"], [134, "module-intel_extension_for_transformers.optimization.utils"], [135, "module-intel_extension_for_transformers.optimization.utils.metrics"], [136, "module-intel_extension_for_transformers.optimization.utils.models"], [137, "module-intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic"], [138, "module-intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic"], [139, "module-intel_extension_for_transformers.optimization.utils.objectives"], [140, "module-intel_extension_for_transformers.optimization.utils.utility"], [141, "module-intel_extension_for_transformers.optimization.utils.utility_tf"], [142, "module-intel_extension_for_transformers.preprocessing.data_augmentation"], [143, "module-intel_extension_for_transformers.preprocessing"], [144, "module-intel_extension_for_transformers.preprocessing.utils"], [145, "module-intel_extension_for_transformers.version"], [146, "module-test_add_cls_token"], [147, "module-test_attention_output_layer_norm_length_adaptive_keep_indices"], [148, "module-test_attention_reshape"], [149, "module-test_conv_reshape"], [150, "module-test_embeddingbag"], [151, "module-test_execution_options"], [152, "module-test_gelu"], [153, "module-test_graph_dispatch"], [154, "module-test_insert_input_output_data"], [155, "module-test_is_supported_onnx_graph"], [156, "module-test_last_layer_shape"], [157, "module-test_layer_norm_with_reduce_mean"], [158, "module-test_main"], [159, "module-test_matmul_with_bias_relu"], [160, "module-test_matmul_with_bias_sigmoid"], [161, "module-test_matmul_with_bias_tanh"], [162, "module-test_merged_embeddingbag"], [163, "module-test_model"], [164, "module-test_onnx_utils"], [165, "module-test_ops"], [166, "module-test_padding_sequence"], [167, "module-test_pattern_dispatch"], [168, "module-test_position_embeddings"], [169, "module-test_qkv_merge"], [170, "module-test_qkv_reshape"], [171, "module-test_quant_onnx_execute"], [172, "module-test_reshape_after_restore_hidden_states"], [173, "module-test_reshape_before_and_after_attention_out_layer_norm_gather_elements"], [174, "module-test_reshape_before_restore_hidden_states"], [175, "module-test_start_end_logits"], [176, "module-test_tf_utils"], [177, "module-test_token_type_embeddings"], [178, "module-test_transpose"], [179, "module-test_transpose_batch_matmul"]], "compile() (in module intel_extension_for_transformers.backends.neural_engine.compile.compile)": [[1, "intel_extension_for_transformers.backends.neural_engine.compile.compile.compile"]], "intel_extension_for_transformers.backends.neural_engine.compile.compile": [[1, "module-intel_extension_for_transformers.backends.neural_engine.compile.compile"]], "start_pipeline() (in module intel_extension_for_transformers.backends.neural_engine.compile.compile)": [[1, "intel_extension_for_transformers.backends.neural_engine.compile.compile.start_pipeline"]], "extractor (class in intel_extension_for_transformers.backends.neural_engine.compile.extractors.extractor)": [[2, "intel_extension_for_transformers.backends.neural_engine.compile.extractors.extractor.Extractor"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors.extractor": [[2, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors.extractor"]], "extractor (class in intel_extension_for_transformers.backends.neural_engine.compile.extractors)": [[3, "intel_extension_for_transformers.backends.neural_engine.compile.extractors.Extractor"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors": [[3, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors"]], "onnxextractor (class in intel_extension_for_transformers.backends.neural_engine.compile.extractors.onnx_extractor)": [[4, "intel_extension_for_transformers.backends.neural_engine.compile.extractors.onnx_extractor.ONNXExtractor"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors.onnx_extractor": [[4, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors.onnx_extractor"]], "tensorflowextractor (class in intel_extension_for_transformers.backends.neural_engine.compile.extractors.tf_extractor)": [[5, "intel_extension_for_transformers.backends.neural_engine.compile.extractors.tf_extractor.TensorflowExtractor"]], "intel_extension_for_transformers.backends.neural_engine.compile.extractors.tf_extractor": [[5, "module-intel_extension_for_transformers.backends.neural_engine.compile.extractors.tf_extractor"]], "graph (class in intel_extension_for_transformers.backends.neural_engine.compile.graph.graph)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph"]], "change_node_input_tensors() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.change_node_input_tensors"]], "change_node_output_tensors() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.change_node_output_tensors"]], "dump_tensor() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.dump_tensor"]], "engine_init() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.engine_init"]], "execution_options (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph property)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.execution_options"]], "get_next_node_names() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.get_next_node_names"]], "get_node_by_name() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.get_node_by_name"]], "get_node_id() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.get_node_id"]], "get_pre_node_names() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.get_pre_node_names"]], "get_sparse_nodes_name() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.get_sparse_nodes_name"]], "get_tensor_idx() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.get_tensor_idx"]], "graph_dispatch() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.graph_dispatch"]], "graph_init() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.graph_init"]], "inference() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.inference"]], "insert_nodes() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.insert_nodes"]], "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph": [[6, "module-intel_extension_for_transformers.backends.neural_engine.compile.graph.graph"]], "modify_node_connections() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.modify_node_connections"]], "net_config (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph property)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.net_config"]], "nodes (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph property)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.nodes"]], "remove_nodes() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.remove_nodes"]], "rename_node() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.rename_node"]], "save() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.save"]], "transpose_mode_int8() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph method)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.transpose_mode_int8"]], "weight_data (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.graph property)": [[6, "intel_extension_for_transformers.backends.neural_engine.compile.graph.graph.Graph.weight_data"]], "graph (class in intel_extension_for_transformers.backends.neural_engine.compile.graph)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph"]], "change_node_input_tensors() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.change_node_input_tensors"]], "change_node_output_tensors() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.change_node_output_tensors"]], "dump_tensor() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.dump_tensor"]], "engine_init() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.engine_init"]], "execution_options (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph property)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.execution_options"]], "get_next_node_names() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.get_next_node_names"]], "get_node_by_name() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.get_node_by_name"]], "get_node_id() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.get_node_id"]], "get_pre_node_names() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.get_pre_node_names"]], "get_sparse_nodes_name() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.get_sparse_nodes_name"]], "get_tensor_idx() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.get_tensor_idx"]], "graph_dispatch() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.graph_dispatch"]], "graph_init() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.graph_init"]], "inference() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.inference"]], "insert_nodes() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.insert_nodes"]], "intel_extension_for_transformers.backends.neural_engine.compile.graph": [[7, "module-intel_extension_for_transformers.backends.neural_engine.compile.graph"]], "modify_node_connections() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.modify_node_connections"]], "net_config (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph property)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.net_config"]], "nodes (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph property)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.nodes"]], "remove_nodes() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.remove_nodes"]], "rename_node() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.rename_node"]], "save() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.save"]], "transpose_mode_int8() (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph method)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.transpose_mode_int8"]], "weight_data (intel_extension_for_transformers.backends.neural_engine.compile.graph.graph property)": [[7, "intel_extension_for_transformers.backends.neural_engine.compile.graph.Graph.weight_data"]], "lazyimport (class in intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.LazyImport"]], "construct_node() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.construct_node"]], "get_data_dtype() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.get_data_dtype"]], "get_model_fwk_name() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.get_model_fwk_name"]], "get_quant_info() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.get_quant_info"]], "insert_pattern() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.insert_pattern"]], "insert_quant_info() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.insert_quant_info"]], "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils": [[8, "module-intel_extension_for_transformers.backends.neural_engine.compile.graph_utils"]], "list2str() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.list2str"]], "names_from_input() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.names_from_input"]], "pattern_mapping() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.pattern_mapping"]], "pattern_mapping_conf_validation() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.pattern_mapping_conf_validation"]], "quant_info_init() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.quant_info_init"]], "search_pattern() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.search_pattern"]], "search_straight_pattern() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.search_straight_pattern"]], "str2list() (in module intel_extension_for_transformers.backends.neural_engine.compile.graph_utils)": [[8, "intel_extension_for_transformers.backends.neural_engine.compile.graph_utils.str2list"]], "compile() (in module intel_extension_for_transformers.backends.neural_engine.compile)": [[9, "intel_extension_for_transformers.backends.neural_engine.compile.compile"]], "intel_extension_for_transformers.backends.neural_engine.compile": [[9, "module-intel_extension_for_transformers.backends.neural_engine.compile"]], "loader (class in intel_extension_for_transformers.backends.neural_engine.compile.loaders)": [[10, "intel_extension_for_transformers.backends.neural_engine.compile.loaders.Loader"]], "intel_extension_for_transformers.backends.neural_engine.compile.loaders": [[10, "module-intel_extension_for_transformers.backends.neural_engine.compile.loaders"]], "loader (class in intel_extension_for_transformers.backends.neural_engine.compile.loaders.loader)": [[11, "intel_extension_for_transformers.backends.neural_engine.compile.loaders.loader.Loader"]], "intel_extension_for_transformers.backends.neural_engine.compile.loaders.loader": [[11, "module-intel_extension_for_transformers.backends.neural_engine.compile.loaders.loader"]], "logger (class in intel_extension_for_transformers.backends.neural_engine.compile.logger)": [[12, "intel_extension_for_transformers.backends.neural_engine.compile.logger.Logger"]], "debug() (in module intel_extension_for_transformers.backends.neural_engine.compile.logger)": [[12, "intel_extension_for_transformers.backends.neural_engine.compile.logger.debug"]], "error() (in module intel_extension_for_transformers.backends.neural_engine.compile.logger)": [[12, "intel_extension_for_transformers.backends.neural_engine.compile.logger.error"]], "fatal() (in module intel_extension_for_transformers.backends.neural_engine.compile.logger)": [[12, "intel_extension_for_transformers.backends.neural_engine.compile.logger.fatal"]], "get_logger() (intel_extension_for_transformers.backends.neural_engine.compile.logger.logger method)": [[12, "intel_extension_for_transformers.backends.neural_engine.compile.logger.Logger.get_logger"]], "info() (in module intel_extension_for_transformers.backends.neural_engine.compile.logger)": [[12, "intel_extension_for_transformers.backends.neural_engine.compile.logger.info"]], "intel_extension_for_transformers.backends.neural_engine.compile.logger": [[12, "module-intel_extension_for_transformers.backends.neural_engine.compile.logger"]], "log() (in module intel_extension_for_transformers.backends.neural_engine.compile.logger)": [[12, "intel_extension_for_transformers.backends.neural_engine.compile.logger.log"]], "warn() (in module intel_extension_for_transformers.backends.neural_engine.compile.logger)": [[12, "intel_extension_for_transformers.backends.neural_engine.compile.logger.warn"]], "warning() (in module intel_extension_for_transformers.backends.neural_engine.compile.logger)": [[12, "intel_extension_for_transformers.backends.neural_engine.compile.logger.warning"]], "bias_to_int32() (in module intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils)": [[13, "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils.bias_to_int32"]], "change_num_name() (in module intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils)": [[13, "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils.change_num_name"]], "get_children() (in module intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils)": [[13, "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils.get_children"]], "get_initializer_children_names() (in module intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils)": [[13, "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils.get_initializer_children_names"]], "get_node_children_names() (in module intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils)": [[13, "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils.get_node_children_names"]], "graph_node_names_details() (in module intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils)": [[13, "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils.graph_node_names_details"]], "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils": [[13, "module-intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils"]], "is_supported_onnx_graph() (in module intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils)": [[13, "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils.is_supported_onnx_graph"]], "is_supported_onnx_node() (in module intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils)": [[13, "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils.is_supported_onnx_node"]], "onnx_extract_operator() (in module intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils)": [[13, "intel_extension_for_transformers.backends.neural_engine.compile.onnx_utils.onnx_extract_operator"]], "all (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.all)": [[14, "intel_extension_for_transformers.backends.neural_engine.compile.ops.all.All"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.all": [[14, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.all"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.all.all method)": [[14, "intel_extension_for_transformers.backends.neural_engine.compile.ops.all.All.set_attr"]], "assert (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.assert)": [[15, "intel_extension_for_transformers.backends.neural_engine.compile.ops.assert.Assert"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.assert": [[15, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.assert"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.assert.assert method)": [[15, "intel_extension_for_transformers.backends.neural_engine.compile.ops.assert.Assert.set_attr"]], "batchmatmul (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul)": [[16, "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul.BatchMatMul"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul": [[16, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul.batchmatmul method)": [[16, "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul.BatchMatMul.set_attr"]], "batchmatmulv2 (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2)": [[17, "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2.BatchMatMulV2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2": [[17, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2.batchmatmulv2 method)": [[17, "intel_extension_for_transformers.backends.neural_engine.compile.ops.batch_matmul_v2.BatchMatMulV2.set_attr"]], "biasadd (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add)": [[18, "intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add.BiasAdd"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add": [[18, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add.biasadd method)": [[18, "intel_extension_for_transformers.backends.neural_engine.compile.ops.bias_add.BiasAdd.set_attr"]], "cast (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.cast)": [[19, "intel_extension_for_transformers.backends.neural_engine.compile.ops.cast.Cast"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.cast": [[19, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.cast"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.cast.cast method)": [[19, "intel_extension_for_transformers.backends.neural_engine.compile.ops.cast.Cast.set_attr"]], "concat (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.concat)": [[20, "intel_extension_for_transformers.backends.neural_engine.compile.ops.concat.Concat"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.concat": [[20, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.concat"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.concat.concat method)": [[20, "intel_extension_for_transformers.backends.neural_engine.compile.ops.concat.Concat.set_attr"]], "conv (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.conv)": [[21, "intel_extension_for_transformers.backends.neural_engine.compile.ops.conv.Conv"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.conv": [[21, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.conv"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.conv.conv method)": [[21, "intel_extension_for_transformers.backends.neural_engine.compile.ops.conv.Conv.set_attr"]], "add (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Add"]], "addv2 (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.AddV2"]], "binaryadd (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.BinaryAdd"]], "constantofshape (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.ConstantOfShape"]], "convolution (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Convolution"]], "cumsum (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.CumSum"]], "dequantizelinear (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.DequantizeLinear"]], "div (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Div"]], "embeddingbag (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.EmbeddingBag"]], "equal (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Equal"]], "erf (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Erf"]], "expand (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Expand"]], "expandindices (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.ExpandIndices"]], "fill (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Fill"]], "flatmapdataset (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.FlatMapDataset"]], "flatten (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Flatten"]], "identity (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Identity"]], "innerproduct (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.InnerProduct"]], "input (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Input"]], "layernorm (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.LayerNorm"]], "lessequal (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.LessEqual"]], "loop (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Loop"]], "makeiterator (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.MakeIterator"]], "matmulwithbias (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.MatMulWithBias"]], "matmulwithbiasadd (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.MatMulWithBiasAdd"]], "matmulwithbiasgelu (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.MatMulWithBiasGelu"]], "matmulwithbiasrelu (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.MatMulWithBiasRelu"]], "matmulwithbiassigmoid (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.MatMulWithBiasSigmoid"]], "matmulwithbiastanh (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.MatMulWithBiasTanh"]], "matmul (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Matmul"]], "mergedembeddingbag (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.MergedEmbeddingbag"]], "mul (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Mul"]], "nonzero (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.NonZero"]], "not (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Not"]], "onehot (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Onehot"]], "output (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Output"]], "paddingsequence (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.PaddingSequence"]], "positionids (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.PositionIds"]], "pow (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Pow"]], "qlinearadd (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.QLinearAdd"]], "qlinearmatmul (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.QLinearMatMul"]], "qlinearmul (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.QLinearMul"]], "quantize (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Quantize"]], "range (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Range"]], "realdiv (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.RealDiv"]], "relu (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Relu"]], "reorder (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Reorder"]], "rsqrt (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Rsqrt"]], "shape (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Shape"]], "sigmoid (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Sigmoid"]], "slice (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Slice"]], "sqrt (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Sqrt"]], "square (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Square"]], "squareddifference (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.SquaredDifference"]], "stopgradient (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.StopGradient"]], "sub (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Sub"]], "tanh (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Tanh"]], "tensorslicedataset (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.TensorSliceDataset"]], "tile (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Tile"]], "tokentypeids (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.TokenTypeIds"]], "transposebatchmatmul (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.TransposeBatchMatMul"]], "where (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops)": [[22, "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops.Where"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops": [[22, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.empty_ops"]], "expanddims (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims)": [[23, "intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims.ExpandDims"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims": [[23, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims.expanddims method)": [[23, "intel_extension_for_transformers.backends.neural_engine.compile.ops.expand_dims.ExpandDims.set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_matmul_v2": [[24, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_matmul_v2"]], "fusedbatchnormv3 (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3)": [[25, "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3.FusedBatchNormV3"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3": [[25, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3.fusedbatchnormv3 method)": [[25, "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_batch_norm_v3.FusedBatchNormV3.set_attr"]], "fusedgemm (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm)": [[26, "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm.FusedGemm"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm": [[26, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm.fusedgemm method)": [[26, "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_gemm.FusedGemm.set_attr"]], "fusedmatmul (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul)": [[27, "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul.FusedMatMul"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul": [[27, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul.fusedmatmul method)": [[27, "intel_extension_for_transformers.backends.neural_engine.compile.ops.fused_matmul.FusedMatMul.set_attr"]], "gather (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.gather)": [[28, "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather.Gather"]], "gatherv2 (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.gather)": [[28, "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather.GatherV2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather": [[28, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gather"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.gather.gather method)": [[28, "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather.Gather.set_attr"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.gather.gatherv2 method)": [[28, "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather.GatherV2.set_attr"]], "gatherelements (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements)": [[29, "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements.GatherElements"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements": [[29, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements.gatherelements method)": [[29, "intel_extension_for_transformers.backends.neural_engine.compile.ops.gather_elements.GatherElements.set_attr"]], "gelu (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu)": [[30, "intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu.Gelu"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu": [[30, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu.gelu method)": [[30, "intel_extension_for_transformers.backends.neural_engine.compile.ops.gelu.Gelu.set_attr"]], "gemm (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm)": [[31, "intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm.Gemm"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm": [[31, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm.gemm method)": [[31, "intel_extension_for_transformers.backends.neural_engine.compile.ops.gemm.Gemm.set_attr"]], "operator (class in intel_extension_for_transformers.backends.neural_engine.compile.ops)": [[32, "intel_extension_for_transformers.backends.neural_engine.compile.ops.Operator"]], "attr (intel_extension_for_transformers.backends.neural_engine.compile.ops.operator property)": [[32, "intel_extension_for_transformers.backends.neural_engine.compile.ops.Operator.attr"]], "config (intel_extension_for_transformers.backends.neural_engine.compile.ops.operator property)": [[32, "intel_extension_for_transformers.backends.neural_engine.compile.ops.Operator.config"]], "construct() (intel_extension_for_transformers.backends.neural_engine.compile.ops.operator method)": [[32, "intel_extension_for_transformers.backends.neural_engine.compile.ops.Operator.construct"]], "extract() (intel_extension_for_transformers.backends.neural_engine.compile.ops.operator method)": [[32, "intel_extension_for_transformers.backends.neural_engine.compile.ops.Operator.extract"]], "input_tensors (intel_extension_for_transformers.backends.neural_engine.compile.ops.operator property)": [[32, "intel_extension_for_transformers.backends.neural_engine.compile.ops.Operator.input_tensors"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops": [[32, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops"]], "name (intel_extension_for_transformers.backends.neural_engine.compile.ops.operator property)": [[32, "intel_extension_for_transformers.backends.neural_engine.compile.ops.Operator.name"]], "op_type (intel_extension_for_transformers.backends.neural_engine.compile.ops.operator property)": [[32, "intel_extension_for_transformers.backends.neural_engine.compile.ops.Operator.op_type"]], "operator_registry() (in module intel_extension_for_transformers.backends.neural_engine.compile.ops)": [[32, "intel_extension_for_transformers.backends.neural_engine.compile.ops.operator_registry"]], "output_tensors (intel_extension_for_transformers.backends.neural_engine.compile.ops.operator property)": [[32, "intel_extension_for_transformers.backends.neural_engine.compile.ops.Operator.output_tensors"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.operator method)": [[32, "intel_extension_for_transformers.backends.neural_engine.compile.ops.Operator.set_attr"]], "iteratorgetnext (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next)": [[33, "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next.IteratorGetNext"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next": [[33, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next.iteratorgetnext method)": [[33, "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_get_next.IteratorGetNext.set_attr"]], "iteratorv2 (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2)": [[34, "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2.IteratorV2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2": [[34, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2.iteratorv2 method)": [[34, "intel_extension_for_transformers.backends.neural_engine.compile.ops.iterator_v2.IteratorV2.set_attr"]], "layernormalization (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization)": [[35, "intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization.LayerNormalization"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization": [[35, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization.layernormalization method)": [[35, "intel_extension_for_transformers.backends.neural_engine.compile.ops.layer_normalization.LayerNormalization.set_attr"]], "mapandbatchdataset (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset)": [[36, "intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset.MapAndBatchDataset"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset": [[36, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset.mapandbatchdataset method)": [[36, "intel_extension_for_transformers.backends.neural_engine.compile.ops.map_and_batch_dataset.MapAndBatchDataset.set_attr"]], "matmul (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul)": [[37, "intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul.MatMul"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul": [[37, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul.matmul method)": [[37, "intel_extension_for_transformers.backends.neural_engine.compile.ops.matmul.MatMul.set_attr"]], "mean (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.mean)": [[38, "intel_extension_for_transformers.backends.neural_engine.compile.ops.mean.Mean"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.mean": [[38, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.mean"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.mean.mean method)": [[38, "intel_extension_for_transformers.backends.neural_engine.compile.ops.mean.Mean.set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.mkl_layer_norm": [[39, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.mkl_layer_norm"]], "modeldataset (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset)": [[40, "intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset.ModelDataset"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset": [[40, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset.modeldataset method)": [[40, "intel_extension_for_transformers.backends.neural_engine.compile.ops.model_dataset.ModelDataset.set_attr"]], "onehot (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot)": [[41, "intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot.OneHot"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot": [[41, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot.onehot method)": [[41, "intel_extension_for_transformers.backends.neural_engine.compile.ops.one_hot.OneHot.set_attr"]], "onnxinput (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input)": [[42, "intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input.ONNXINPUT"]], "extract() (intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input.onnxinput method)": [[42, "intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input.ONNXINPUT.extract"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input": [[42, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.onnx_input"]], "operator (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.op)": [[43, "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.Operator"]], "attr (intel_extension_for_transformers.backends.neural_engine.compile.ops.op.operator property)": [[43, "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.Operator.attr"]], "config (intel_extension_for_transformers.backends.neural_engine.compile.ops.op.operator property)": [[43, "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.Operator.config"]], "construct() (intel_extension_for_transformers.backends.neural_engine.compile.ops.op.operator method)": [[43, "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.Operator.construct"]], "extract() (intel_extension_for_transformers.backends.neural_engine.compile.ops.op.operator method)": [[43, "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.Operator.extract"]], "input_tensors (intel_extension_for_transformers.backends.neural_engine.compile.ops.op.operator property)": [[43, "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.Operator.input_tensors"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.op": [[43, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.op"]], "name (intel_extension_for_transformers.backends.neural_engine.compile.ops.op.operator property)": [[43, "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.Operator.name"]], "op_type (intel_extension_for_transformers.backends.neural_engine.compile.ops.op.operator property)": [[43, "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.Operator.op_type"]], "operator_registry() (in module intel_extension_for_transformers.backends.neural_engine.compile.ops.op)": [[43, "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.operator_registry"]], "output_tensors (intel_extension_for_transformers.backends.neural_engine.compile.ops.op.operator property)": [[43, "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.Operator.output_tensors"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.op.operator method)": [[43, "intel_extension_for_transformers.backends.neural_engine.compile.ops.op.Operator.set_attr"]], "optimizedataset (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset)": [[44, "intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset.OptimizeDataset"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset": [[44, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset.optimizedataset method)": [[44, "intel_extension_for_transformers.backends.neural_engine.compile.ops.optimize_dataset.OptimizeDataset.set_attr"]], "pack (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.pack)": [[45, "intel_extension_for_transformers.backends.neural_engine.compile.ops.pack.Pack"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.pack": [[45, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.pack"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.pack.pack method)": [[45, "intel_extension_for_transformers.backends.neural_engine.compile.ops.pack.Pack.set_attr"]], "placeholder (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder)": [[46, "intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder.Placeholder"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder": [[46, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder.placeholder method)": [[46, "intel_extension_for_transformers.backends.neural_engine.compile.ops.placeholder.Placeholder.set_attr"]], "quantizelinear (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear)": [[47, "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear.QuantizeLinear"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear": [[47, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear.quantizelinear method)": [[47, "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_linear.QuantizeLinear.set_attr"]], "quantizev2 (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2)": [[48, "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2.QuantizeV2"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2": [[48, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2.quantizev2 method)": [[48, "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantize_v2.QuantizeV2.set_attr"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_fused_matmul_and_dequantize": [[49, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_fused_matmul_and_dequantize"]], "quantizedmatmulwithbiasanddequantize (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize)": [[50, "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize.QuantizedMatMulWithBiasAndDequantize"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize": [[50, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize.quantizedmatmulwithbiasanddequantize method)": [[50, "intel_extension_for_transformers.backends.neural_engine.compile.ops.quantized_matmul_with_bias_and_dequantize.QuantizedMatMulWithBiasAndDequantize.set_attr"]], "reducemean (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean)": [[51, "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean.ReduceMean"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean": [[51, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean.reducemean method)": [[51, "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_mean.ReduceMean.set_attr"]], "reducesum (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum)": [[52, "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum.ReduceSum"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum": [[52, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum.reducesum method)": [[52, "intel_extension_for_transformers.backends.neural_engine.compile.ops.reduce_sum.ReduceSum.set_attr"]], "reshape (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape)": [[53, "intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape.Reshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape": [[53, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape.reshape method)": [[53, "intel_extension_for_transformers.backends.neural_engine.compile.ops.reshape.Reshape.set_attr"]], "scatterelements (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements)": [[54, "intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements.ScatterElements"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements": [[54, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements.scatterelements method)": [[54, "intel_extension_for_transformers.backends.neural_engine.compile.ops.scatter_elements.ScatterElements.set_attr"]], "softmax (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax)": [[55, "intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax.Softmax"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax": [[55, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax.softmax method)": [[55, "intel_extension_for_transformers.backends.neural_engine.compile.ops.softmax.Softmax.set_attr"]], "split (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.split)": [[56, "intel_extension_for_transformers.backends.neural_engine.compile.ops.split.Split"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.split": [[56, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.split"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.split.split method)": [[56, "intel_extension_for_transformers.backends.neural_engine.compile.ops.split.Split.set_attr"]], "squeeze (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze)": [[57, "intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze.Squeeze"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze": [[57, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze.squeeze method)": [[57, "intel_extension_for_transformers.backends.neural_engine.compile.ops.squeeze.Squeeze.set_attr"]], "stridedslice (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice)": [[58, "intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice.StridedSlice"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice": [[58, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice.stridedslice method)": [[58, "intel_extension_for_transformers.backends.neural_engine.compile.ops.strided_slice.StridedSlice.set_attr"]], "tensor (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor)": [[59, "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.Tensor"]], "config (intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.tensor property)": [[59, "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.Tensor.config"]], "data (intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.tensor property)": [[59, "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.Tensor.data"]], "dest_op (intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.tensor property)": [[59, "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.Tensor.dest_op"]], "dtype (intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.tensor property)": [[59, "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.Tensor.dtype"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor": [[59, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor"]], "location (intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.tensor property)": [[59, "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.Tensor.location"]], "name (intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.tensor property)": [[59, "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.Tensor.name"]], "shape (intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.tensor property)": [[59, "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.Tensor.shape"]], "source_op (intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.tensor property)": [[59, "intel_extension_for_transformers.backends.neural_engine.compile.ops.tensor.Tensor.source_op"]], "topk (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k)": [[60, "intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k.TopK"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k": [[60, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k.topk method)": [[60, "intel_extension_for_transformers.backends.neural_engine.compile.ops.top_k.TopK.set_attr"]], "transpose (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose)": [[61, "intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose.Transpose"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose": [[61, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose.transpose method)": [[61, "intel_extension_for_transformers.backends.neural_engine.compile.ops.transpose.Transpose.set_attr"]], "unpack (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack)": [[62, "intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack.Unpack"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack": [[62, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack.unpack method)": [[62, "intel_extension_for_transformers.backends.neural_engine.compile.ops.unpack.Unpack.set_attr"]], "unsqueeze (class in intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze)": [[63, "intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze.Unsqueeze"]], "intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze": [[63, "module-intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze"]], "set_attr() (intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze.unsqueeze method)": [[63, "intel_extension_for_transformers.backends.neural_engine.compile.ops.unsqueeze.Unsqueeze.set_attr"]], "addclstoken (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_cls_token)": [[64, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_cls_token.AddClsToken"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_cls_token": [[64, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_cls_token"]], "addembeddings (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_embeddings)": [[65, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_embeddings.AddEmbeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_embeddings": [[65, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.add_embeddings"]], "attentionmasklengthadaptiveexpandindices (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_mask_length_adaptive_keep_indices)": [[66, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_mask_length_adaptive_keep_indices.AttentionMaskLengthAdaptiveExpandIndices"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_mask_length_adaptive_keep_indices": [[66, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_mask_length_adaptive_keep_indices"]], "attentionoutputlayernormlengthadaptiveexpandindices (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_output_layer_norm_length_adaptive_keep_indices)": [[67, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_output_layer_norm_length_adaptive_keep_indices.AttentionOutputLayerNormLengthAdaptiveExpandIndices"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_output_layer_norm_length_adaptive_keep_indices": [[67, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_output_layer_norm_length_adaptive_keep_indices"]], "attentionreshape (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_reshape)": [[68, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_reshape.AttentionReshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_reshape": [[68, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.attention_reshape"]], "collectquantinfo (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.collect_quant_info)": [[69, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.collect_quant_info.CollectQuantInfo"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.collect_quant_info": [[69, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.collect_quant_info"]], "convreshape (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.conv_reshape)": [[70, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.conv_reshape.ConvReshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.conv_reshape": [[70, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.conv_reshape"]], "embeddingbag (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.embeddingbag)": [[71, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.embeddingbag.EmbeddingBag"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.embeddingbag": [[71, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.embeddingbag"]], "gelu (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.gelu)": [[72, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.gelu.Gelu"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.gelu": [[72, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.gelu"]], "generatesequence (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.generate_sequence)": [[73, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.generate_sequence.GenerateSequence"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.generate_sequence": [[73, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.generate_sequence"]], "pattern (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph)": [[74, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.Pattern"]], "subgraphmatcher (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph)": [[74, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.SubGraphMatcher"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph": [[74, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph"]], "pattern_registry() (in module intel_extension_for_transformers.backends.neural_engine.compile.sub_graph)": [[74, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern_registry"]], "inputdata (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_data)": [[75, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_data.InputData"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_data": [[75, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_data"]], "inputfile (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_file)": [[76, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_file.InputFile"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_file": [[76, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.input_file"]], "insertbf16node (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_bf16_node)": [[77, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_bf16_node.InsertBF16Node"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_bf16_node": [[77, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_bf16_node"]], "insertquantnode (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_quant_node)": [[78, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_quant_node.InsertQuantNode"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_quant_node": [[78, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.insert_quant_node"]], "interactfeatures (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.interact_features)": [[79, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.interact_features.InteractFeatures"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.interact_features": [[79, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.interact_features"]], "lastlayershape (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.last_layer_shape)": [[80, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.last_layer_shape.LastLayerShape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.last_layer_shape": [[80, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.last_layer_shape"]], "layernorm (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm)": [[81, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm.LayerNorm"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm": [[81, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm"]], "layernormwithreducemean (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm_with_reduce_mean)": [[82, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm_with_reduce_mean.LayerNormWithReduceMean"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm_with_reduce_mean": [[82, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.layer_norm_with_reduce_mean"]], "matmulwithbias (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias)": [[83, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias.MatMulWithBias"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias": [[83, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias"]], "matmulwithbiasadd (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_add)": [[84, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_add.MatMulWithBiasAdd"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_add": [[84, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_add"]], "matmulwithbiasgelu (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_gelu)": [[85, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_gelu.MatMulWithBiasGelu"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_gelu": [[85, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_gelu"]], "matmulwithbiasrelu (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_relu)": [[86, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_relu.MatMulWithBiasRelu"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_relu": [[86, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_relu"]], "matmulwithbiassigmoid (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_sigmoid)": [[87, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_sigmoid.MatMulWithBiasSigmoid"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_sigmoid": [[87, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_sigmoid"]], "matmulwithbiastanh (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_tanh)": [[88, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_tanh.MatmulWithBiasTanh"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_tanh": [[88, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.matmul_with_bias_tanh"]], "mergedembeddingbag (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.merged_embeddingbag)": [[89, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.merged_embeddingbag.MergedEmbeddingbag"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.merged_embeddingbag": [[89, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.merged_embeddingbag"]], "outputdata (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.output_data)": [[90, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.output_data.OutputData"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.output_data": [[90, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.output_data"]], "paddingsequence (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.padding_sequence)": [[91, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.padding_sequence.PaddingSequence"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.padding_sequence": [[91, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.padding_sequence"]], "pattern (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern)": [[92, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern.Pattern"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern": [[92, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern"]], "pattern_registry() (in module intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern)": [[92, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.pattern.pattern_registry"]], "positionembeddings (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings)": [[93, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings.PositionEmbeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings": [[93, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings"]], "positionembeddingsv1 (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings_v1)": [[94, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings_v1.PositionEmbeddingsV1"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings_v1": [[94, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.position_embeddings_v1"]], "qkvmerge (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_merge)": [[95, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_merge.QKVMerge"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_merge": [[95, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_merge"]], "qkvreshape (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_reshape)": [[96, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_reshape.QKVReshape"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_reshape": [[96, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.qkv_reshape"]], "qunatizefusion (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.quantize_fusion)": [[97, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.quantize_fusion.QunatizeFusion"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.quantize_fusion": [[97, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.quantize_fusion"]], "reshapeafterrestorehiddenstates (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_after_restore_hidden_states)": [[98, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_after_restore_hidden_states.ReshapeAfterRestoreHiddenStates"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_after_restore_hidden_states": [[98, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_after_restore_hidden_states"]], "reshapebeforeandafterattentionoutlayernormgatherelements (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_and_after_attention_out_layer_norm_gather_elements)": [[99, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_and_after_attention_out_layer_norm_gather_elements.ReshapeBeforeAndAfterAttentionOutLayerNormGatherElements"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_and_after_attention_out_layer_norm_gather_elements": [[99, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_and_after_attention_out_layer_norm_gather_elements"]], "reshapebeforerestorehiddenstates (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_restore_hidden_states)": [[100, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_restore_hidden_states.ReshapeBeforeRestoreHiddenStates"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_restore_hidden_states": [[100, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_before_restore_hidden_states"]], "reshapefusion (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_fusion)": [[101, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_fusion.ReshapeFusion"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_fusion": [[101, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.reshape_fusion"]], "restorehiddenstatesinlengthadaptive (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.restore_hidden_states_in_length_adaptive_update_indices)": [[102, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.restore_hidden_states_in_length_adaptive_update_indices.RestoreHiddenStatesInLengthAdaptive"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.restore_hidden_states_in_length_adaptive_update_indices": [[102, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.restore_hidden_states_in_length_adaptive_update_indices"]], "startendlogits (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.start_end_logits)": [[103, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.start_end_logits.StartEndLogits"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.start_end_logits": [[103, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.start_end_logits"]], "subgraphmatcher (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.subgraph_matcher)": [[104, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.subgraph_matcher.SubGraphMatcher"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.subgraph_matcher": [[104, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.subgraph_matcher"]], "tokentypeembeddings (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings)": [[105, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings.TokenTypeEmbeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings": [[105, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings"]], "tokentypeembeddingsv1 (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings_v1)": [[106, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings_v1.TokenTypeEmbeddingsV1"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings_v1": [[106, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.token_type_embeddings_v1"]], "transposebatchmatmul (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.transpose_batch_matmul)": [[107, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.transpose_batch_matmul.TransposeBatchMatMul"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.transpose_batch_matmul": [[107, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.transpose_batch_matmul"]], "wordembeddings (class in intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.word_embeddings)": [[108, "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.word_embeddings.WordEmbeddings"]], "intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.word_embeddings": [[108, "module-intel_extension_for_transformers.backends.neural_engine.compile.sub_graph.word_embeddings"]], "create_tf_node() (in module intel_extension_for_transformers.backends.neural_engine.compile.tf_utils)": [[109, "intel_extension_for_transformers.backends.neural_engine.compile.tf_utils.create_tf_node"]], "get_tensor_dest_op() (in module intel_extension_for_transformers.backends.neural_engine.compile.tf_utils)": [[109, "intel_extension_for_transformers.backends.neural_engine.compile.tf_utils.get_tensor_dest_op"]], "graph_node_names_details() (in module intel_extension_for_transformers.backends.neural_engine.compile.tf_utils)": [[109, "intel_extension_for_transformers.backends.neural_engine.compile.tf_utils.graph_node_names_details"]], "intel_extension_for_transformers.backends.neural_engine.compile.tf_utils": [[109, "module-intel_extension_for_transformers.backends.neural_engine.compile.tf_utils"]], "tf_extract_operator() (in module intel_extension_for_transformers.backends.neural_engine.compile.tf_utils)": [[109, "intel_extension_for_transformers.backends.neural_engine.compile.tf_utils.tf_extract_operator"]], "intel_extension_for_transformers.backends.neural_engine": [[110, "module-intel_extension_for_transformers.backends.neural_engine"]], "intel_extension_for_transformers": [[111, "module-intel_extension_for_transformers"]], "executorbenchmark (class in intel_extension_for_transformers.optimization.benchmark)": [[112, "intel_extension_for_transformers.optimization.benchmark.ExecutorBenchmark"]], "intel_extension_for_transformers.optimization.benchmark": [[112, "module-intel_extension_for_transformers.optimization.benchmark"]], "run() (in module intel_extension_for_transformers.optimization.benchmark)": [[112, "intel_extension_for_transformers.optimization.benchmark.run"]], "autodistillationconfig (class in intel_extension_for_transformers.optimization.config)": [[113, "intel_extension_for_transformers.optimization.config.AutoDistillationConfig"]], "distillationconfig (class in intel_extension_for_transformers.optimization.config)": [[113, "intel_extension_for_transformers.optimization.config.DistillationConfig"]], "dynamiclengthconfig (class in intel_extension_for_transformers.optimization.config)": [[113, "intel_extension_for_transformers.optimization.config.DynamicLengthConfig"]], "flashdistillationconfig (class in intel_extension_for_transformers.optimization.config)": [[113, "intel_extension_for_transformers.optimization.config.FlashDistillationConfig"]], "provider (class in intel_extension_for_transformers.optimization.config)": [[113, "intel_extension_for_transformers.optimization.config.Provider"]], "pruningconfig (class in intel_extension_for_transformers.optimization.config)": [[113, "intel_extension_for_transformers.optimization.config.PruningConfig"]], "quantizationconfig (class in intel_extension_for_transformers.optimization.config)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig"]], "tfdistillationconfig (class in intel_extension_for_transformers.optimization.config)": [[113, "intel_extension_for_transformers.optimization.config.TFDistillationConfig"]], "approach (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.approach"]], "criterion (intel_extension_for_transformers.optimization.config.distillationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.DistillationConfig.criterion"]], "epoch_range (intel_extension_for_transformers.optimization.config.pruningconfig property)": [[113, "intel_extension_for_transformers.optimization.config.PruningConfig.epoch_range"]], "epochs (intel_extension_for_transformers.optimization.config.pruningconfig property)": [[113, "intel_extension_for_transformers.optimization.config.PruningConfig.epochs"]], "framework (intel_extension_for_transformers.optimization.config.autodistillationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.AutoDistillationConfig.framework"]], "framework (intel_extension_for_transformers.optimization.config.distillationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.DistillationConfig.framework"]], "framework (intel_extension_for_transformers.optimization.config.pruningconfig property)": [[113, "intel_extension_for_transformers.optimization.config.PruningConfig.framework"]], "framework (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.framework"]], "init_prune_config() (intel_extension_for_transformers.optimization.config.pruningconfig method)": [[113, "intel_extension_for_transformers.optimization.config.PruningConfig.init_prune_config"]], "initial_sparsity_ratio (intel_extension_for_transformers.optimization.config.pruningconfig property)": [[113, "intel_extension_for_transformers.optimization.config.PruningConfig.initial_sparsity_ratio"]], "input_names (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.input_names"]], "intel_extension_for_transformers.optimization.config": [[113, "module-intel_extension_for_transformers.optimization.config"]], "knowledge_transfer (intel_extension_for_transformers.optimization.config.autodistillationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.AutoDistillationConfig.knowledge_transfer"]], "max_trials (intel_extension_for_transformers.optimization.config.autodistillationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.AutoDistillationConfig.max_trials"]], "max_trials (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.max_trials"]], "metrics (intel_extension_for_transformers.optimization.config.autodistillationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.AutoDistillationConfig.metrics"]], "metrics (intel_extension_for_transformers.optimization.config.distillationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.DistillationConfig.metrics"]], "metrics (intel_extension_for_transformers.optimization.config.pruningconfig property)": [[113, "intel_extension_for_transformers.optimization.config.PruningConfig.metrics"]], "metrics (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.metrics"]], "objectives (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.objectives"]], "op_wise (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.op_wise"]], "output_dir (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.output_dir"]], "output_names (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.output_names"]], "performance_only (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.performance_only"]], "pruner_config (intel_extension_for_transformers.optimization.config.pruningconfig property)": [[113, "intel_extension_for_transformers.optimization.config.PruningConfig.pruner_config"]], "random_seed (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.random_seed"]], "regular_distillation (intel_extension_for_transformers.optimization.config.autodistillationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.AutoDistillationConfig.regular_distillation"]], "resume_path (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.resume_path"]], "sampling_size (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.sampling_size"]], "search_algorithm (intel_extension_for_transformers.optimization.config.autodistillationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.AutoDistillationConfig.search_algorithm"]], "search_space (intel_extension_for_transformers.optimization.config.autodistillationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.AutoDistillationConfig.search_space"]], "seed (intel_extension_for_transformers.optimization.config.autodistillationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.AutoDistillationConfig.seed"]], "strategy (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.strategy"]], "target_sparsity_ratio (intel_extension_for_transformers.optimization.config.pruningconfig property)": [[113, "intel_extension_for_transformers.optimization.config.PruningConfig.target_sparsity_ratio"]], "tensorboard (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.tensorboard"]], "timeout (intel_extension_for_transformers.optimization.config.quantizationconfig property)": [[113, "intel_extension_for_transformers.optimization.config.QuantizationConfig.timeout"]], "distillationcriterionmode (class in intel_extension_for_transformers.optimization.distillation)": [[114, "intel_extension_for_transformers.optimization.distillation.DistillationCriterionMode"]], "intel_extension_for_transformers.optimization.distillation": [[114, "module-intel_extension_for_transformers.optimization.distillation"]], "intel_extension_for_transformers.optimization.dynamic.drop_and_restore_utils": [[115, "module-intel_extension_for_transformers.optimization.dynamic.drop_and_restore_utils"]], "sample_layer_configuration() (in module intel_extension_for_transformers.optimization.dynamic.drop_and_restore_utils)": [[115, "intel_extension_for_transformers.optimization.dynamic.drop_and_restore_utils.sample_layer_configuration"]], "sample_length_configuration() (in module intel_extension_for_transformers.optimization.dynamic.drop_and_restore_utils)": [[115, "intel_extension_for_transformers.optimization.dynamic.drop_and_restore_utils.sample_length_configuration"]], "evolution (class in intel_extension_for_transformers.optimization.dynamic.evolution)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution"]], "add_gene() (intel_extension_for_transformers.optimization.dynamic.evolution.evolution method)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution.add_gene"]], "approx_ratio() (in module intel_extension_for_transformers.optimization.dynamic.evolution)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.approx_ratio"]], "convex_hull() (intel_extension_for_transformers.optimization.dynamic.evolution.evolution method)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution.convex_hull"]], "crossover() (intel_extension_for_transformers.optimization.dynamic.evolution.evolution method)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution.crossover"]], "get_store() (intel_extension_for_transformers.optimization.dynamic.evolution.evolution method)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution.get_store"]], "intel_extension_for_transformers.optimization.dynamic.evolution": [[116, "module-intel_extension_for_transformers.optimization.dynamic.evolution"]], "inverse() (in module intel_extension_for_transformers.optimization.dynamic.evolution)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.inverse"]], "load_store() (intel_extension_for_transformers.optimization.dynamic.evolution.evolution method)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution.load_store"]], "mutate() (intel_extension_for_transformers.optimization.dynamic.evolution.evolution method)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution.mutate"]], "pareto_frontier() (intel_extension_for_transformers.optimization.dynamic.evolution.evolution method)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution.pareto_frontier"]], "save_population() (intel_extension_for_transformers.optimization.dynamic.evolution.evolution method)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution.save_population"]], "save_store() (intel_extension_for_transformers.optimization.dynamic.evolution.evolution method)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution.save_store"]], "set_lower_constraint() (intel_extension_for_transformers.optimization.dynamic.evolution.evolution method)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution.set_lower_constraint"]], "set_upper_constraint() (intel_extension_for_transformers.optimization.dynamic.evolution.evolution method)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.Evolution.set_upper_constraint"]], "store2str() (in module intel_extension_for_transformers.optimization.dynamic.evolution)": [[116, "intel_extension_for_transformers.optimization.dynamic.evolution.store2str"]], "intel_extension_for_transformers.optimization.dynamic": [[117, "module-intel_extension_for_transformers.optimization.dynamic"]], "autodistillation (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation"]], "autodistillationconfig (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.AutoDistillationConfig"]], "distillationconfig (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.DistillationConfig"]], "distillationcriterionmode (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.DistillationCriterionMode"]], "dynamiclengthconfig (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.DynamicLengthConfig"]], "flashdistillationconfig (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.FlashDistillationConfig"]], "optimizedmodel (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.OptimizedModel"]], "provider (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.Provider"]], "prunerconfig (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.PrunerConfig"]], "pruningconfig (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.PruningConfig"]], "pruningmode (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.PruningMode"]], "quantizationconfig (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig"]], "quantizationmode (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.QuantizationMode"]], "tfdistillationconfig (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.TFDistillationConfig"]], "tfoptimization (class in intel_extension_for_transformers.optimization)": [[118, "intel_extension_for_transformers.optimization.TFOptimization"]], "advisor (intel_extension_for_transformers.optimization.autodistillation property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.advisor"]], "approach (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.approach"]], "autodistill() (intel_extension_for_transformers.optimization.tfoptimization method)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.autodistill"]], "build_train_func() (intel_extension_for_transformers.optimization.tfoptimization method)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.build_train_func"]], "builtin_eval_func() (intel_extension_for_transformers.optimization.tfoptimization method)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.builtin_eval_func"]], "create_distillers() (intel_extension_for_transformers.optimization.autodistillation method)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.create_distillers"]], "criterion (intel_extension_for_transformers.optimization.distillationconfig property)": [[118, "intel_extension_for_transformers.optimization.DistillationConfig.criterion"]], "distill() (intel_extension_for_transformers.optimization.tfoptimization method)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.distill"]], "dump_search_results() (intel_extension_for_transformers.optimization.autodistillation method)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.dump_search_results"]], "epoch_range (intel_extension_for_transformers.optimization.pruningconfig property)": [[118, "intel_extension_for_transformers.optimization.PruningConfig.epoch_range"]], "epochs (intel_extension_for_transformers.optimization.pruningconfig property)": [[118, "intel_extension_for_transformers.optimization.PruningConfig.epochs"]], "estimate() (intel_extension_for_transformers.optimization.autodistillation method)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.estimate"]], "eval_dataset (intel_extension_for_transformers.optimization.tfoptimization property)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.eval_dataset"]], "eval_func (intel_extension_for_transformers.optimization.autodistillation property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.eval_func"]], "eval_func (intel_extension_for_transformers.optimization.tfoptimization property)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.eval_func"]], "find_best_model_archs() (intel_extension_for_transformers.optimization.autodistillation method)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.find_best_model_archs"]], "framework (intel_extension_for_transformers.optimization.autodistillationconfig property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillationConfig.framework"]], "framework (intel_extension_for_transformers.optimization.distillationconfig property)": [[118, "intel_extension_for_transformers.optimization.DistillationConfig.framework"]], "framework (intel_extension_for_transformers.optimization.pruningconfig property)": [[118, "intel_extension_for_transformers.optimization.PruningConfig.framework"]], "framework (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.framework"]], "from_pretrained() (intel_extension_for_transformers.optimization.optimizedmodel class method)": [[118, "intel_extension_for_transformers.optimization.OptimizedModel.from_pretrained"]], "init_by_cfg() (intel_extension_for_transformers.optimization.autodistillation method)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.init_by_cfg"]], "init_distiller() (intel_extension_for_transformers.optimization.tfoptimization method)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.init_distiller"]], "init_prune_config() (intel_extension_for_transformers.optimization.pruningconfig method)": [[118, "intel_extension_for_transformers.optimization.PruningConfig.init_prune_config"]], "init_pruner() (intel_extension_for_transformers.optimization.tfoptimization method)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.init_pruner"]], "init_quantizer() (intel_extension_for_transformers.optimization.tfoptimization method)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.init_quantizer"]], "init_search_cfg() (intel_extension_for_transformers.optimization.autodistillation method)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.init_search_cfg"]], "initial_sparsity_ratio (intel_extension_for_transformers.optimization.pruningconfig property)": [[118, "intel_extension_for_transformers.optimization.PruningConfig.initial_sparsity_ratio"]], "input_names (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.input_names"]], "input_names (intel_extension_for_transformers.optimization.tfoptimization property)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.input_names"]], "inputs (intel_extension_for_transformers.optimization.tfoptimization property)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.inputs"]], "intel_extension_for_transformers.optimization": [[118, "module-intel_extension_for_transformers.optimization"]], "knowledge_transfer (intel_extension_for_transformers.optimization.autodistillationconfig property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillationConfig.knowledge_transfer"]], "load_search_results() (intel_extension_for_transformers.optimization.autodistillation method)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.load_search_results"]], "max_trials (intel_extension_for_transformers.optimization.autodistillationconfig property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillationConfig.max_trials"]], "max_trials (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.max_trials"]], "metrics (intel_extension_for_transformers.optimization.autodistillationconfig property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillationConfig.metrics"]], "metrics (intel_extension_for_transformers.optimization.distillationconfig property)": [[118, "intel_extension_for_transformers.optimization.DistillationConfig.metrics"]], "metrics (intel_extension_for_transformers.optimization.pruningconfig property)": [[118, "intel_extension_for_transformers.optimization.PruningConfig.metrics"]], "metrics (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.metrics"]], "metrics_conversion() (intel_extension_for_transformers.optimization.autodistillation method)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.metrics_conversion"]], "model_arch_proposition() (intel_extension_for_transformers.optimization.autodistillation method)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.model_arch_proposition"]], "model_builder_builtin() (intel_extension_for_transformers.optimization.tfoptimization method)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.model_builder_builtin"]], "objectives (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.objectives"]], "op_wise (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.op_wise"]], "output_dir (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.output_dir"]], "output_names (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.output_names"]], "output_names (intel_extension_for_transformers.optimization.tfoptimization property)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.output_names"]], "params_vec2params_dict() (intel_extension_for_transformers.optimization.autodistillation method)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.params_vec2params_dict"]], "performance_only (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.performance_only"]], "prune() (intel_extension_for_transformers.optimization.tfoptimization method)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.prune"]], "pruner_config (intel_extension_for_transformers.optimization.pruningconfig property)": [[118, "intel_extension_for_transformers.optimization.PruningConfig.pruner_config"]], "quantize() (intel_extension_for_transformers.optimization.tfoptimization method)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.quantize"]], "random_seed (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.random_seed"]], "regular_distillation (intel_extension_for_transformers.optimization.autodistillationconfig property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillationConfig.regular_distillation"]], "resume_path (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.resume_path"]], "sampling_size (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.sampling_size"]], "search() (intel_extension_for_transformers.optimization.autodistillation method)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.search"]], "search_algorithm (intel_extension_for_transformers.optimization.autodistillationconfig property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillationConfig.search_algorithm"]], "search_space (intel_extension_for_transformers.optimization.autodistillationconfig property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillationConfig.search_space"]], "seed (intel_extension_for_transformers.optimization.autodistillationconfig property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillationConfig.seed"]], "strategy (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.strategy"]], "student_model (intel_extension_for_transformers.optimization.autodistillation property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.student_model"]], "target_sparsity_ratio (intel_extension_for_transformers.optimization.pruningconfig property)": [[118, "intel_extension_for_transformers.optimization.PruningConfig.target_sparsity_ratio"]], "teacher_model (intel_extension_for_transformers.optimization.autodistillation property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.teacher_model"]], "tensorboard (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.tensorboard"]], "timeout (intel_extension_for_transformers.optimization.quantizationconfig property)": [[118, "intel_extension_for_transformers.optimization.QuantizationConfig.timeout"]], "train_dataset (intel_extension_for_transformers.optimization.tfoptimization property)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.train_dataset"]], "train_func (intel_extension_for_transformers.optimization.autodistillation property)": [[118, "intel_extension_for_transformers.optimization.AutoDistillation.train_func"]], "train_func (intel_extension_for_transformers.optimization.tfoptimization property)": [[118, "intel_extension_for_transformers.optimization.TFOptimization.train_func"]], "autodistillation (class in intel_extension_for_transformers.optimization.mixture.auto_distillation)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation"]], "bayesianoptimizationsearcher (class in intel_extension_for_transformers.optimization.mixture.auto_distillation)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.BayesianOptimizationSearcher"]], "gridsearcher (class in intel_extension_for_transformers.optimization.mixture.auto_distillation)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.GridSearcher"]], "randomsearcher (class in intel_extension_for_transformers.optimization.mixture.auto_distillation)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.RandomSearcher"]], "searcher (class in intel_extension_for_transformers.optimization.mixture.auto_distillation)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.Searcher"]], "advisor (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation property)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.advisor"]], "create_distillers() (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.create_distillers"]], "create_search_space_pool() (in module intel_extension_for_transformers.optimization.mixture.auto_distillation)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.create_search_space_pool"]], "dump_search_results() (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.dump_search_results"]], "estimate() (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.estimate"]], "eval_func (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation property)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.eval_func"]], "feedback() (intel_extension_for_transformers.optimization.mixture.auto_distillation.bayesianoptimizationsearcher method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.BayesianOptimizationSearcher.feedback"]], "feedback() (intel_extension_for_transformers.optimization.mixture.auto_distillation.searcher method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.Searcher.feedback"]], "find_best_model_archs() (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.find_best_model_archs"]], "find_pareto_front() (in module intel_extension_for_transformers.optimization.mixture.auto_distillation)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.find_pareto_front"]], "indices2params_vec() (intel_extension_for_transformers.optimization.mixture.auto_distillation.bayesianoptimizationsearcher method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.BayesianOptimizationSearcher.indices2params_vec"]], "init_by_cfg() (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.init_by_cfg"]], "init_search_cfg() (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.init_search_cfg"]], "intel_extension_for_transformers.optimization.mixture.auto_distillation": [[119, "module-intel_extension_for_transformers.optimization.mixture.auto_distillation"]], "load_search_results() (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.load_search_results"]], "metrics_conversion() (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.metrics_conversion"]], "model_arch_proposition() (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.model_arch_proposition"]], "params_vec2params_dict() (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.params_vec2params_dict"]], "params_vec2params_dict() (intel_extension_for_transformers.optimization.mixture.auto_distillation.searcher method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.Searcher.params_vec2params_dict"]], "search() (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.search"]], "student_model (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation property)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.student_model"]], "suggestion() (intel_extension_for_transformers.optimization.mixture.auto_distillation.bayesianoptimizationsearcher method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.BayesianOptimizationSearcher.suggestion"]], "suggestion() (intel_extension_for_transformers.optimization.mixture.auto_distillation.gridsearcher method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.GridSearcher.suggestion"]], "suggestion() (intel_extension_for_transformers.optimization.mixture.auto_distillation.randomsearcher method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.RandomSearcher.suggestion"]], "suggestion() (intel_extension_for_transformers.optimization.mixture.auto_distillation.searcher method)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.Searcher.suggestion"]], "teacher_model (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation property)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.teacher_model"]], "train_func (intel_extension_for_transformers.optimization.mixture.auto_distillation.autodistillation property)": [[119, "intel_extension_for_transformers.optimization.mixture.auto_distillation.AutoDistillation.train_func"]], "intel_extension_for_transformers.optimization.mixture": [[120, "module-intel_extension_for_transformers.optimization.mixture"]], "optimizedmodel (class in intel_extension_for_transformers.optimization.model)": [[121, "intel_extension_for_transformers.optimization.model.OptimizedModel"]], "from_pretrained() (intel_extension_for_transformers.optimization.model.optimizedmodel class method)": [[121, "intel_extension_for_transformers.optimization.model.OptimizedModel.from_pretrained"]], "intel_extension_for_transformers.optimization.model": [[121, "module-intel_extension_for_transformers.optimization.model"]], "notraineroptimizer (class in intel_extension_for_transformers.optimization.optimizer)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer"]], "orchestrate_optimizer (class in intel_extension_for_transformers.optimization.optimizer)": [[122, "intel_extension_for_transformers.optimization.optimizer.Orchestrate_optimizer"]], "calib_dataloader (intel_extension_for_transformers.optimization.optimizer.notraineroptimizer property)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer.calib_dataloader"]], "calib_func (intel_extension_for_transformers.optimization.optimizer.notraineroptimizer property)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer.calib_func"]], "distill() (intel_extension_for_transformers.optimization.optimizer.notraineroptimizer method)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer.distill"]], "eval_func (intel_extension_for_transformers.optimization.optimizer.notraineroptimizer property)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer.eval_func"]], "fit() (intel_extension_for_transformers.optimization.optimizer.orchestrate_optimizer method)": [[122, "intel_extension_for_transformers.optimization.optimizer.Orchestrate_optimizer.fit"]], "init_distiller() (intel_extension_for_transformers.optimization.optimizer.notraineroptimizer method)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer.init_distiller"]], "init_pruner() (intel_extension_for_transformers.optimization.optimizer.notraineroptimizer method)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer.init_pruner"]], "init_quantizer() (intel_extension_for_transformers.optimization.optimizer.notraineroptimizer method)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer.init_quantizer"]], "intel_extension_for_transformers.optimization.optimizer": [[122, "module-intel_extension_for_transformers.optimization.optimizer"]], "provider (intel_extension_for_transformers.optimization.optimizer.notraineroptimizer property)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer.provider"]], "prune() (intel_extension_for_transformers.optimization.optimizer.notraineroptimizer method)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer.prune"]], "quantize() (intel_extension_for_transformers.optimization.optimizer.notraineroptimizer method)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer.quantize"]], "train_func (intel_extension_for_transformers.optimization.optimizer.notraineroptimizer property)": [[122, "intel_extension_for_transformers.optimization.optimizer.NoTrainerOptimizer.train_func"]], "tfoptimization (class in intel_extension_for_transformers.optimization.optimizer_tf)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization"]], "autodistill() (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization method)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.autodistill"]], "build_train_func() (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization method)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.build_train_func"]], "builtin_eval_func() (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization method)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.builtin_eval_func"]], "distill() (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization method)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.distill"]], "eval_dataset (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization property)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.eval_dataset"]], "eval_func (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization property)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.eval_func"]], "init_distiller() (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization method)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.init_distiller"]], "init_pruner() (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization method)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.init_pruner"]], "init_quantizer() (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization method)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.init_quantizer"]], "input_names (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization property)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.input_names"]], "inputs (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization property)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.inputs"]], "intel_extension_for_transformers.optimization.optimizer_tf": [[123, "module-intel_extension_for_transformers.optimization.optimizer_tf"]], "model_builder_builtin() (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization method)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.model_builder_builtin"]], "output_names (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization property)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.output_names"]], "prune() (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization method)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.prune"]], "quantize() (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization method)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.quantize"]], "train_dataset (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization property)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.train_dataset"]], "train_func (intel_extension_for_transformers.optimization.optimizer_tf.tfoptimization property)": [[123, "intel_extension_for_transformers.optimization.optimizer_tf.TFOptimization.train_func"]], "infer_framework_load_model() (in module intel_extension_for_transformers.optimization.pipeline)": [[124, "intel_extension_for_transformers.optimization.pipeline.infer_framework_load_model"]], "intel_extension_for_transformers.optimization.pipeline": [[124, "module-intel_extension_for_transformers.optimization.pipeline"]], "prunerconfig (class in intel_extension_for_transformers.optimization.pruning)": [[125, "intel_extension_for_transformers.optimization.pruning.PrunerConfig"]], "pruningmode (class in intel_extension_for_transformers.optimization.pruning)": [[125, "intel_extension_for_transformers.optimization.pruning.PruningMode"]], "intel_extension_for_transformers.optimization.pruning": [[125, "module-intel_extension_for_transformers.optimization.pruning"]], "intel_extension_for_transformers.optimization.pytorch_pruner": [[126, "module-intel_extension_for_transformers.optimization.pytorch_pruner"]], "get_pattern() (in module intel_extension_for_transformers.optimization.pytorch_pruner.patterns)": [[127, "intel_extension_for_transformers.optimization.pytorch_pruner.patterns.get_pattern"]], "intel_extension_for_transformers.optimization.pytorch_pruner.patterns": [[127, "module-intel_extension_for_transformers.optimization.pytorch_pruner.patterns"]], "register_pattern() (in module intel_extension_for_transformers.optimization.pytorch_pruner.patterns)": [[127, "intel_extension_for_transformers.optimization.pytorch_pruner.patterns.register_pattern"]], "intel_extension_for_transformers.optimization.pytorch_pruner.prune_utils": [[128, "module-intel_extension_for_transformers.optimization.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module intel_extension_for_transformers.optimization.pytorch_pruner.prune_utils)": [[128, "intel_extension_for_transformers.optimization.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module intel_extension_for_transformers.optimization.pytorch_pruner.prune_utils)": [[128, "intel_extension_for_transformers.optimization.pytorch_pruner.prune_utils.parse_to_prune"]], "snippruner (class in intel_extension_for_transformers.optimization.pytorch_pruner.pruner)": [[129, "intel_extension_for_transformers.optimization.pytorch_pruner.pruner.SnipPruner"]], "get_pruner() (in module intel_extension_for_transformers.optimization.pytorch_pruner.pruner)": [[129, "intel_extension_for_transformers.optimization.pytorch_pruner.pruner.get_pruner"]], "intel_extension_for_transformers.optimization.pytorch_pruner.pruner": [[129, "module-intel_extension_for_transformers.optimization.pytorch_pruner.pruner"]], "register_pruners() (in module intel_extension_for_transformers.optimization.pytorch_pruner.pruner)": [[129, "intel_extension_for_transformers.optimization.pytorch_pruner.pruner.register_pruners"]], "intel_extension_for_transformers.optimization.pytorch_pruner.pruning": [[130, "module-intel_extension_for_transformers.optimization.pytorch_pruner.pruning"]], "get_scheduler() (in module intel_extension_for_transformers.optimization.pytorch_pruner.scheduler)": [[131, "intel_extension_for_transformers.optimization.pytorch_pruner.scheduler.get_scheduler"]], "intel_extension_for_transformers.optimization.pytorch_pruner.scheduler": [[131, "module-intel_extension_for_transformers.optimization.pytorch_pruner.scheduler"]], "register_scheduler() (in module intel_extension_for_transformers.optimization.pytorch_pruner.scheduler)": [[131, "intel_extension_for_transformers.optimization.pytorch_pruner.scheduler.register_scheduler"]], "quantizationmode (class in intel_extension_for_transformers.optimization.quantization)": [[132, "intel_extension_for_transformers.optimization.quantization.QuantizationMode"]], "intel_extension_for_transformers.optimization.quantization": [[132, "module-intel_extension_for_transformers.optimization.quantization"]], "basetrainer (class in intel_extension_for_transformers.optimization.trainer)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer"]], "nlpseq2seqtrainer (class in intel_extension_for_transformers.optimization.trainer)": [[133, "intel_extension_for_transformers.optimization.trainer.NLPSeq2SeqTrainer"]], "nlptrainer (class in intel_extension_for_transformers.optimization.trainer)": [[133, "intel_extension_for_transformers.optimization.trainer.NLPTrainer"]], "auto_distil_evaluation_loop() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.auto_distil_evaluation_loop"]], "autodistillation() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.autodistillation"]], "builtin_eval_func() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.builtin_eval_func"]], "builtin_eval_func() (intel_extension_for_transformers.optimization.trainer.nlpseq2seqtrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.NLPSeq2SeqTrainer.builtin_eval_func"]], "builtin_train_func() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.builtin_train_func"]], "calib_dataloader (intel_extension_for_transformers.optimization.trainer.basetrainer property)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.calib_dataloader"]], "compute_loss() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.compute_loss"]], "create_optimizer_builtin() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.create_optimizer_builtin"]], "distill() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.distill"]], "eval_func (intel_extension_for_transformers.optimization.trainer.basetrainer property)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.eval_func"]], "export_to_bf16_onnx() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.export_to_bf16_onnx"]], "export_to_fp32_onnx() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.export_to_fp32_onnx"]], "export_to_int8_onnx() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.export_to_int8_onnx"]], "export_to_jit() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.export_to_jit"]], "export_to_onnx() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.export_to_onnx"]], "init_distiller() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.init_distiller"]], "init_pruner() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.init_pruner"]], "init_quantizer() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.init_quantizer"]], "intel_extension_for_transformers.optimization.trainer": [[133, "module-intel_extension_for_transformers.optimization.trainer"]], "max_length (intel_extension_for_transformers.optimization.trainer.nlpseq2seqtrainer property)": [[133, "intel_extension_for_transformers.optimization.trainer.NLPSeq2SeqTrainer.max_length"]], "model_builder_builtin() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.model_builder_builtin"]], "num_beams (intel_extension_for_transformers.optimization.trainer.nlpseq2seqtrainer property)": [[133, "intel_extension_for_transformers.optimization.trainer.NLPSeq2SeqTrainer.num_beams"]], "orchestrate_optimizations() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.orchestrate_optimizations"]], "provider (intel_extension_for_transformers.optimization.trainer.basetrainer property)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.provider"]], "prune() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.prune"]], "quantize() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.quantize"]], "resuming_checkpoint (intel_extension_for_transformers.optimization.trainer.basetrainer property)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.resuming_checkpoint"]], "run_evolutionary_search() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.run_evolutionary_search"]], "set_dynamic_config() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.set_dynamic_config"]], "train() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.train"]], "train_func (intel_extension_for_transformers.optimization.trainer.basetrainer property)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.train_func"]], "training_step() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.training_step"]], "training_step_length_adaptive() (intel_extension_for_transformers.optimization.trainer.basetrainer method)": [[133, "intel_extension_for_transformers.optimization.trainer.BaseTrainer.training_step_length_adaptive"]], "intel_extension_for_transformers.optimization.utils": [[134, "module-intel_extension_for_transformers.optimization.utils"]], "metric (class in intel_extension_for_transformers.optimization.utils.metrics)": [[135, "intel_extension_for_transformers.optimization.utils.metrics.Metric"]], "intel_extension_for_transformers.optimization.utils.metrics": [[135, "module-intel_extension_for_transformers.optimization.utils.metrics"]], "intel_extension_for_transformers.optimization.utils.models": [[136, "module-intel_extension_for_transformers.optimization.utils.models"]], "bertembeddings (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertEmbeddings"]], "bertformaskedlm (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForMaskedLM"]], "bertformultiplechoice (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForMultipleChoice"]], "bertfornextsentenceprediction (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForNextSentencePrediction"]], "bertforpretraining (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForPreTraining"]], "bertforpretrainingoutput (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForPreTrainingOutput"]], "bertforquestionanswering (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForQuestionAnswering"]], "bertforsequenceclassification (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForSequenceClassification"]], "bertfortokenclassification (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForTokenClassification"]], "bertlmheadmodel (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertLMHeadModel"]], "bertmodel (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertModel"]], "bertpretrainedmodel (class in intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertPreTrainedModel"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.bertformaskedlm method)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForMaskedLM.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.bertformultiplechoice method)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForMultipleChoice.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.bertfornextsentenceprediction method)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForNextSentencePrediction.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.bertforpretraining method)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForPreTraining.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.bertforquestionanswering method)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForQuestionAnswering.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.bertforsequenceclassification method)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForSequenceClassification.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.bertfortokenclassification method)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertForTokenClassification.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.bertlmheadmodel method)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertLMHeadModel.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.bertmodel method)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.BertModel.forward"]], "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic": [[137, "module-intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic"]], "load_tf_weights_in_bert() (in module intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic)": [[137, "intel_extension_for_transformers.optimization.utils.models.modeling_bert_dynamic.load_tf_weights_in_bert"]], "robertaattention (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaAttention"]], "robertaclassificationhead (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaClassificationHead"]], "robertaembeddings (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaEmbeddings"]], "robertaencoder (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaEncoder"]], "robertaforcausallm (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForCausalLM"]], "robertaformaskedlm (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForMaskedLM"]], "robertaformultiplechoice (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForMultipleChoice"]], "robertaforquestionanswering (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForQuestionAnswering"]], "robertaforsequenceclassification (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForSequenceClassification"]], "robertafortokenclassification (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForTokenClassification"]], "robertaintermediate (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaIntermediate"]], "robertalmhead (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaLMHead"]], "robertalayer (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaLayer"]], "robertamodel (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaModel"]], "robertaoutput (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaOutput"]], "robertapooler (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaPooler"]], "robertapretrainedmodel (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaPreTrainedModel"]], "robertaselfattention (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaSelfAttention"]], "robertaselfoutput (class in intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaSelfOutput"]], "create_position_ids_from_input_ids() (in module intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.create_position_ids_from_input_ids"]], "create_position_ids_from_inputs_embeds() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaembeddings method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaEmbeddings.create_position_ids_from_inputs_embeds"]], "expand_gather() (in module intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.expand_gather"]], "feed_forward_chunk() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertalayer method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaLayer.feed_forward_chunk"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaattention method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaAttention.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaclassificationhead method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaClassificationHead.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaembeddings method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaEmbeddings.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaencoder method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaEncoder.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaforcausallm method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForCausalLM.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaformaskedlm method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForMaskedLM.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaformultiplechoice method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForMultipleChoice.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaforquestionanswering method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForQuestionAnswering.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaforsequenceclassification method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForSequenceClassification.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertafortokenclassification method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForTokenClassification.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaintermediate method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaIntermediate.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertalmhead method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaLMHead.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertalayer method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaLayer.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertamodel method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaModel.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaoutput method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaOutput.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertapooler method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaPooler.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaselfattention method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaSelfAttention.forward"]], "forward() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaselfoutput method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaSelfOutput.forward"]], "get_input_embeddings() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertamodel method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaModel.get_input_embeddings"]], "get_output_embeddings() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaforcausallm method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForCausalLM.get_output_embeddings"]], "get_output_embeddings() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaformaskedlm method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForMaskedLM.get_output_embeddings"]], "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic": [[138, "module-intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic"]], "prepare_inputs_for_generation() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaforcausallm method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForCausalLM.prepare_inputs_for_generation"]], "prune_heads() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaattention method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaAttention.prune_heads"]], "set_input_embeddings() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertamodel method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaModel.set_input_embeddings"]], "set_length_config() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertamodel method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaModel.set_length_config"]], "set_output_attentions() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertamodel method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaModel.set_output_attentions"]], "set_output_embeddings() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaforcausallm method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForCausalLM.set_output_embeddings"]], "set_output_embeddings() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaformaskedlm method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaForMaskedLM.set_output_embeddings"]], "transpose_for_scores() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertaselfattention method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaSelfAttention.transpose_for_scores"]], "update_keys_to_ignore() (intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.robertapretrainedmodel method)": [[138, "intel_extension_for_transformers.optimization.utils.models.modeling_roberta_dynamic.RobertaPreTrainedModel.update_keys_to_ignore"]], "objective (class in intel_extension_for_transformers.optimization.utils.objectives)": [[139, "intel_extension_for_transformers.optimization.utils.objectives.Objective"]], "intel_extension_for_transformers.optimization.utils.objectives": [[139, "module-intel_extension_for_transformers.optimization.utils.objectives"]], "modelsize() (intel_extension_for_transformers.optimization.utils.objectives.objective static method)": [[139, "intel_extension_for_transformers.optimization.utils.objectives.Objective.modelsize"]], "performance() (intel_extension_for_transformers.optimization.utils.objectives.objective static method)": [[139, "intel_extension_for_transformers.optimization.utils.objectives.Objective.performance"]], "distributed_init() (in module intel_extension_for_transformers.optimization.utils.utility)": [[140, "intel_extension_for_transformers.optimization.utils.utility.distributed_init"]], "intel_extension_for_transformers.optimization.utils.utility": [[140, "module-intel_extension_for_transformers.optimization.utils.utility"]], "tfdataloader (class in intel_extension_for_transformers.optimization.utils.utility_tf)": [[141, "intel_extension_for_transformers.optimization.utils.utility_tf.TFDataloader"]], "distributed_init() (in module intel_extension_for_transformers.optimization.utils.utility_tf)": [[141, "intel_extension_for_transformers.optimization.utils.utility_tf.distributed_init"]], "get_filepath() (in module intel_extension_for_transformers.optimization.utils.utility_tf)": [[141, "intel_extension_for_transformers.optimization.utils.utility_tf.get_filepath"]], "intel_extension_for_transformers.optimization.utils.utility_tf": [[141, "module-intel_extension_for_transformers.optimization.utils.utility_tf"]], "keras2savedmodel() (in module intel_extension_for_transformers.optimization.utils.utility_tf)": [[141, "intel_extension_for_transformers.optimization.utils.utility_tf.keras2SavedModel"]], "intel_extension_for_transformers.preprocessing.data_augmentation": [[142, "module-intel_extension_for_transformers.preprocessing.data_augmentation"]], "intel_extension_for_transformers.preprocessing": [[143, "module-intel_extension_for_transformers.preprocessing"]], "augmentertype (class in intel_extension_for_transformers.preprocessing.utils)": [[144, "intel_extension_for_transformers.preprocessing.utils.AugmenterType"]], "intel_extension_for_transformers.preprocessing.utils": [[144, "module-intel_extension_for_transformers.preprocessing.utils"]], "intel_extension_for_transformers.version": [[145, "module-intel_extension_for_transformers.version"]], "testaddclstoken (class in test_add_cls_token)": [[146, "test_add_cls_token.TestAddClsToken"]], "setupclass() (test_add_cls_token.testaddclstoken class method)": [[146, "test_add_cls_token.TestAddClsToken.setUpClass"]], "teardownclass() (test_add_cls_token.testaddclstoken class method)": [[146, "test_add_cls_token.TestAddClsToken.tearDownClass"]], "test_add_cls_token": [[146, "module-test_add_cls_token"]], "testattentionreshape (class in test_attention_output_layer_norm_length_adaptive_keep_indices)": [[147, "test_attention_output_layer_norm_length_adaptive_keep_indices.TestAttentionReshape"]], "setupclass() (test_attention_output_layer_norm_length_adaptive_keep_indices.testattentionreshape class method)": [[147, "test_attention_output_layer_norm_length_adaptive_keep_indices.TestAttentionReshape.setUpClass"]], "teardownclass() (test_attention_output_layer_norm_length_adaptive_keep_indices.testattentionreshape class method)": [[147, "test_attention_output_layer_norm_length_adaptive_keep_indices.TestAttentionReshape.tearDownClass"]], "test_attention_output_layer_norm_length_adaptive_keep_indices": [[147, "module-test_attention_output_layer_norm_length_adaptive_keep_indices"]], "testattentionreshape (class in test_attention_reshape)": [[148, "test_attention_reshape.TestAttentionReshape"]], "setupclass() (test_attention_reshape.testattentionreshape class method)": [[148, "test_attention_reshape.TestAttentionReshape.setUpClass"]], "teardownclass() (test_attention_reshape.testattentionreshape class method)": [[148, "test_attention_reshape.TestAttentionReshape.tearDownClass"]], "test_attention_reshape": [[148, "module-test_attention_reshape"]], "testconvreshape (class in test_conv_reshape)": [[149, "test_conv_reshape.TestConvReshape"]], "setupclass() (test_conv_reshape.testconvreshape class method)": [[149, "test_conv_reshape.TestConvReshape.setUpClass"]], "teardownclass() (test_conv_reshape.testconvreshape class method)": [[149, "test_conv_reshape.TestConvReshape.tearDownClass"]], "test_conv_reshape": [[149, "module-test_conv_reshape"]], "testembeddingbag (class in test_embeddingbag)": [[150, "test_embeddingbag.TestEmbeddingBag"]], "setupclass() (test_embeddingbag.testembeddingbag class method)": [[150, "test_embeddingbag.TestEmbeddingBag.setUpClass"]], "teardownclass() (test_embeddingbag.testembeddingbag class method)": [[150, "test_embeddingbag.TestEmbeddingBag.tearDownClass"]], "test_embeddingbag": [[150, "module-test_embeddingbag"]], "testexecutionoptions (class in test_execution_options)": [[151, "test_execution_options.TestExecutionOptions"]], "setupclass() (test_execution_options.testexecutionoptions class method)": [[151, "test_execution_options.TestExecutionOptions.setUpClass"]], "teardownclass() (test_execution_options.testexecutionoptions class method)": [[151, "test_execution_options.TestExecutionOptions.tearDownClass"]], "test_execution_options": [[151, "module-test_execution_options"]], "testgelu (class in test_gelu)": [[152, "test_gelu.TestGelu"]], "setupclass() (test_gelu.testgelu class method)": [[152, "test_gelu.TestGelu.setUpClass"]], "teardownclass() (test_gelu.testgelu class method)": [[152, "test_gelu.TestGelu.tearDownClass"]], "test_gelu": [[152, "module-test_gelu"]], "testgraphdispatch (class in test_graph_dispatch)": [[153, "test_graph_dispatch.TestGraphDispatch"]], "setupclass() (test_graph_dispatch.testgraphdispatch class method)": [[153, "test_graph_dispatch.TestGraphDispatch.setUpClass"]], "teardownclass() (test_graph_dispatch.testgraphdispatch class method)": [[153, "test_graph_dispatch.TestGraphDispatch.tearDownClass"]], "test_graph_dispatch": [[153, "module-test_graph_dispatch"]], "testinsertinputouputdata (class in test_insert_input_output_data)": [[154, "test_insert_input_output_data.TestInsertInputOuputData"]], "setupclass() (test_insert_input_output_data.testinsertinputouputdata class method)": [[154, "test_insert_input_output_data.TestInsertInputOuputData.setUpClass"]], "teardownclass() (test_insert_input_output_data.testinsertinputouputdata class method)": [[154, "test_insert_input_output_data.TestInsertInputOuputData.tearDownClass"]], "test_insert_input_output_data": [[154, "module-test_insert_input_output_data"]], "testissupportedonnxgraph (class in test_is_supported_onnx_graph)": [[155, "test_is_supported_onnx_graph.TestIsSupportedOnnxGraph"]], "setupclass() (test_is_supported_onnx_graph.testissupportedonnxgraph class method)": [[155, "test_is_supported_onnx_graph.TestIsSupportedOnnxGraph.setUpClass"]], "teardownclass() (test_is_supported_onnx_graph.testissupportedonnxgraph class method)": [[155, "test_is_supported_onnx_graph.TestIsSupportedOnnxGraph.tearDownClass"]], "test_is_supported_onnx_graph": [[155, "module-test_is_supported_onnx_graph"]], "test_is_supported_onnx_graph() (test_is_supported_onnx_graph.testissupportedonnxgraph method)": [[155, "test_is_supported_onnx_graph.TestIsSupportedOnnxGraph.test_is_supported_onnx_graph"]], "testlastlayershape (class in test_last_layer_shape)": [[156, "test_last_layer_shape.TestLastLayerShape"]], "setupclass() (test_last_layer_shape.testlastlayershape class method)": [[156, "test_last_layer_shape.TestLastLayerShape.setUpClass"]], "teardownclass() (test_last_layer_shape.testlastlayershape class method)": [[156, "test_last_layer_shape.TestLastLayerShape.tearDownClass"]], "test_last_layer_shape": [[156, "module-test_last_layer_shape"]], "testlayernormwithreducemean (class in test_layer_norm_with_reduce_mean)": [[157, "test_layer_norm_with_reduce_mean.TestLayerNormWithReduceMean"]], "setupclass() (test_layer_norm_with_reduce_mean.testlayernormwithreducemean class method)": [[157, "test_layer_norm_with_reduce_mean.TestLayerNormWithReduceMean.setUpClass"]], "teardownclass() (test_layer_norm_with_reduce_mean.testlayernormwithreducemean class method)": [[157, "test_layer_norm_with_reduce_mean.TestLayerNormWithReduceMean.tearDownClass"]], "test_layer_norm_with_reduce_mean": [[157, "module-test_layer_norm_with_reduce_mean"]], "testmain (class in test_main)": [[158, "test_main.TestMain"]], "setupclass() (test_main.testmain class method)": [[158, "test_main.TestMain.setUpClass"]], "teardownclass() (test_main.testmain class method)": [[158, "test_main.TestMain.tearDownClass"]], "test_main": [[158, "module-test_main"]], "testmatmulwithbiasrelu (class in test_matmul_with_bias_relu)": [[159, "test_matmul_with_bias_relu.TestMatmulWithBiasRelu"]], "setupclass() (test_matmul_with_bias_relu.testmatmulwithbiasrelu class method)": [[159, "test_matmul_with_bias_relu.TestMatmulWithBiasRelu.setUpClass"]], "teardownclass() (test_matmul_with_bias_relu.testmatmulwithbiasrelu class method)": [[159, "test_matmul_with_bias_relu.TestMatmulWithBiasRelu.tearDownClass"]], "test_matmul_with_bias_relu": [[159, "module-test_matmul_with_bias_relu"]], "testmatmulwithbiassigmoid (class in test_matmul_with_bias_sigmoid)": [[160, "test_matmul_with_bias_sigmoid.TestMatMulWithBiasSigmoid"]], "setupclass() (test_matmul_with_bias_sigmoid.testmatmulwithbiassigmoid class method)": [[160, "test_matmul_with_bias_sigmoid.TestMatMulWithBiasSigmoid.setUpClass"]], "teardownclass() (test_matmul_with_bias_sigmoid.testmatmulwithbiassigmoid class method)": [[160, "test_matmul_with_bias_sigmoid.TestMatMulWithBiasSigmoid.tearDownClass"]], "test_matmul_with_bias_sigmoid": [[160, "module-test_matmul_with_bias_sigmoid"]], "testmatmulwithbiastanh (class in test_matmul_with_bias_tanh)": [[161, "test_matmul_with_bias_tanh.TestMatmulWithBiasTanh"]], "setupclass() (test_matmul_with_bias_tanh.testmatmulwithbiastanh class method)": [[161, "test_matmul_with_bias_tanh.TestMatmulWithBiasTanh.setUpClass"]], "teardownclass() (test_matmul_with_bias_tanh.testmatmulwithbiastanh class method)": [[161, "test_matmul_with_bias_tanh.TestMatmulWithBiasTanh.tearDownClass"]], "test_matmul_with_bias_tanh": [[161, "module-test_matmul_with_bias_tanh"]], "testmergedembeddingbag (class in test_merged_embeddingbag)": [[162, "test_merged_embeddingbag.TestMergedEmbeddingbag"]], "setupclass() (test_merged_embeddingbag.testmergedembeddingbag class method)": [[162, "test_merged_embeddingbag.TestMergedEmbeddingbag.setUpClass"]], "teardownclass() (test_merged_embeddingbag.testmergedembeddingbag class method)": [[162, "test_merged_embeddingbag.TestMergedEmbeddingbag.tearDownClass"]], "test_merged_embeddingbag": [[162, "module-test_merged_embeddingbag"]], "test_model": [[163, "module-test_model"]], "testonnxutils (class in test_onnx_utils)": [[164, "test_onnx_utils.TestOnnxUtils"]], "setupclass() (test_onnx_utils.testonnxutils class method)": [[164, "test_onnx_utils.TestOnnxUtils.setUpClass"]], "teardownclass() (test_onnx_utils.testonnxutils class method)": [[164, "test_onnx_utils.TestOnnxUtils.tearDownClass"]], "test_onnx_utils": [[164, "module-test_onnx_utils"]], "testops (class in test_ops)": [[165, "test_ops.TestOps"]], "setupclass() (test_ops.testops class method)": [[165, "test_ops.TestOps.setUpClass"]], "teardownclass() (test_ops.testops class method)": [[165, "test_ops.TestOps.tearDownClass"]], "test_ops": [[165, "module-test_ops"]], "testpaddingsequence (class in test_padding_sequence)": [[166, "test_padding_sequence.TestPaddingSequence"]], "setupclass() (test_padding_sequence.testpaddingsequence class method)": [[166, "test_padding_sequence.TestPaddingSequence.setUpClass"]], "teardownclass() (test_padding_sequence.testpaddingsequence class method)": [[166, "test_padding_sequence.TestPaddingSequence.tearDownClass"]], "test_padding_sequence": [[166, "module-test_padding_sequence"]], "testpatterndispatch (class in test_pattern_dispatch)": [[167, "test_pattern_dispatch.TestPatternDispatch"]], "setupclass() (test_pattern_dispatch.testpatterndispatch class method)": [[167, "test_pattern_dispatch.TestPatternDispatch.setUpClass"]], "teardownclass() (test_pattern_dispatch.testpatterndispatch class method)": [[167, "test_pattern_dispatch.TestPatternDispatch.tearDownClass"]], "test_pattern_dispatch": [[167, "module-test_pattern_dispatch"]], "testpositionembeddings (class in test_position_embeddings)": [[168, "test_position_embeddings.TestPositionEmbeddings"]], "setupclass() (test_position_embeddings.testpositionembeddings class method)": [[168, "test_position_embeddings.TestPositionEmbeddings.setUpClass"]], "teardownclass() (test_position_embeddings.testpositionembeddings class method)": [[168, "test_position_embeddings.TestPositionEmbeddings.tearDownClass"]], "test_position_embeddings": [[168, "module-test_position_embeddings"]], "testqkvmerge (class in test_qkv_merge)": [[169, "test_qkv_merge.TestQKVMerge"]], "setupclass() (test_qkv_merge.testqkvmerge class method)": [[169, "test_qkv_merge.TestQKVMerge.setUpClass"]], "teardownclass() (test_qkv_merge.testqkvmerge class method)": [[169, "test_qkv_merge.TestQKVMerge.tearDownClass"]], "test_qkv_merge": [[169, "module-test_qkv_merge"]], "testattentionreshape (class in test_qkv_reshape)": [[170, "test_qkv_reshape.TestAttentionReshape"]], "setupclass() (test_qkv_reshape.testattentionreshape class method)": [[170, "test_qkv_reshape.TestAttentionReshape.setUpClass"]], "teardownclass() (test_qkv_reshape.testattentionreshape class method)": [[170, "test_qkv_reshape.TestAttentionReshape.tearDownClass"]], "test_qkv_reshape": [[170, "module-test_qkv_reshape"]], "testquantonnxexecute (class in test_quant_onnx_execute)": [[171, "test_quant_onnx_execute.TestQuantOnnxExecute"]], "setupclass() (test_quant_onnx_execute.testquantonnxexecute class method)": [[171, "test_quant_onnx_execute.TestQuantOnnxExecute.setUpClass"]], "teardownclass() (test_quant_onnx_execute.testquantonnxexecute class method)": [[171, "test_quant_onnx_execute.TestQuantOnnxExecute.tearDownClass"]], "test_quant_onnx_execute": [[171, "module-test_quant_onnx_execute"]], "testlayernormwithreducemean (class in test_reshape_after_restore_hidden_states)": [[172, "test_reshape_after_restore_hidden_states.TestLayerNormWithReduceMean"]], "setupclass() (test_reshape_after_restore_hidden_states.testlayernormwithreducemean class method)": [[172, "test_reshape_after_restore_hidden_states.TestLayerNormWithReduceMean.setUpClass"]], "teardownclass() (test_reshape_after_restore_hidden_states.testlayernormwithreducemean class method)": [[172, "test_reshape_after_restore_hidden_states.TestLayerNormWithReduceMean.tearDownClass"]], "test_reshape_after_restore_hidden_states": [[172, "module-test_reshape_after_restore_hidden_states"]], "testattentionreshape (class in test_reshape_before_and_after_attention_out_layer_norm_gather_elements)": [[173, "test_reshape_before_and_after_attention_out_layer_norm_gather_elements.TestAttentionReshape"]], "setupclass() (test_reshape_before_and_after_attention_out_layer_norm_gather_elements.testattentionreshape class method)": [[173, "test_reshape_before_and_after_attention_out_layer_norm_gather_elements.TestAttentionReshape.setUpClass"]], "teardownclass() (test_reshape_before_and_after_attention_out_layer_norm_gather_elements.testattentionreshape class method)": [[173, "test_reshape_before_and_after_attention_out_layer_norm_gather_elements.TestAttentionReshape.tearDownClass"]], "test_reshape_before_and_after_attention_out_layer_norm_gather_elements": [[173, "module-test_reshape_before_and_after_attention_out_layer_norm_gather_elements"]], "testlayernormwithreducemean (class in test_reshape_before_restore_hidden_states)": [[174, "test_reshape_before_restore_hidden_states.TestLayerNormWithReduceMean"]], "setupclass() (test_reshape_before_restore_hidden_states.testlayernormwithreducemean class method)": [[174, "test_reshape_before_restore_hidden_states.TestLayerNormWithReduceMean.setUpClass"]], "teardownclass() (test_reshape_before_restore_hidden_states.testlayernormwithreducemean class method)": [[174, "test_reshape_before_restore_hidden_states.TestLayerNormWithReduceMean.tearDownClass"]], "test_reshape_before_restore_hidden_states": [[174, "module-test_reshape_before_restore_hidden_states"]], "teststartendlogits (class in test_start_end_logits)": [[175, "test_start_end_logits.TestStartEndLogits"]], "setupclass() (test_start_end_logits.teststartendlogits class method)": [[175, "test_start_end_logits.TestStartEndLogits.setUpClass"]], "teardownclass() (test_start_end_logits.teststartendlogits class method)": [[175, "test_start_end_logits.TestStartEndLogits.tearDownClass"]], "test_start_end_logits": [[175, "module-test_start_end_logits"]], "testtfutils (class in test_tf_utils)": [[176, "test_tf_utils.TestTfUtils"]], "setupclass() (test_tf_utils.testtfutils class method)": [[176, "test_tf_utils.TestTfUtils.setUpClass"]], "teardownclass() (test_tf_utils.testtfutils class method)": [[176, "test_tf_utils.TestTfUtils.tearDownClass"]], "test_tf_utils": [[176, "module-test_tf_utils"]], "testtokentypeembeddings (class in test_token_type_embeddings)": [[177, "test_token_type_embeddings.TestTokenTypeEmbeddings"]], "setupclass() (test_token_type_embeddings.testtokentypeembeddings class method)": [[177, "test_token_type_embeddings.TestTokenTypeEmbeddings.setUpClass"]], "teardownclass() (test_token_type_embeddings.testtokentypeembeddings class method)": [[177, "test_token_type_embeddings.TestTokenTypeEmbeddings.tearDownClass"]], "test_token_type_embeddings": [[177, "module-test_token_type_embeddings"]], "testtranspose (class in test_transpose)": [[178, "test_transpose.TestTranspose"]], "setupclass() (test_transpose.testtranspose class method)": [[178, "test_transpose.TestTranspose.setUpClass"]], "teardownclass() (test_transpose.testtranspose class method)": [[178, "test_transpose.TestTranspose.tearDownClass"]], "test_transpose": [[178, "module-test_transpose"]], "testtransposebatchmatmul (class in test_transpose_batch_matmul)": [[179, "test_transpose_batch_matmul.TestTransposeBatchMatMul"]], "setupclass() (test_transpose_batch_matmul.testtransposebatchmatmul class method)": [[179, "test_transpose_batch_matmul.TestTransposeBatchMatMul.setUpClass"]], "teardownclass() (test_transpose_batch_matmul.testtransposebatchmatmul class method)": [[179, "test_transpose_batch_matmul.TestTransposeBatchMatMul.tearDownClass"]], "test_transpose_batch_matmul": [[179, "module-test_transpose_batch_matmul"]]}})