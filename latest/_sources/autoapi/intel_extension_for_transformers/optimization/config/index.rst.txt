:py:mod:`intel_extension_for_transformers.optimization.config`
==============================================================

.. py:module:: intel_extension_for_transformers.optimization.config

.. autoapi-nested-parse::

   Config: provide config classes for optimization processes.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   intel_extension_for_transformers.optimization.config.Provider
   intel_extension_for_transformers.optimization.config.DynamicLengthConfig
   intel_extension_for_transformers.optimization.config.QuantizationConfig
   intel_extension_for_transformers.optimization.config.PruningConfig
   intel_extension_for_transformers.optimization.config.DistillationConfig
   intel_extension_for_transformers.optimization.config.TFDistillationConfig
   intel_extension_for_transformers.optimization.config.FlashDistillationConfig
   intel_extension_for_transformers.optimization.config.AutoDistillationConfig




.. py:class:: Provider

   Bases: :py:obj:`enum.Enum`

   Optimization functionalities provider: INC or NNCF.


.. py:class:: DynamicLengthConfig(max_length: int = None, length_config: str = None, const_rate: float = None, num_sandwich: int = 2, length_drop_ratio_bound: float = 0.2, layer_dropout_prob: float = None, layer_dropout_bound: int = 0, dynamic_training: bool = False, load_store_file: str = None, evo_iter: int = 30, population_size: int = 20, mutation_size: int = 30, mutation_prob: float = 0.5, crossover_size: int = 30, num_cpus: int = 48, distributed_world_size: int = 5, latency_constraint: bool = True, evo_eval_metric='eval_f1')

   Bases: :py:obj:`object`

   Configure the dynamic length config for Quantized Length Adaptive Transformer.


.. py:class:: QuantizationConfig(framework: str = 'pytorch', approach: str = 'PostTrainingStatic', timeout: int = 0, max_trials: int = 100, metrics: Union[intel_extension_for_transformers.optimization.utils.metrics.Metric, List] = None, objectives: Union[intel_extension_for_transformers.optimization.utils.objectives.Objective, List] = performance, config_file: str = None, sampling_size: int = 100, use_bf16: bool = False)

   Bases: :py:obj:`object`

   Configure the quantization process.

   .. py:property:: approach

      Get the quantization approach.

   .. py:property:: input_names

      Get the input names.

   .. py:property:: output_names

      Get the output names.

   .. py:property:: metrics

      Get the metrics.

   .. py:property:: framework

      Get the framework.

   .. py:property:: objectives

      Get the objectives.

   .. py:property:: strategy

      Get the strategy.

   .. py:property:: timeout

      Get the timeout.

   .. py:property:: op_wise

      Get the op_wise dict.

   .. py:property:: max_trials

      Get the number of maximum trials.

   .. py:property:: performance_only

      Get the boolean whether to use performance only.

   .. py:property:: random_seed

      Get the random seed.

   .. py:property:: tensorboard

      Get the boolean whether to use tensorboard.

   .. py:property:: output_dir

      Get the output directory.

   .. py:property:: resume_path

      Get the resume path.

   .. py:property:: sampling_size

      Get the sampling size.


.. py:class:: PruningConfig(framework: str = 'pytorch', epochs: int = 1, epoch_range: List = [0, 4], initial_sparsity_ratio: float = 0.0, target_sparsity_ratio: float = 0.97, metrics: intel_extension_for_transformers.optimization.utils.metrics.Metric = None, pruner_config: Union[List, neural_compressor.conf.config.Pruner] = None, config_file: str = None)

   Bases: :py:obj:`object`

   Configure the pruning process.

   .. py:property:: pruner_config

      Get the pruner config.

   .. py:property:: target_sparsity_ratio

      Get the target sparsity ratio.

   .. py:property:: initial_sparsity_ratio

      Get the initial sparsity ratio.

   .. py:property:: epoch_range

      Get the epoch range.

   .. py:property:: epochs

      Get the epochs.

   .. py:property:: framework

      Get the framework.

   .. py:property:: metrics

      Get the metrics.

   .. py:method:: init_prune_config()

      Init the pruning config.



.. py:class:: DistillationConfig(framework: str = 'pytorch', criterion: intel_extension_for_transformers.optimization.distillation.Criterion = None, metrics: intel_extension_for_transformers.optimization.utils.metrics.Metric = None, inc_config=None)

   Bases: :py:obj:`object`

   Configure the distillation process.

   .. py:property:: framework

      Get the framework.

   .. py:property:: criterion

      Get the criterion.

   .. py:property:: metrics

      Get the metrics.


.. py:class:: TFDistillationConfig(loss_types: list = [], loss_weights: list = [], train_steps: list = [], temperature: float = 1.0)

   Bases: :py:obj:`object`

   Configure the distillation process for Tensorflow.


.. py:class:: FlashDistillationConfig(block_names: list = [], layer_mappings_for_knowledge_transfer: list = [], loss_types: list = [], loss_weights: list = [], add_origin_loss: list = [], train_steps: list = [])

   Bases: :py:obj:`object`

   The flash distillation configuration used by AutoDistillationConfig.


.. py:class:: AutoDistillationConfig(framework: str = 'pytorch', search_space: dict = {}, search_algorithm: str = 'BO', metrics: Union[List, intel_extension_for_transformers.optimization.utils.metrics.Metric] = None, max_trials: int = None, seed: int = None, knowledge_transfer: FlashDistillationConfig = None, regular_distillation: FlashDistillationConfig = None)

   Bases: :py:obj:`object`

   Configure the auto disillation process.

   .. py:property:: knowledge_transfer

      Get the knowledge transfer.

   .. py:property:: regular_distillation

      Get the regular distillation.

   .. py:property:: framework

      Get the framework.

   .. py:property:: search_space

      Get the search space.

   .. py:property:: search_algorithm

      Get the search algorithm.

   .. py:property:: max_trials

      Get the max trials.

   .. py:property:: seed

      Get the seed.

   .. py:property:: metrics

      Get the metrics.


